        -:    0:Source:/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/vendor/regex/include/boost/regex/v5/regex_raw_buffer.hpp
        -:    0:Graph:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcno
        -:    0:Data:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: *
        -:    3: * Copyright (c) 1998-2002
        -:    4: * John Maddock
        -:    5: *
        -:    6: * Use, modification and distribution are subject to the 
        -:    7: * Boost Software License, Version 1.0. (See accompanying file 
        -:    8: * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9: *
        -:   10: */
        -:   11:
        -:   12: /*
        -:   13:  *   LOCATION:    see http://www.boost.org for most recent version.
        -:   14:  *   FILE         regex_raw_buffer.hpp
        -:   15:  *   VERSION      see <boost/version.hpp>
        -:   16:  *   DESCRIPTION: Raw character buffer for regex code.
        -:   17:  *                Note this is an internal header file included
        -:   18:  *                by regex.hpp, do not include on its own.
        -:   19:  */
        -:   20:
        -:   21:#ifndef BOOST_REGEX_RAW_BUFFER_HPP
        -:   22:#define BOOST_REGEX_RAW_BUFFER_HPP
        -:   23:
        -:   24:#ifndef BOOST_REGEX_CONFIG_HPP
        -:   25:#include <boost/regex/config.hpp>
        -:   26:#endif
        -:   27:
        -:   28:#include <algorithm>
        -:   29:#include <cstddef>
        -:   30:
        -:   31:namespace boost{
        -:   32:   namespace BOOST_REGEX_DETAIL_NS{
        -:   33:
        -:   34:struct empty_padding{};
        -:   35:
        -:   36:union padding
        -:   37:{
        -:   38:   void* p;
        -:   39:   unsigned int i;
        -:   40:};
        -:   41:
        -:   42:template <int N>
        -:   43:struct padding3
        -:   44:{
        -:   45:   enum{
        -:   46:      padding_size = 8,
        -:   47:      padding_mask = 7
        -:   48:   };
        -:   49:};
        -:   50:
        -:   51:template<>
        -:   52:struct padding3<2>
        -:   53:{
        -:   54:   enum{
        -:   55:      padding_size = 2,
        -:   56:      padding_mask = 1
        -:   57:   };
        -:   58:};
        -:   59:
        -:   60:template<>
        -:   61:struct padding3<4>
        -:   62:{
        -:   63:   enum{
        -:   64:      padding_size = 4,
        -:   65:      padding_mask = 3
        -:   66:   };
        -:   67:};
        -:   68:
        -:   69:template<>
        -:   70:struct padding3<8>
        -:   71:{
        -:   72:   enum{
        -:   73:      padding_size = 8,
        -:   74:      padding_mask = 7
        -:   75:   };
        -:   76:};
        -:   77:
        -:   78:template<>
        -:   79:struct padding3<16>
        -:   80:{
        -:   81:   enum{
        -:   82:      padding_size = 16,
        -:   83:      padding_mask = 15
        -:   84:   };
        -:   85:};
        -:   86:
        -:   87:enum{
        -:   88:   padding_size = padding3<sizeof(padding)>::padding_size,
        -:   89:   padding_mask = padding3<sizeof(padding)>::padding_mask
        -:   90:};
        -:   91:
        -:   92://
        -:   93:// class raw_storage
        -:   94:// basically this is a simplified vector<unsigned char>
        -:   95:// this is used by basic_regex for expression storage
        -:   96://
        -:   97:
        -:   98:class raw_storage
        -:   99:{
        -:  100:public:
        -:  101:   typedef std::size_t           size_type;
        -:  102:   typedef unsigned char*        pointer;
        -:  103:private:
        -:  104:   pointer last, start, end;
        -:  105:public:
        -:  106:
        -:  107:   raw_storage();
        -:  108:   raw_storage(size_type n);
        -:  109:
function _ZN5boost13re_detail_50011raw_storageD2Ev called 0 returned 0% blocks executed 0%
    #####:  110:   ~raw_storage()
        -:  111:   {
    #####:  112:      ::operator delete(start);
    %%%%%:  112-block 2
call    0 never executed
    #####:  113:   }
        -:  114:
function _ZN5boost13re_detail_50011raw_storage6resizeEm called 2 returned 100% blocks executed 100%
        2:  115:   void  resize(size_type n)
        -:  116:   {
        2:  117:      size_type newsize = start ? last - start : 1024;
        2:  117-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  117-block 3
        1:  117-block 4
        3:  118:      while (newsize < n)
        2:  118-block 5
        3:  118-block 7
branch  0 taken 1
branch  1 taken 2 (fallthrough)
        1:  119:         newsize *= 2;
        1:  119-block 6
        2:  120:      size_type datasize = end - start;
        -:  121:      // extend newsize to WORD/DWORD boundary:
        2:  122:      newsize = (newsize + padding_mask) & ~(padding_mask);
        -:  123:
        -:  124:      // allocate and copy data:
        2:  125:      pointer ptr = static_cast<pointer>(::operator new(newsize));
        2:  125-block 8
call    0 returned 2
        -:  126:      BOOST_REGEX_NOEH_ASSERT(ptr)
        2:  127:         if (start)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  128:            std::memcpy(ptr, start, datasize);
        1:  128-block 10
        -:  129:
        -:  130:      // get rid of old buffer:
        2:  131:      ::operator delete(start);
        2:  131-block 11
call    0 returned 2
        -:  132:
        -:  133:      // and set up pointers:
        2:  134:      start = ptr;
        2:  135:      end = ptr + datasize;
        2:  136:      last = ptr + newsize;
        2:  137:   }
        -:  138:
function _ZN5boost13re_detail_50011raw_storage6extendEm called 8 returned 100% blocks executed 100%
        8:  139:   void*  extend(size_type n)
        -:  140:   {
        8:  141:      if(size_type(last - end) < n)
        8:  141-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        1:  142:         resize(n + (end - start));
        1:  142-block 3
call    0 returned 1
        8:  143:      pointer result = end;
        8:  144:      end += n;
        8:  145:      return result;
        8:  145-block 4
        -:  146:   }
        -:  147:
function _ZN5boost13re_detail_50011raw_storage6insertEmm called 2 returned 100% blocks executed 83%
        2:  148:   void*  insert(size_type pos, size_type n)
        -:  149:   {
       2*:  150:      BOOST_REGEX_ASSERT(pos <= size_type(end - start));
        2:  150-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  150-block 3
call    2 never executed
        2:  151:      if (size_type(last - end) < n)
        2:  151-block 4
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  152:         resize(n + (end - start));
        1:  152-block 5
call    0 returned 1
        2:  153:      void* result = start + pos;
        2:  154:      std::memmove(start + pos + n, start + pos, (end - start) - pos);
        2:  155:      end += n;
        2:  156:      return result;
        2:  156-block 6
        -:  157:   }
        -:  158:
function _ZN5boost13re_detail_50011raw_storage4sizeEv called 11 returned 100% blocks executed 100%
       11:  159:   size_type  size()
        -:  160:   {
       11:  161:      return size_type(end - start);
       11:  161-block 2
        -:  162:   }
        -:  163:
        -:  164:   size_type  capacity()
        -:  165:   {
        -:  166:      return size_type(last - start);
        -:  167:   }
        -:  168:
function _ZNK5boost13re_detail_50011raw_storage4dataEv called 21 returned 100% blocks executed 100%
       21:  169:   void*  data()const
        -:  170:   {
       21:  171:      return start;
       21:  171-block 2
        -:  172:   }
        -:  173:
        -:  174:   size_type  index(void* ptr)
        -:  175:   {
        -:  176:      return size_type(static_cast<pointer>(ptr) - static_cast<pointer>(data()));
        -:  177:   }
        -:  178:
function _ZN5boost13re_detail_50011raw_storage5clearEv called 1 returned 100% blocks executed 100%
        1:  179:   void  clear()
        -:  180:   {
        1:  181:      end = start;
        1:  182:   }
        -:  183:
function _ZN5boost13re_detail_50011raw_storage5alignEv called 11 returned 100% blocks executed 100%
       11:  184:   void  align()
        -:  185:   {
        -:  186:      // move end up to a boundary:
       11:  187:      end = start + (((end - start) + padding_mask) & ~padding_mask);
       11:  188:   }
        -:  189:   void swap(raw_storage& that)
        -:  190:   {
        -:  191:      std::swap(start, that.start);
        -:  192:      std::swap(end, that.end);
        -:  193:      std::swap(last, that.last);
        -:  194:  }
        -:  195:};
        -:  196:
function _ZN5boost13re_detail_50011raw_storageC2Ev called 1 returned 100% blocks executed 100%
        1:  197:inline raw_storage::raw_storage()
        -:  198:{
        1:  199:   last = start = end = 0;
        1:  200:}
        -:  201:
        -:  202:inline raw_storage::raw_storage(size_type n)
        -:  203:{
        -:  204:   start = end = static_cast<pointer>(::operator new(n));
        -:  205:   BOOST_REGEX_NOEH_ASSERT(start)
        -:  206:   last = start + n;
        -:  207:}
        -:  208:
        -:  209:} // namespace BOOST_REGEX_DETAIL_NS
        -:  210:} // namespace boost
        -:  211:
        -:  212:#endif
        -:  213:
