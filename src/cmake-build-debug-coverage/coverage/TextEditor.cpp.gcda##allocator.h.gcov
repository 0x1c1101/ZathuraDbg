        -:    0:Source:/usr/include/c++/14.2.1/bits/allocator.h
        -:    0:Graph:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcno
        -:    0:Data:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocators -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2024 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: * Copyright (c) 1996-1997
        -:   27: * Silicon Graphics Computer Systems, Inc.
        -:   28: *
        -:   29: * Permission to use, copy, modify, distribute and sell this software
        -:   30: * and its documentation for any purpose is hereby granted without fee,
        -:   31: * provided that the above copyright notice appear in all copies and
        -:   32: * that both that copyright notice and this permission notice appear
        -:   33: * in supporting documentation.  Silicon Graphics makes no
        -:   34: * representations about the suitability of this software for any
        -:   35: * purpose.  It is provided "as is" without express or implied warranty.
        -:   36: */
        -:   37:
        -:   38:/** @file bits/allocator.h
        -:   39: *  This is an internal header file, included by other library headers.
        -:   40: *  Do not attempt to use it directly. @headername{memory}
        -:   41: */
        -:   42:
        -:   43:#ifndef _ALLOCATOR_H
        -:   44:#define _ALLOCATOR_H 1
        -:   45:
        -:   46:#include <bits/c++allocator.h> // Define the base class to std::allocator.
        -:   47:#include <bits/memoryfwd.h>
        -:   48:#if __cplusplus >= 201103L
        -:   49:#include <type_traits>
        -:   50:#endif
        -:   51:
        -:   52:namespace std _GLIBCXX_VISIBILITY(default)
        -:   53:{
        -:   54:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   55:
        -:   56:  /**
        -:   57:   *  @addtogroup allocators
        -:   58:   *  @{
        -:   59:   */
        -:   60:
        -:   61:  // Since C++20 the primary template should be used for allocator<void>,
        -:   62:  // but then it would have a non-trivial default ctor and dtor for C++20,
        -:   63:  // but trivial for C++98-17, which would be an ABI incompatibility between
        -:   64:  // different standard dialects. So C++20 still uses the allocator<void>
        -:   65:  // explicit specialization, with the historical ABI properties, but with
        -:   66:  // the same members that are present in the primary template.
        -:   67:
        -:   68:  /** std::allocator<void> specialization.
        -:   69:   *
        -:   70:   * @headerfile memory
        -:   71:   */
        -:   72:  template<>
        -:   73:    class allocator<void>
        -:   74:    {
        -:   75:    public:
        -:   76:      typedef void        value_type;
        -:   77:      typedef size_t      size_type;
        -:   78:      typedef ptrdiff_t   difference_type;
        -:   79:
        -:   80:#if __cplusplus <= 201703L
        -:   81:      // These were removed for C++20, allocator_traits does the right thing.
        -:   82:      typedef void*       pointer;
        -:   83:      typedef const void* const_pointer;
        -:   84:
        -:   85:      template<typename _Tp1>
        -:   86:	struct rebind
        -:   87:	{ typedef allocator<_Tp1> other; };
        -:   88:#endif
        -:   89:
        -:   90:#if __cplusplus >= 201103L
        -:   91:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   92:      // 2103. std::allocator propagate_on_container_move_assignment
        -:   93:      using propagate_on_container_move_assignment = true_type;
        -:   94:
        -:   95:      using is_always_equal
        -:   96:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:   97:	= true_type;
        -:   98:
        -:   99:#if __cplusplus >= 202002L
        -:  100:      // As noted above, these members are present for C++20 to provide the
        -:  101:      // same API as the primary template, but still trivial as in pre-C++20.
        -:  102:      allocator() = default;
        -:  103:      ~allocator() = default;
        -:  104:
        -:  105:      template<typename _Up>
        -:  106:	__attribute__((__always_inline__))
        -:  107:	constexpr
        -:  108:	allocator(const allocator<_Up>&) noexcept { }
        -:  109:
        -:  110:      // No allocate member because it's ill-formed by LWG 3307.
        -:  111:      // No deallocate member because it would be undefined to call it
        -:  112:      // with any pointer which wasn't obtained from allocate.
        -:  113:#endif // C++20
        -:  114:#endif // C++11
        -:  115:    };
        -:  116:
        -:  117:  /**
        -:  118:   * @brief  The @a standard allocator, as per C++03 [20.4.1].
        -:  119:   *
        -:  120:   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
        -:  121:   *  for further details.
        -:  122:   *
        -:  123:   *  @tparam  _Tp  Type of allocated object.
        -:  124:   *
        -:  125:   *  @headerfile memory
        -:  126:   */
        -:  127:  template<typename _Tp>
        -:  128:    class allocator : public __allocator_base<_Tp>
        -:  129:    {
        -:  130:    public:
        -:  131:      typedef _Tp        value_type;
        -:  132:      typedef size_t     size_type;
        -:  133:      typedef ptrdiff_t  difference_type;
        -:  134:
        -:  135:#if __cplusplus <= 201703L
        -:  136:      // These were removed for C++20.
        -:  137:      typedef _Tp*       pointer;
        -:  138:      typedef const _Tp* const_pointer;
        -:  139:      typedef _Tp&       reference;
        -:  140:      typedef const _Tp& const_reference;
        -:  141:
        -:  142:      template<typename _Tp1>
        -:  143:	struct rebind
        -:  144:	{ typedef allocator<_Tp1> other; };
        -:  145:#endif
        -:  146:
        -:  147:#if __cplusplus >= 201103L
        -:  148:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  149:      // 2103. std::allocator propagate_on_container_move_assignment
        -:  150:      using propagate_on_container_move_assignment = true_type;
        -:  151:
        -:  152:      using is_always_equal
        -:  153:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:  154:	= true_type;
        -:  155:#endif
        -:  156:
        -:  157:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  158:      // 3035. std::allocator's constructors should be constexpr
        -:  159:      __attribute__((__always_inline__))
        -:  160:      _GLIBCXX20_CONSTEXPR
     292*:  161:      allocator() _GLIBCXX_NOTHROW { }
    %%%%%:  161-block 12
        2:  161-block 3
        1:  161-block 3
        1:  161-block 3
        1:  161-block 3
        1:  161-block 3
    %%%%%:  161-block 5
    %%%%%:  161-block 18
    %%%%%:  161-block 27
    %%%%%:  161-block 36
    %%%%%:  161-block 99
    %%%%%:  161-block 108
    %%%%%:  161-block 124
        4:  161-block 3
    %%%%%:  161-block 5
    %%%%%:  161-block 53
    %%%%%:  161-block 4
    %%%%%:  161-block 20
    %%%%%:  161-block 28
    %%%%%:  161-block 44
    %%%%%:  161-block 57
    %%%%%:  161-block 96
    %%%%%:  161-block 104
    %%%%%:  161-block 120
    %%%%%:  161-block 133
    %%%%%:  161-block 15
    %%%%%:  161-block 4
    %%%%%:  161-block 26
    %%%%%:  161-block 39
    %%%%%:  161-block 53
    %%%%%:  161-block 74
    %%%%%:  161-block 94
    %%%%%:  161-block 116
    %%%%%:  161-block 134
        2:  161-block 3
    %%%%%:  161-block 41
    %%%%%:  161-block 64
    %%%%%:  161-block 73
    %%%%%:  161-block 89
    %%%%%:  161-block 219
    %%%%%:  161-block 470
    %%%%%:  161-block 509
    %%%%%:  161-block 536
    %%%%%:  161-block 550
    %%%%%:  161-block 565
    %%%%%:  161-block 9
    %%%%%:  161-block 20
    %%%%%:  161-block 5
    %%%%%:  161-block 28
    %%%%%:  161-block 15
    %%%%%:  161-block 13
    %%%%%:  161-block 52
    %%%%%:  161-block 15
    %%%%%:  161-block 22
    %%%%%:  161-block 34
    %%%%%:  161-block 103
    %%%%%:  161-block 4
    %%%%%:  161-block 12
    %%%%%:  161-block 14
    %%%%%:  161-block 36
    %%%%%:  161-block 60
    %%%%%:  161-block 86
    %%%%%:  161-block 118
    %%%%%:  161-block 135
    %%%%%:  161-block 142
    %%%%%:  161-block 38
    %%%%%:  161-block 4
    %%%%%:  161-block 56
    %%%%%:  161-block 74
    %%%%%:  161-block 97
    %%%%%:  161-block 121
    %%%%%:  161-block 133
    %%%%%:  161-block 149
    %%%%%:  161-block 193
    %%%%%:  161-block 16
    %%%%%:  161-block 29
    %%%%%:  161-block 4
    %%%%%:  161-block 25
    %%%%%:  161-block 36
    %%%%%:  161-block 46
    %%%%%:  161-block 60
        1:  161-block 3
    %%%%%:  161-block 15
    %%%%%:  161-block 26
    %%%%%:  161-block 42
        1:  161-block 3
        1:  161-block 3
    %%%%%:  161-block 24
    %%%%%:  161-block 3
      225:  161-block 3
    %%%%%:  161-block 3
        2:  161-block 3
    %%%%%:  161-block 3
        2:  161-block 3
        1:  161-block 12
    %%%%%:  161-block 40
    %%%%%:  161-block 53
    %%%%%:  161-block 32
    %%%%%:  161-block 5
    %%%%%:  161-block 10
    %%%%%:  161-block 5
    %%%%%:  161-block 12
       42:  161-block 3
        1:  161-block 3
        1:  161-block 3
        1:  161-block 3
    %%%%%:  161-block 3
        1:  161-block 3
        1:  161-block 3
    %%%%%:  161-block 12
    %%%%%:  161-block 25
    %%%%%:  161-block 6
    %%%%%:  161-block 16
    %%%%%:  161-block 3
        -:  162:
        -:  163:      __attribute__((__always_inline__))
        -:  164:      _GLIBCXX20_CONSTEXPR
        -:  165:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
     120*:  166:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  166-block 4
    %%%%%:  166-block 3
        2:  166-block 4
    %%%%%:  166-block 3
    %%%%%:  166-block 4
    %%%%%:  166-block 4
        1:  166-block 3
      105:  166-block 4
        1:  166-block 3
        5:  166-block 3
    %%%%%:  166-block 34
    %%%%%:  166-block 3
    %%%%%:  166-block 4
        1:  166-block 3
        5:  166-block 4
    %%%%%:  166-block 4
    %%%%%:  166-block 4
    %%%%%:  166-block 3
    %%%%%:  166-block 4
        -:  167:
        -:  168:#if __cplusplus >= 201103L
        -:  169:      // Avoid implicit deprecation.
        -:  170:      allocator& operator=(const allocator&) = default;
        -:  171:#endif
        -:  172:
        -:  173:      template<typename _Tp1>
        -:  174:	__attribute__((__always_inline__))
        -:  175:	_GLIBCXX20_CONSTEXPR
       6*:  176:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
        2:  176-block 4
    %%%%%:  176-block 4
    %%%%%:  176-block 4
        2:  176-block 5
        2:  176-block 4
    %%%%%:  176-block 4
    %%%%%:  176-block 5
    %%%%%:  176-block 5
        -:  177:
        -:  178:      __attribute__((__always_inline__))
        -:  179:#if __cpp_constexpr_dynamic_alloc
        -:  180:      constexpr
        -:  181:#endif
     238*:  182:      ~allocator() _GLIBCXX_NOTHROW { }
    %%%%%:  182-block 14
    $$$$$:  182-block 64
    %%%%%:  182-block 11
    $$$$$:  182-block 17
    %%%%%:  182-block 20
    %%%%%:  182-block 32
    %%%%%:  182-block 39
    $$$$$:  182-block 47
    $$$$$:  182-block 52
    $$$$$:  182-block 56
    $$$$$:  182-block 59
    $$$$$:  182-block 213
    $$$$$:  182-block 217
    $$$$$:  182-block 226
    $$$$$:  182-block 24
    $$$$$:  182-block 71
    $$$$$:  182-block 168
    $$$$$:  182-block 174
    $$$$$:  182-block 180
    $$$$$:  182-block 186
    $$$$$:  182-block 192
    $$$$$:  182-block 198
    $$$$$:  182-block 204
    $$$$$:  182-block 210
    $$$$$:  182-block 216
    $$$$$:  182-block 33
    $$$$$:  182-block 196
    $$$$$:  182-block 202
    $$$$$:  182-block 208
    $$$$$:  182-block 214
    $$$$$:  182-block 220
    $$$$$:  182-block 226
    $$$$$:  182-block 232
    $$$$$:  182-block 238
    $$$$$:  182-block 590
    $$$$$:  182-block 596
    $$$$$:  182-block 602
    $$$$$:  182-block 608
    $$$$$:  182-block 614
    $$$$$:  182-block 623
    $$$$$:  182-block 629
    $$$$$:  182-block 635
    $$$$$:  182-block 641
    $$$$$:  182-block 647
    %%%%%:  182-block 16
    %%%%%:  182-block 24
    $$$$$:  182-block 29
    $$$$$:  182-block 35
    %%%%%:  182-block 7
    $$$$$:  182-block 24
    %%%%%:  182-block 30
    $$$$$:  182-block 158
    %%%%%:  182-block 17
    $$$$$:  182-block 43
    %%%%%:  182-block 15
    %%%%%:  182-block 54
    $$$$$:  182-block 65
    $$$$$:  182-block 73
    $$$$$:  182-block 38
    $$$$$:  182-block 44
    $$$$$:  182-block 117
    $$$$$:  182-block 126
    $$$$$:  182-block 54
    $$$$$:  182-block 38
    $$$$$:  182-block 169
    $$$$$:  182-block 175
    $$$$$:  182-block 181
    $$$$$:  182-block 187
    $$$$$:  182-block 193
    $$$$$:  182-block 199
    $$$$$:  182-block 205
    $$$$$:  182-block 123
    $$$$$:  182-block 213
    $$$$$:  182-block 222
    $$$$$:  182-block 228
    $$$$$:  182-block 237
    $$$$$:  182-block 243
    $$$$$:  182-block 249
    $$$$$:  182-block 255
    $$$$$:  182-block 261
    $$$$$:  182-block 48
    $$$$$:  182-block 54
    $$$$$:  182-block 22
    $$$$$:  182-block 94
    $$$$$:  182-block 100
    $$$$$:  182-block 106
    $$$$$:  182-block 112
    $$$$$:  182-block 20
    %%%%%:  182-block 11
    $$$$$:  182-block 17
    $$$$$:  182-block 20
    $$$$$:  182-block 20
    $$$$$:  182-block 58
    $$$$$:  182-block 64
    $$$$$:  182-block 70
        2:  182-block 13
        2:  182-block 6
    $$$$$:  182-block 11
    %%%%%:  182-block 6
    $$$$$:  182-block 11
    $$$$$:  182-block 43
    %%%%%:  182-block 13
    %%%%%:  182-block 13
    %%%%%:  182-block 40
    $$$$$:  182-block 49
    %%%%%:  182-block 7
    $$$$$:  182-block 10
        5:  182-block 11
    $$$$$:  182-block 17
    %%%%%:  182-block 9
    $$$$$:  182-block 12
        1:  182-block 14
    $$$$$:  182-block 90
    %%%%%:  182-block 42
    $$$$$:  182-block 72
    %%%%%:  182-block 55
    $$$$$:  182-block 81
    $$$$$:  182-block 77
    %%%%%:  182-block 11
    $$$$$:  182-block 17
    %%%%%:  182-block 7
    $$$$$:  182-block 35
    %%%%%:  182-block 13
    $$$$$:  182-block 18
    %%%%%:  182-block 8
    %%%%%:  182-block 15
    $$$$$:  182-block 84
    $$$$$:  182-block 87
    %%%%%:  182-block 14
    $$$$$:  182-block 59
    $$$$$:  182-block 72
    %%%%%:  182-block 8
    %%%%%:  182-block 19
    $$$$$:  182-block 25
    $$$$$:  182-block 28
        -:  183:
        -:  184:#if __cplusplus > 201703L
        -:  185:      [[nodiscard,__gnu__::__always_inline__]]
        -:  186:      constexpr _Tp*
        -:  187:      allocate(size_t __n)
        -:  188:      {
    1338*:  189:	if (std::__is_constant_evaluated())
    %%%%%:  189-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  189-block 5
branch  2 never executed (fallthrough)
branch  3 never executed
        1:  189-block 5
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        2:  189-block 5
branch  6 taken 0 (fallthrough)
branch  7 taken 2
        1:  189-block 4
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:  189-block 5
branch 10 never executed (fallthrough)
branch 11 never executed
        7:  189-block 5
branch 12 taken 0 (fallthrough)
branch 13 taken 7
        2:  189-block 5
branch 14 taken 0 (fallthrough)
branch 15 taken 2
    %%%%%:  189-block 5
branch 16 never executed (fallthrough)
branch 17 never executed
        6:  189-block 5
branch 18 taken 0 (fallthrough)
branch 19 taken 6
    %%%%%:  189-block 5
branch 20 never executed (fallthrough)
branch 21 never executed
    %%%%%:  189-block 5
branch 22 never executed (fallthrough)
branch 23 never executed
    %%%%%:  189-block 5
branch 24 never executed (fallthrough)
branch 25 never executed
    %%%%%:  189-block 5
branch 26 never executed (fallthrough)
branch 27 never executed
        2:  189-block 7
branch 28 taken 0 (fallthrough)
branch 29 taken 2
    %%%%%:  189-block 7
branch 30 never executed (fallthrough)
branch 31 never executed
    %%%%%:  189-block 7
branch 32 never executed (fallthrough)
branch 33 never executed
    %%%%%:  189-block 5
branch 34 never executed (fallthrough)
branch 35 never executed
       24:  189-block 5
branch 36 taken 0 (fallthrough)
branch 37 taken 24
    %%%%%:  189-block 5
branch 38 never executed (fallthrough)
branch 39 never executed
        4:  189-block 5
branch 40 taken 0 (fallthrough)
branch 41 taken 4
    %%%%%:  189-block 5
branch 42 never executed (fallthrough)
branch 43 never executed
        1:  189-block 5
branch 44 taken 0 (fallthrough)
branch 45 taken 1
    %%%%%:  189-block 5
branch 46 never executed (fallthrough)
branch 47 never executed
    %%%%%:  189-block 5
branch 48 never executed (fallthrough)
branch 49 never executed
     1077:  189-block 5
branch 50 taken 0 (fallthrough)
branch 51 taken 1077
    %%%%%:  189-block 5
branch 52 never executed (fallthrough)
branch 53 never executed
        7:  189-block 5
branch 54 taken 0 (fallthrough)
branch 55 taken 7
        1:  189-block 5
branch 56 taken 0 (fallthrough)
branch 57 taken 1
       19:  189-block 5
branch 58 taken 0 (fallthrough)
branch 59 taken 19
      184:  189-block 5
branch 60 taken 0 (fallthrough)
branch 61 taken 184
    %%%%%:  189-block 4
branch 62 never executed (fallthrough)
branch 63 never executed
        -:  190:	  {
    #####:  191:	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
    %%%%%:  191-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  191-block 6
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  191-block 6
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  191-block 6
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  191-block 5
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%:  191-block 6
branch 10 never executed (fallthrough)
branch 11 never executed
    %%%%%:  191-block 6
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%:  191-block 6
branch 14 never executed (fallthrough)
branch 15 never executed
    %%%%%:  191-block 6
branch 16 never executed (fallthrough)
branch 17 never executed
    %%%%%:  191-block 6
branch 18 never executed (fallthrough)
branch 19 never executed
    %%%%%:  191-block 6
branch 20 never executed (fallthrough)
branch 21 never executed
    %%%%%:  191-block 6
branch 22 never executed (fallthrough)
branch 23 never executed
    %%%%%:  191-block 6
branch 24 never executed (fallthrough)
branch 25 never executed
    %%%%%:  191-block 6
branch 26 never executed (fallthrough)
branch 27 never executed
    %%%%%:  191-block 8
branch 28 never executed (fallthrough)
branch 29 never executed
    %%%%%:  191-block 8
branch 30 never executed (fallthrough)
branch 31 never executed
    %%%%%:  191-block 8
branch 32 never executed (fallthrough)
branch 33 never executed
    %%%%%:  191-block 6
branch 34 never executed (fallthrough)
branch 35 never executed
    %%%%%:  191-block 6
branch 36 never executed (fallthrough)
branch 37 never executed
    %%%%%:  191-block 6
branch 38 never executed (fallthrough)
branch 39 never executed
    %%%%%:  191-block 6
branch 40 never executed (fallthrough)
branch 41 never executed
    %%%%%:  191-block 6
branch 42 never executed (fallthrough)
branch 43 never executed
    %%%%%:  191-block 6
branch 44 never executed (fallthrough)
branch 45 never executed
    %%%%%:  191-block 6
branch 46 never executed (fallthrough)
branch 47 never executed
    %%%%%:  191-block 6
branch 48 never executed (fallthrough)
branch 49 never executed
    %%%%%:  191-block 6
branch 50 never executed (fallthrough)
branch 51 never executed
    %%%%%:  191-block 6
branch 52 never executed (fallthrough)
branch 53 never executed
    %%%%%:  191-block 6
branch 54 never executed (fallthrough)
branch 55 never executed
    %%%%%:  191-block 6
branch 56 never executed (fallthrough)
branch 57 never executed
    %%%%%:  191-block 6
branch 58 never executed (fallthrough)
branch 59 never executed
    %%%%%:  191-block 6
branch 60 never executed (fallthrough)
branch 61 never executed
    %%%%%:  191-block 5
branch 62 never executed (fallthrough)
branch 63 never executed
    #####:  192:	      std::__throw_bad_array_new_length();
    %%%%%:  192-block 7
call    0 never executed
    %%%%%:  192-block 7
call    1 never executed
    %%%%%:  192-block 7
call    2 never executed
    %%%%%:  192-block 7
call    3 never executed
    %%%%%:  192-block 6
call    4 never executed
    %%%%%:  192-block 7
call    5 never executed
    %%%%%:  192-block 7
call    6 never executed
    %%%%%:  192-block 7
call    7 never executed
    %%%%%:  192-block 7
call    8 never executed
    %%%%%:  192-block 7
call    9 never executed
    %%%%%:  192-block 7
call   10 never executed
    %%%%%:  192-block 7
call   11 never executed
    %%%%%:  192-block 7
call   12 never executed
    %%%%%:  192-block 7
call   13 never executed
    %%%%%:  192-block 9
call   14 never executed
    %%%%%:  192-block 9
call   15 never executed
    %%%%%:  192-block 9
call   16 never executed
    %%%%%:  192-block 7
call   17 never executed
    %%%%%:  192-block 7
call   18 never executed
    %%%%%:  192-block 7
call   19 never executed
    %%%%%:  192-block 7
call   20 never executed
    %%%%%:  192-block 7
call   21 never executed
    %%%%%:  192-block 7
call   22 never executed
    %%%%%:  192-block 7
call   23 never executed
    %%%%%:  192-block 7
call   24 never executed
    %%%%%:  192-block 7
call   25 never executed
    %%%%%:  192-block 7
call   26 never executed
    %%%%%:  192-block 7
call   27 never executed
    %%%%%:  192-block 7
call   28 never executed
    %%%%%:  192-block 7
call   29 never executed
    %%%%%:  192-block 7
call   30 never executed
    %%%%%:  192-block 6
call   31 never executed
    #####:  193:	    return static_cast<_Tp*>(::operator new(__n));
    %%%%%:  193-block 8
call    0 never executed
    %%%%%:  193-block 8
call    1 never executed
    %%%%%:  193-block 8
call    2 never executed
    %%%%%:  193-block 8
call    3 never executed
    %%%%%:  193-block 7
call    4 never executed
    %%%%%:  193-block 8
call    5 never executed
    %%%%%:  193-block 8
call    6 never executed
    %%%%%:  193-block 8
call    7 never executed
    %%%%%:  193-block 8
call    8 never executed
    %%%%%:  193-block 8
call    9 never executed
    %%%%%:  193-block 8
call   10 never executed
    %%%%%:  193-block 8
call   11 never executed
    %%%%%:  193-block 8
call   12 never executed
    %%%%%:  193-block 8
call   13 never executed
    %%%%%:  193-block 10
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  193-block 11
    %%%%%:  193-block 10
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  193-block 11
    %%%%%:  193-block 10
call   20 never executed
branch 21 never executed (fallthrough)
branch 22 never executed (throw)
    %%%%%:  193-block 11
    %%%%%:  193-block 8
call   23 never executed
    %%%%%:  193-block 8
call   24 never executed
    %%%%%:  193-block 8
call   25 never executed
    %%%%%:  193-block 8
call   26 never executed
    %%%%%:  193-block 8
call   27 never executed
    %%%%%:  193-block 8
call   28 never executed
    %%%%%:  193-block 8
call   29 never executed
    %%%%%:  193-block 8
call   30 never executed
    %%%%%:  193-block 8
call   31 never executed
    %%%%%:  193-block 8
call   32 never executed
    %%%%%:  193-block 8
call   33 never executed
    %%%%%:  193-block 8
call   34 never executed
    %%%%%:  193-block 8
call   35 never executed
    %%%%%:  193-block 8
call   36 never executed
    %%%%%:  193-block 7
call   37 never executed
        -:  194:	  }
        -:  195:
    1338*:  196:	return __allocator_base<_Tp>::allocate(__n, 0);
    %%%%%:  196-block 10
call    0 never executed
    %%%%%:  196-block 10
call    1 never executed
        1:  196-block 10
call    2 returned 1
        2:  196-block 10
call    3 returned 2
        1:  196-block 9
call    4 returned 1
    %%%%%:  196-block 10
call    5 never executed
        7:  196-block 10
call    6 returned 7
        2:  196-block 10
call    7 returned 2
    %%%%%:  196-block 10
call    8 never executed
        6:  196-block 10
call    9 returned 6
    %%%%%:  196-block 10
call   10 never executed
    %%%%%:  196-block 10
call   11 never executed
    %%%%%:  196-block 10
call   12 never executed
    %%%%%:  196-block 10
call   13 never executed
        2:  196-block 12
call   14 returned 2
branch 15 taken 2 (fallthrough)
branch 16 taken 0 (throw)
        2:  196-block 13
    %%%%%:  196-block 12
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  196-block 13
    %%%%%:  196-block 12
call   20 never executed
branch 21 never executed (fallthrough)
branch 22 never executed (throw)
    %%%%%:  196-block 13
    %%%%%:  196-block 10
call   23 never executed
       24:  196-block 10
call   24 returned 24
    %%%%%:  196-block 10
call   25 never executed
        4:  196-block 10
call   26 returned 4
    %%%%%:  196-block 10
call   27 never executed
        1:  196-block 10
call   28 returned 1
    %%%%%:  196-block 10
call   29 never executed
    %%%%%:  196-block 10
call   30 never executed
     1077:  196-block 10
call   31 returned 1077
    %%%%%:  196-block 10
call   32 never executed
        7:  196-block 10
call   33 returned 7
        1:  196-block 10
call   34 returned 1
       19:  196-block 10
call   35 returned 19
      184:  196-block 10
call   36 returned 184
    %%%%%:  196-block 9
call   37 never executed
        -:  197:      }
        -:  198:
        -:  199:      [[__gnu__::__always_inline__]]
        -:  200:      constexpr void
        -:  201:      deallocate(_Tp* __p, size_t __n)
        -:  202:      {
    1376*:  203:	if (std::__is_constant_evaluated())
       87:  203-block 5
branch  0 taken 0 (fallthrough)
branch  1 taken 87
    %%%%%:  203-block 5
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  203-block 5
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  203-block 5
branch  6 never executed (fallthrough)
branch  7 never executed
        1:  203-block 5
branch  8 taken 0 (fallthrough)
branch  9 taken 1
        1:  203-block 4
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:  203-block 5
branch 12 never executed (fallthrough)
branch 13 never executed
        5:  203-block 5
branch 14 taken 0 (fallthrough)
branch 15 taken 5
        2:  203-block 5
branch 16 taken 0 (fallthrough)
branch 17 taken 2
        1:  203-block 5
branch 18 taken 0 (fallthrough)
branch 19 taken 1
        2:  203-block 5
branch 20 taken 0 (fallthrough)
branch 21 taken 2
    %%%%%:  203-block 5
branch 22 never executed (fallthrough)
branch 23 never executed
        1:  203-block 5
branch 24 taken 0 (fallthrough)
branch 25 taken 1
    %%%%%:  203-block 5
branch 26 never executed (fallthrough)
branch 27 never executed
    %%%%%:  203-block 5
branch 28 never executed (fallthrough)
branch 29 never executed
    %%%%%:  203-block 5
branch 30 never executed (fallthrough)
branch 31 never executed
    %%%%%:  203-block 5
branch 32 never executed (fallthrough)
branch 33 never executed
        6:  203-block 6
branch 34 taken 0 (fallthrough)
branch 35 taken 6
        2:  203-block 8
branch 36 taken 0 (fallthrough)
branch 37 taken 2
    %%%%%:  203-block 5
branch 38 never executed (fallthrough)
branch 39 never executed
    %%%%%:  203-block 6
branch 40 never executed (fallthrough)
branch 41 never executed
    %%%%%:  203-block 6
branch 42 never executed (fallthrough)
branch 43 never executed
    %%%%%:  203-block 5
branch 44 never executed (fallthrough)
branch 45 never executed
    $$$$$:  203-block 33
branch 46 never executed (fallthrough)
branch 47 never executed
    %%%%%:  203-block 8
branch 48 never executed (fallthrough)
branch 49 never executed
    %%%%%:  203-block 8
branch 50 never executed (fallthrough)
branch 51 never executed
    %%%%%:  203-block 5
branch 52 never executed (fallthrough)
branch 53 never executed
       18:  203-block 5
branch 54 taken 0 (fallthrough)
branch 55 taken 18
    %%%%%:  203-block 5
branch 56 never executed (fallthrough)
branch 57 never executed
    %%%%%:  203-block 5
branch 58 never executed (fallthrough)
branch 59 never executed
    %%%%%:  203-block 5
branch 60 never executed (fallthrough)
branch 61 never executed
    %%%%%:  203-block 5
branch 62 never executed (fallthrough)
branch 63 never executed
    %%%%%:  203-block 5
branch 64 never executed (fallthrough)
branch 65 never executed
    %%%%%:  203-block 5
branch 66 never executed (fallthrough)
branch 67 never executed
    %%%%%:  203-block 5
branch 68 never executed (fallthrough)
branch 69 never executed
    %%%%%:  203-block 5
branch 70 never executed (fallthrough)
branch 71 never executed
    %%%%%:  203-block 5
branch 72 never executed (fallthrough)
branch 73 never executed
    %%%%%:  203-block 5
branch 74 never executed (fallthrough)
branch 75 never executed
    %%%%%:  203-block 5
branch 76 never executed (fallthrough)
branch 77 never executed
     1077:  203-block 5
branch 78 taken 0 (fallthrough)
branch 79 taken 1077
    %%%%%:  203-block 5
branch 80 never executed (fallthrough)
branch 81 never executed
        3:  203-block 5
branch 82 taken 0 (fallthrough)
branch 83 taken 3
       15:  203-block 5
branch 84 taken 0 (fallthrough)
branch 85 taken 15
    %%%%%:  203-block 5
branch 86 never executed (fallthrough)
branch 87 never executed
      148:  203-block 5
branch 88 taken 0 (fallthrough)
branch 89 taken 148
        6:  203-block 5
branch 90 taken 0 (fallthrough)
branch 91 taken 6
    %%%%%:  203-block 5
branch 92 never executed (fallthrough)
branch 93 never executed
    %%%%%:  203-block 5
branch 94 never executed (fallthrough)
branch 95 never executed
    %%%%%:  203-block 5
branch 96 never executed (fallthrough)
branch 97 never executed
    %%%%%:  203-block 5
branch 98 never executed (fallthrough)
branch 99 never executed
    %%%%%:  203-block 5
branch 100 never executed (fallthrough)
branch 101 never executed
    %%%%%:  203-block 5
branch 102 never executed (fallthrough)
branch 103 never executed
    %%%%%:  203-block 5
branch 104 never executed (fallthrough)
branch 105 never executed
        1:  203-block 5
branch 106 taken 0 (fallthrough)
branch 107 taken 1
    %%%%%:  203-block 5
branch 108 never executed (fallthrough)
branch 109 never executed
    %%%%%:  203-block 6
branch 110 never executed (fallthrough)
branch 111 never executed
    %%%%%:  203-block 20
branch 112 never executed (fallthrough)
branch 113 never executed
        -:  204:	  {
    #####:  205:	    ::operator delete(__p);
    %%%%%:  205-block 6
call    0 never executed
    %%%%%:  205-block 6
call    1 never executed
    %%%%%:  205-block 6
call    2 never executed
    %%%%%:  205-block 6
call    3 never executed
    %%%%%:  205-block 6
call    4 never executed
    %%%%%:  205-block 5
call    5 never executed
    %%%%%:  205-block 6
call    6 never executed
    %%%%%:  205-block 6
call    7 never executed
    %%%%%:  205-block 6
call    8 never executed
    %%%%%:  205-block 6
call    9 never executed
    %%%%%:  205-block 6
call   10 never executed
    %%%%%:  205-block 6
call   11 never executed
    %%%%%:  205-block 6
call   12 never executed
    %%%%%:  205-block 6
call   13 never executed
    %%%%%:  205-block 6
call   14 never executed
    %%%%%:  205-block 6
call   15 never executed
    %%%%%:  205-block 6
call   16 never executed
    %%%%%:  205-block 7
call   17 never executed
    %%%%%:  205-block 9
call   18 never executed
    %%%%%:  205-block 6
call   19 never executed
    %%%%%:  205-block 7
call   20 never executed
    %%%%%:  205-block 7
call   21 never executed
    %%%%%:  205-block 6
call   22 never executed
    $$$$$:  205-block 34
call   23 never executed
    %%%%%:  205-block 9
call   24 never executed
    %%%%%:  205-block 9
call   25 never executed
    %%%%%:  205-block 6
call   26 never executed
    %%%%%:  205-block 6
call   27 never executed
    %%%%%:  205-block 6
call   28 never executed
    %%%%%:  205-block 6
call   29 never executed
    %%%%%:  205-block 6
call   30 never executed
    %%%%%:  205-block 6
call   31 never executed
    %%%%%:  205-block 6
call   32 never executed
    %%%%%:  205-block 6
call   33 never executed
    %%%%%:  205-block 6
call   34 never executed
    %%%%%:  205-block 6
call   35 never executed
    %%%%%:  205-block 6
call   36 never executed
    %%%%%:  205-block 6
call   37 never executed
    %%%%%:  205-block 6
call   38 never executed
    %%%%%:  205-block 6
call   39 never executed
    %%%%%:  205-block 6
call   40 never executed
    %%%%%:  205-block 6
call   41 never executed
    %%%%%:  205-block 6
call   42 never executed
    %%%%%:  205-block 6
call   43 never executed
    %%%%%:  205-block 6
call   44 never executed
    %%%%%:  205-block 6
call   45 never executed
    %%%%%:  205-block 6
call   46 never executed
    %%%%%:  205-block 6
call   47 never executed
    %%%%%:  205-block 6
call   48 never executed
    %%%%%:  205-block 6
call   49 never executed
    %%%%%:  205-block 6
call   50 never executed
    %%%%%:  205-block 6
call   51 never executed
    %%%%%:  205-block 6
call   52 never executed
    %%%%%:  205-block 6
call   53 never executed
    %%%%%:  205-block 6
call   54 never executed
    %%%%%:  205-block 7
call   55 never executed
    %%%%%:  205-block 21
call   56 never executed
    #####:  206:	    return;
        -:  207:	  }
    1376*:  208:	__allocator_base<_Tp>::deallocate(__p, __n);
       87:  208-block 8
call    0 returned 87
    %%%%%:  208-block 8
call    1 never executed
    %%%%%:  208-block 8
call    2 never executed
    %%%%%:  208-block 8
call    3 never executed
        1:  208-block 8
call    4 returned 1
        1:  208-block 7
call    5 returned 1
    %%%%%:  208-block 8
call    6 never executed
        5:  208-block 8
call    7 returned 5
        2:  208-block 8
call    8 returned 2
        1:  208-block 8
call    9 returned 1
        2:  208-block 8
call   10 returned 2
    %%%%%:  208-block 8
call   11 never executed
        1:  208-block 8
call   12 returned 1
    %%%%%:  208-block 8
call   13 never executed
    %%%%%:  208-block 8
call   14 never executed
    %%%%%:  208-block 8
call   15 never executed
    %%%%%:  208-block 8
call   16 never executed
        6:  208-block 9
call   17 returned 6
        2:  208-block 11
call   18 returned 2
    %%%%%:  208-block 8
call   19 never executed
    %%%%%:  208-block 9
call   20 never executed
    %%%%%:  208-block 9
call   21 never executed
    %%%%%:  208-block 8
call   22 never executed
    $$$$$:  208-block 36
call   23 never executed
    %%%%%:  208-block 11
call   24 never executed
    %%%%%:  208-block 11
call   25 never executed
    %%%%%:  208-block 8
call   26 never executed
       18:  208-block 8
call   27 returned 18
    %%%%%:  208-block 8
call   28 never executed
    %%%%%:  208-block 8
call   29 never executed
    %%%%%:  208-block 8
call   30 never executed
    %%%%%:  208-block 8
call   31 never executed
    %%%%%:  208-block 8
call   32 never executed
    %%%%%:  208-block 8
call   33 never executed
    %%%%%:  208-block 8
call   34 never executed
    %%%%%:  208-block 8
call   35 never executed
    %%%%%:  208-block 8
call   36 never executed
    %%%%%:  208-block 8
call   37 never executed
    %%%%%:  208-block 8
call   38 never executed
     1077:  208-block 8
call   39 returned 1077
    %%%%%:  208-block 8
call   40 never executed
        3:  208-block 8
call   41 returned 3
       15:  208-block 8
call   42 returned 15
    %%%%%:  208-block 8
call   43 never executed
      148:  208-block 8
call   44 returned 148
        6:  208-block 8
call   45 returned 6
    %%%%%:  208-block 8
call   46 never executed
    %%%%%:  208-block 8
call   47 never executed
    %%%%%:  208-block 8
call   48 never executed
    %%%%%:  208-block 8
call   49 never executed
    %%%%%:  208-block 8
call   50 never executed
    %%%%%:  208-block 8
call   51 never executed
    %%%%%:  208-block 8
call   52 never executed
        1:  208-block 8
call   53 returned 1
    %%%%%:  208-block 8
call   54 never executed
    %%%%%:  208-block 9
call   55 never executed
    %%%%%:  208-block 23
call   56 never executed
        -:  209:      }
        -:  210:#endif // C++20
        -:  211:
        -:  212:      friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
        -:  213:      bool
        -:  214:      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
    #####:  215:      { return true; }
        -:  216:
        -:  217:#if __cpp_impl_three_way_comparison < 201907L
        -:  218:      friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
        -:  219:      bool
        -:  220:      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
        -:  221:      { return false; }
        -:  222:#endif
        -:  223:
        -:  224:      // Inherit everything else.
        -:  225:    };
        -:  226:
        -:  227:  /** Equality comparison for std::allocator objects
        -:  228:   *
        -:  229:   * @return true, for all std::allocator objects.
        -:  230:   * @relates std::allocator
        -:  231:   */
        -:  232:  template<typename _T1, typename _T2>
        -:  233:    __attribute__((__always_inline__))
        -:  234:    inline _GLIBCXX20_CONSTEXPR bool
        -:  235:    operator==(const allocator<_T1>&, const allocator<_T2>&)
        -:  236:    _GLIBCXX_NOTHROW
        -:  237:    { return true; }
        -:  238:
        -:  239:#if __cpp_impl_three_way_comparison < 201907L
        -:  240:  template<typename _T1, typename _T2>
        -:  241:    __attribute__((__always_inline__))
        -:  242:    inline _GLIBCXX20_CONSTEXPR bool
        -:  243:    operator!=(const allocator<_T1>&, const allocator<_T2>&)
        -:  244:    _GLIBCXX_NOTHROW
        -:  245:    { return false; }
        -:  246:#endif
        -:  247:
        -:  248:  /// @cond undocumented
        -:  249:
        -:  250:  // Invalid allocator<cv T> partial specializations.
        -:  251:  // allocator_traits::rebind_alloc can be used to form a valid allocator type.
        -:  252:  template<typename _Tp>
        -:  253:    class allocator<const _Tp>
        -:  254:    {
        -:  255:    public:
        -:  256:      typedef _Tp value_type;
        -:  257:      allocator() { }
        -:  258:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  259:    };
        -:  260:
        -:  261:  template<typename _Tp>
        -:  262:    class allocator<volatile _Tp>
        -:  263:    {
        -:  264:    public:
        -:  265:      typedef _Tp value_type;
        -:  266:      allocator() { }
        -:  267:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  268:    };
        -:  269:
        -:  270:  template<typename _Tp>
        -:  271:    class allocator<const volatile _Tp>
        -:  272:    {
        -:  273:    public:
        -:  274:      typedef _Tp value_type;
        -:  275:      allocator() { }
        -:  276:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  277:    };
        -:  278:  /// @endcond
        -:  279:
        -:  280:  /// @} group allocator
        -:  281:
        -:  282:  // Inhibit implicit instantiations for required instantiations,
        -:  283:  // which are defined via explicit instantiations elsewhere.
        -:  284:#if _GLIBCXX_EXTERN_TEMPLATE
        -:  285:  extern template class allocator<char>;
        -:  286:  extern template class allocator<wchar_t>;
        -:  287:#endif
        -:  288:
        -:  289:  // Undefine.
        -:  290:#undef __allocator_base
        -:  291:
        -:  292:_GLIBCXX_END_NAMESPACE_VERSION
        -:  293:} // namespace std
        -:  294:
        -:  295:#endif
