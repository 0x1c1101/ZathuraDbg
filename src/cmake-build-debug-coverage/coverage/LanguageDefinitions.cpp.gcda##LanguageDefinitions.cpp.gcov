        -:    0:Source:/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/LanguageDefinitions.cpp
        -:    0:Graph:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/LanguageDefinitions.cpp.gcno
        -:    0:Data:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/LanguageDefinitions.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "TextEditor.h"
        -:    2:
function _ZL20TokenizeCStyleStringPKcS0_RS0_S1_ called 96 returned 100% blocks executed 25%
       96:    3:static bool TokenizeCStyleString(const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end)
        -:    4:{
       96:    5:	const char* p = in_begin;
        -:    6:
       96:    7:	if (*p == '"')
       96:    7-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 96
        -:    8:	{
    #####:    9:		p++;
        -:   10:
    #####:   11:		while (p < in_end)
    %%%%%:   11-block 3
    %%%%%:   11-block 11
branch  0 never executed
branch  1 never executed (fallthrough)
        -:   12:		{
        -:   13:			// handle end of string
    #####:   14:			if (*p == '"')
    %%%%%:   14-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   15:			{
    #####:   16:				out_begin = in_begin;
    #####:   17:				out_end = p + 1;
    #####:   18:				return true;
    %%%%%:   18-block 5
        -:   19:			}
        -:   20:
        -:   21:			// handle escape character for "
    #####:   22:			if (*p == '\\' && p + 1 < in_end && p[1] == '"')
    %%%%%:   22-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   22-block 7
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:   22-block 8
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:   23:				p++;
    %%%%%:   23-block 9
        -:   24:
    #####:   25:			p++;
    %%%%%:   25-block 10
        -:   26:		}
        -:   27:	}
        -:   28:
       96:   29:	return false;
       96:   29-block 12
        -:   30:}
        -:   31:
function _ZL30TokenizeCStyleCharacterLiteralPKcS0_RS0_S1_ called 96 returned 100% blocks executed 27%
       96:   32:static bool TokenizeCStyleCharacterLiteral(const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end)
        -:   33:{
       96:   34:	const char* p = in_begin;
        -:   35:
       96:   36:	if (*p == '\'')
       96:   36-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 96
        -:   37:	{
    #####:   38:		p++;
        -:   39:
        -:   40:		// handle escape characters
    #####:   41:		if (p < in_end && *p == '\\')
    %%%%%:   41-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   41-block 4
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:   42:			p++;
    %%%%%:   42-block 5
        -:   43:
    #####:   44:		if (p < in_end)
    %%%%%:   44-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   45:			p++;
    %%%%%:   45-block 7
        -:   46:
        -:   47:		// handle end of character literal
    #####:   48:		if (p < in_end && *p == '\'')
    %%%%%:   48-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   48-block 9
branch  2 never executed (fallthrough)
branch  3 never executed
        -:   49:		{
    #####:   50:			out_begin = in_begin;
    #####:   51:			out_end = p + 1;
    #####:   52:			return true;
    %%%%%:   52-block 10
        -:   53:		}
        -:   54:	}
        -:   55:
       96:   56:	return false;
       96:   56-block 11
        -:   57:}
        -:   58:
function _ZL24TokenizeCStyleIdentifierPKcS0_RS0_S1_ called 96 returned 100% blocks executed 94%
       96:   59:static bool TokenizeCStyleIdentifier(const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end)
        -:   60:{
       96:   61:	const char* p = in_begin;
        -:   62:
      96*:   63:	if ((*p >= 'a' && *p <= 'z') || (*p >= 'A' && *p <= 'Z') || *p == '_')
       96:   63-block 2
branch  0 taken 71 (fallthrough)
branch  1 taken 25
       71:   63-block 3
branch  2 taken 0 (fallthrough)
branch  3 taken 71
       25:   63-block 4
branch  4 taken 0 (fallthrough)
branch  5 taken 25
    %%%%%:   63-block 5
branch  6 never executed (fallthrough)
branch  7 never executed
       25:   63-block 6
branch  8 taken 0 (fallthrough)
branch  9 taken 25
        -:   64:	{
       71:   65:		p++;
        -:   66:
      340:   67:		while ((p < in_end) && ((*p >= 'a' && *p <= 'z') || (*p >= 'A' && *p <= 'Z') || (*p >= '0' && *p <= '9') || *p == '_'))
       71:   67-block 7
      340:   67-block 9
branch  0 taken 316 (fallthrough)
branch  1 taken 24
      316:   67-block 10
branch  2 taken 257 (fallthrough)
branch  3 taken 59
      257:   67-block 11
branch  4 taken 257
branch  5 taken 0 (fallthrough)
       59:   67-block 12
branch  6 taken 3 (fallthrough)
branch  7 taken 56
        3:   67-block 13
branch  8 taken 0
branch  9 taken 3 (fallthrough)
       59:   67-block 14
branch 10 taken 18 (fallthrough)
branch 11 taken 41
       18:   67-block 15
branch 12 taken 9
branch 13 taken 9 (fallthrough)
       50:   67-block 16
branch 14 taken 3
branch 15 taken 47 (fallthrough)
      269:   68:			p++;
      269:   68-block 8
        -:   69:
       71:   70:		out_begin = in_begin;
       71:   71:		out_end = p;
       71:   72:		return true;
       71:   72-block 17
        -:   73:	}
        -:   74:
       25:   75:	return false;
       25:   75-block 18
        -:   76:}
        -:   77:
        -:   78:
function _ZL22TokenizeX86StyleNumberPKcS0_RS0_S1_ called 0 returned 0% blocks executed 0%
    #####:   79:static bool TokenizeX86StyleNumber(const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end)
        -:   80:{
    #####:   81:    const char* p = in_begin;
        -:   82:
    #####:   83:    const bool startsWithNumber = *p >= '0' && *p <= '9';
    %%%%%:   83-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   83-block 3
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:   83-block 4
    %%%%%:   83-block 5
        -:   84:
    #####:   85:    if (*p != '+' && *p != '-' && !startsWithNumber)
    %%%%%:   85-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   85-block 7
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:   85-block 8
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:   86:        return false;
    %%%%%:   86-block 9
        -:   87:
    #####:   88:    p++;
        -:   89:
    #####:   90:    bool hasNumber = startsWithNumber;
        -:   91:
    #####:   92:    while (p < in_end && (*p >= '0' && *p <= '9'))
    %%%%%:   92-block 10
    %%%%%:   92-block 12
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   92-block 13
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:   92-block 14
branch  4 never executed
branch  5 never executed (fallthrough)
        -:   93:    {
    #####:   94:        hasNumber = true;
        -:   95:
    #####:   96:        p++;
    %%%%%:   96-block 11
        -:   97:    }
        -:   98:
    #####:   99:    if (hasNumber == false)
    %%%%%:   99-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  100:        return false;
    %%%%%:  100-block 16
        -:  101:
    #####:  102:    bool isFloat = false;
    #####:  103:    bool isHex = false;
    #####:  104:    bool isBinary = false;
        -:  105:
    #####:  106:    if (p < in_end)
    %%%%%:  106-block 17
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  107:    {
    #####:  108:        if (*p == '.')
    %%%%%:  108-block 18
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  109:        {
    #####:  110:            isFloat = true;
    #####:  111:            p++;
        -:  112:
    #####:  113:            while (p < in_end && (*p >= '0' && *p <= '9'))
    %%%%%:  113-block 19
    %%%%%:  113-block 21
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  113-block 22
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  113-block 23
branch  4 never executed
branch  5 never executed
    #####:  114:                p++;
    %%%%%:  114-block 20
        -:  115:        }
    #####:  116:        else if (*p == 'x' || *p == 'X')
    %%%%%:  116-block 24
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  116-block 25
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  117:        {
        -:  118:            // hex formatted integer of the type 0xef80
        -:  119:
    #####:  120:            isHex = true;
        -:  121:
    #####:  122:            p++;
        -:  123:
    #####:  124:            while (p < in_end && ((*p >= '0' && *p <= '9') || (*p >= 'a' && *p <= 'f') || (*p >= 'A' && *p <= 'F')))
    %%%%%:  124-block 26
    %%%%%:  124-block 28
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  124-block 29
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  124-block 30
branch  4 never executed
branch  5 never executed (fallthrough)
    %%%%%:  124-block 31
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  124-block 32
branch  8 never executed
branch  9 never executed (fallthrough)
    %%%%%:  124-block 33
branch 10 never executed (fallthrough)
branch 11 never executed
    %%%%%:  124-block 34
branch 12 never executed
branch 13 never executed (fallthrough)
    #####:  125:                p++;
    %%%%%:  125-block 27
        -:  126:        }
        -:  127:    }
        -:  128:
    #####:  129:    out_begin = in_begin;
    #####:  130:    out_end = p;
    #####:  131:    return true;
    %%%%%:  131-block 35
        -:  132:}
        -:  133:
function _ZL25TokenizeCStylePunctuationPKcS0_RS0_S1_ called 20 returned 100% blocks executed 75%
       20:  134:static bool TokenizeCStylePunctuation(const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end)
        -:  135:{
        -:  136:	(void)in_end;
        -:  137:
       20:  138:	switch (*in_begin)
       20:  138-block 2
branch  0 taken 20
branch  1 taken 0
        -:  139:	{
       20:  140:	case '[':
        -:  141:	case ']':
        -:  142:	case '{':
        -:  143:	case '}':
        -:  144:	case '!':
        -:  145:	case '%':
        -:  146:	case '^':
        -:  147:	case '&':
        -:  148:	case '*':
        -:  149:	case '(':
        -:  150:	case ')':
        -:  151:	case '-':
        -:  152:	case '+':
        -:  153:	case '=':
        -:  154:	case '~':
        -:  155:	case '|':
        -:  156:	case '<':
        -:  157:	case '>':
        -:  158:	case '?':
        -:  159:	case ':':
        -:  160:	case '/':
        -:  161:	case ';':
        -:  162:	case ',':
        -:  163:	case '.':
       20:  164:		out_begin = in_begin;
       20:  165:		out_end = in_begin + 1;
       20:  166:		return true;
       20:  166-block 3
        -:  167:	}
        -:  168:
    #####:  169:	return false;
    %%%%%:  169-block 4
        -:  170:}
        -:  171:
        -:  172:
function _ZL20TokenizeCStyleNumberPKcS0_RS0_S1_ called 25 returned 100% blocks executed 46%
       25:  173:static bool TokenizeCStyleNumber(const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end)
        -:  174:{
       25:  175:    const char* p = in_begin;
        -:  176:
       25:  177:    const bool startsWithNumber = *p >= '0' && *p <= '9';
       25:  177-block 2
branch  0 taken 11 (fallthrough)
branch  1 taken 14
       11:  177-block 3
branch  2 taken 5 (fallthrough)
branch  3 taken 6
        5:  177-block 4
       20:  177-block 5
        -:  178:
       25:  179:    if (*p != '+' && *p != '-' && !startsWithNumber)
       25:  179-block 6
branch  0 taken 25 (fallthrough)
branch  1 taken 0
       25:  179-block 7
branch  2 taken 25 (fallthrough)
branch  3 taken 0
       25:  179-block 8
branch  4 taken 20 (fallthrough)
branch  5 taken 5
       20:  180:        return false;
       20:  180-block 9
        -:  181:
        5:  182:    p++;
        -:  183:
        5:  184:    bool hasNumber = startsWithNumber;
        -:  185:
        9:  186:    while (p < in_end && (*p >= '0' && *p <= '9'))
        5:  186-block 10
        9:  186-block 12
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        8:  186-block 13
branch  2 taken 8 (fallthrough)
branch  3 taken 0
        8:  186-block 14
branch  4 taken 4
branch  5 taken 4 (fallthrough)
        -:  187:    {
        4:  188:        hasNumber = true;
        -:  189:
        4:  190:        p++;
        4:  190-block 11
        -:  191:    }
        -:  192:
        5:  193:    if (hasNumber == false)
        5:  193-block 15
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  194:        return false;
    %%%%%:  194-block 16
        -:  195:
        5:  196:    bool isFloat = false;
        5:  197:    bool isHex = false;
        5:  198:    bool isBinary = false;
        -:  199:
        5:  200:    if (p < in_end)
        5:  200-block 17
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        -:  201:    {
        4:  202:        if (*p == '.')
        4:  202-block 18
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:  203:        {
    #####:  204:            isFloat = true;
        -:  205:
    #####:  206:            p++;
        -:  207:
    #####:  208:            while (p < in_end && (*p >= '0' && *p <= '9'))
    %%%%%:  208-block 19
    %%%%%:  208-block 21
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  208-block 22
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  208-block 23
branch  4 never executed
branch  5 never executed
    #####:  209:                p++;
    %%%%%:  209-block 20
        -:  210:        }
       4*:  211:        else if (*p == 'x' || *p == 'X')
        4:  211-block 24
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%:  211-block 25
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  212:        {
        -:  213:            // hex formatted integer of the type 0xef80
        -:  214:
        4:  215:            isHex = true;
        -:  216:
        4:  217:            p++;
        -:  218:
      28*:  219:            while (p < in_end && ((*p >= '0' && *p <= '9') || (*p >= 'a' && *p <= 'f') || (*p >= 'A' && *p <= 'F')))
        4:  219-block 26
       28:  219-block 28
branch  0 taken 24 (fallthrough)
branch  1 taken 4
       24:  219-block 29
branch  2 taken 24 (fallthrough)
branch  3 taken 0
       24:  219-block 30
branch  4 taken 24
branch  5 taken 0 (fallthrough)
    %%%%%:  219-block 31
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  219-block 32
branch  8 never executed
branch  9 never executed (fallthrough)
    %%%%%:  219-block 33
branch 10 never executed (fallthrough)
branch 11 never executed
    %%%%%:  219-block 34
branch 12 never executed
branch 13 never executed (fallthrough)
       24:  220:                p++;
       24:  220-block 27
        -:  221:        }
    #####:  222:        else if (*p == 'b' || *p == 'B')
    %%%%%:  222-block 36
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  222-block 37
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  223:        {
        -:  224:            // binary formatted integer of the type 0b01011101
        -:  225:
    #####:  226:            isBinary = true;
        -:  227:
    #####:  228:            p++;
        -:  229:
    #####:  230:            while (p < in_end && (*p >= '0' && *p <= '1'))
    %%%%%:  230-block 38
    %%%%%:  230-block 40
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  230-block 41
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  230-block 42
branch  4 never executed
branch  5 never executed (fallthrough)
    #####:  231:                p++;
    %%%%%:  231-block 39
        -:  232:        }
        -:  233:    }
        -:  234:
        5:  235:    if (isHex == false && isBinary == false)
        5:  235-block 44
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:  235-block 45
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -:  236:    {
        -:  237:        // floating point exponent
       1*:  238:        if (p < in_end && (*p == 'e' || *p == 'E'))
        1:  238-block 46
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  238-block 47
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  238-block 48
branch  4 never executed (fallthrough)
branch  5 never executed
        -:  239:        {
    #####:  240:            isFloat = true;
        -:  241:
    #####:  242:            p++;
        -:  243:
    #####:  244:            if (p < in_end && (*p == '+' || *p == '-'))
    %%%%%:  244-block 49
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  244-block 50
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  244-block 51
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:  245:                p++;
    %%%%%:  245-block 52
        -:  246:
    #####:  247:            bool hasDigits = false;
        -:  248:
    #####:  249:            while (p < in_end && (*p >= '0' && *p <= '9'))
    %%%%%:  249-block 53
    %%%%%:  249-block 55
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  249-block 56
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  249-block 57
branch  4 never executed
branch  5 never executed (fallthrough)
        -:  250:            {
    #####:  251:                hasDigits = true;
        -:  252:
    #####:  253:                p++;
    %%%%%:  253-block 54
        -:  254:            }
        -:  255:
    #####:  256:            if (hasDigits == false)
    %%%%%:  256-block 58
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  257:                return false;
    %%%%%:  257-block 59
        -:  258:        }
        -:  259:
        -:  260:        // single precision floating point type
       1*:  261:        if (p < in_end && *p == 'f')
        1:  261-block 60
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  261-block 61
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  262:            p++;
    %%%%%:  262-block 62
        -:  263:    }
        -:  264:
        5:  265:    if (isFloat == false)
        5:  265-block 63
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        -:  266:    {
        -:  267:        // integer size type
       5*:  268:        while (p < in_end && (*p == 'u' || *p == 'U' || *p == 'l' || *p == 'L'))
        5:  268-block 64
        5:  268-block 66
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%:  268-block 67
branch  2 never executed
branch  3 never executed (fallthrough)
    %%%%%:  268-block 68
branch  4 never executed
branch  5 never executed (fallthrough)
    %%%%%:  268-block 69
branch  6 never executed
branch  7 never executed (fallthrough)
    %%%%%:  268-block 70
branch  8 never executed
branch  9 never executed (fallthrough)
    #####:  269:            p++;
    %%%%%:  269-block 65
        -:  270:    }
        -:  271:
        5:  272:    out_begin = in_begin;
        5:  273:    out_end = p;
        5:  274:    return true;
        5:  274-block 71
        -:  275:}
        -:  276:
function _ZL27TokenizeX86StylePunctuationPKcS0_RS0_S1_ called 0 returned 0% blocks executed 0%
    #####:  277:static bool TokenizeX86StylePunctuation(const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end)
        -:  278:{
        -:  279:    (void)in_end;
        -:  280:
    #####:  281:    switch (*in_begin)
    %%%%%:  281-block 2
branch  0 never executed
branch  1 never executed
        -:  282:    {
    #####:  283:        case '[':
        -:  284:        case ']':
        -:  285:        case '*':
        -:  286:        case '(':  // at&t syntax
        -:  287:        case ')':
        -:  288:        case '-':
        -:  289:        case '+':
        -:  290:        case ':':
    #####:  291:            out_begin = in_begin;
    #####:  292:            out_end = in_begin + 1;
    #####:  293:            return true;
    %%%%%:  293-block 3
        -:  294:    }
        -:  295:
    #####:  296:    return false;
    %%%%%:  296-block 4
        -:  297:}
        -:  298:
function _ZL22TokenizeLuaStyleStringPKcS0_RS0_S1_ called 0 returned 0% blocks executed 0%
    #####:  299:static bool TokenizeLuaStyleString(const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end)
        -:  300:{
    #####:  301:	const char* p = in_begin;
        -:  302:
    #####:  303:	bool is_single_quote = false;
    #####:  304:	bool is_double_quotes = false;
    #####:  305:	bool is_double_square_brackets = false;
        -:  306:
    #####:  307:	switch (*p)
    %%%%%:  307-block 2
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  308:	{
    #####:  309:	case '\'':
    #####:  310:		is_single_quote = true;
    #####:  311:		break;
    %%%%%:  311-block 3
    #####:  312:	case '"':
    #####:  313:		is_double_quotes = true;
    #####:  314:		break;
    %%%%%:  314-block 4
    #####:  315:	case '[':
    #####:  316:		p++;
    #####:  317:		if (p < in_end && *(p) == '[')
    %%%%%:  317-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  317-block 6
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  318:			is_double_square_brackets = true;
    %%%%%:  318-block 7
    #####:  319:		break;
    %%%%%:  319-block 8
        -:  320:	}
        -:  321:
    #####:  322:	if (is_single_quote || is_double_quotes || is_double_square_brackets)
    %%%%%:  322-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  322-block 10
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  322-block 11
branch  4 never executed (fallthrough)
branch  5 never executed
        -:  323:	{
    #####:  324:		p++;
        -:  325:
    #####:  326:		while (p < in_end)
    %%%%%:  326-block 12
    %%%%%:  326-block 31
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  327:		{
        -:  328:			// handle end of string
    #####:  329:			if ((is_single_quote && *p == '\'') || (is_double_quotes && *p == '"') || (is_double_square_brackets && *p == ']' && p + 1 < in_end && *(p + 1) == ']'))
    %%%%%:  329-block 13
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  329-block 14
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  329-block 15
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  329-block 16
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  329-block 17
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%:  329-block 18
branch 10 never executed (fallthrough)
branch 11 never executed
    %%%%%:  329-block 19
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%:  329-block 20
branch 14 never executed (fallthrough)
branch 15 never executed
        -:  330:			{
    #####:  331:				out_begin = in_begin;
        -:  332:
    #####:  333:				if (is_double_square_brackets)
    %%%%%:  333-block 21
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  334:					out_end = p + 2;
    %%%%%:  334-block 22
        -:  335:				else
    #####:  336:					out_end = p + 1;
    %%%%%:  336-block 23
        -:  337:
    #####:  338:				return true;
    %%%%%:  338-block 24
        -:  339:			}
        -:  340:
        -:  341:			// handle escape character for "
    #####:  342:			if (*p == '\\' && p + 1 < in_end && (is_single_quote || is_double_quotes))
    %%%%%:  342-block 25
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  342-block 26
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  342-block 27
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  342-block 28
branch  6 never executed (fallthrough)
branch  7 never executed
    #####:  343:				p++;
    %%%%%:  343-block 29
        -:  344:
    #####:  345:			p++;
    %%%%%:  345-block 30
        -:  346:		}
        -:  347:	}
        -:  348:
    #####:  349:	return false;
    %%%%%:  349-block 32
        -:  350:}
        -:  351:
function _ZL26TokenizeLuaStyleIdentifierPKcS0_RS0_S1_ called 0 returned 0% blocks executed 0%
    #####:  352:static bool TokenizeLuaStyleIdentifier(const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end)
        -:  353:{
    #####:  354:	const char* p = in_begin;
        -:  355:
    #####:  356:	if ((*p >= 'a' && *p <= 'z') || (*p >= 'A' && *p <= 'Z') || *p == '_')
    %%%%%:  356-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  356-block 3
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  356-block 4
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  356-block 5
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  356-block 6
branch  8 never executed (fallthrough)
branch  9 never executed
        -:  357:	{
    #####:  358:		p++;
        -:  359:
    #####:  360:		while ((p < in_end) && ((*p >= 'a' && *p <= 'z') || (*p >= 'A' && *p <= 'Z') || (*p >= '0' && *p <= '9') || *p == '_'))
    %%%%%:  360-block 7
    %%%%%:  360-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  360-block 10
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  360-block 11
branch  4 never executed
branch  5 never executed (fallthrough)
    %%%%%:  360-block 12
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  360-block 13
branch  8 never executed
branch  9 never executed (fallthrough)
    %%%%%:  360-block 14
branch 10 never executed (fallthrough)
branch 11 never executed
    %%%%%:  360-block 15
branch 12 never executed
branch 13 never executed (fallthrough)
    %%%%%:  360-block 16
branch 14 never executed
branch 15 never executed (fallthrough)
    #####:  361:			p++;
    %%%%%:  361-block 8
        -:  362:
    #####:  363:		out_begin = in_begin;
    #####:  364:		out_end = p;
    #####:  365:		return true;
    %%%%%:  365-block 17
        -:  366:	}
        -:  367:
    #####:  368:	return false;
    %%%%%:  368-block 18
        -:  369:}
        -:  370:
function _ZL22TokenizeLuaStyleNumberPKcS0_RS0_S1_ called 0 returned 0% blocks executed 0%
    #####:  371:static bool TokenizeLuaStyleNumber(const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end)
        -:  372:{
    #####:  373:	const char* p = in_begin;
        -:  374:
    #####:  375:	const bool startsWithNumber = *p >= '0' && *p <= '9';
    %%%%%:  375-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  375-block 3
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  375-block 4
    %%%%%:  375-block 5
        -:  376:
    #####:  377:	if (*p != '+' && *p != '-' && !startsWithNumber)
    %%%%%:  377-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  377-block 7
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  377-block 8
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:  378:		return false;
    %%%%%:  378-block 9
        -:  379:
    #####:  380:	p++;
        -:  381:
    #####:  382:	bool hasNumber = startsWithNumber;
        -:  383:
    #####:  384:	while (p < in_end && (*p >= '0' && *p <= '9'))
    %%%%%:  384-block 10
    %%%%%:  384-block 12
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  384-block 13
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  384-block 14
branch  4 never executed
branch  5 never executed (fallthrough)
        -:  385:	{
    #####:  386:		hasNumber = true;
        -:  387:
    #####:  388:		p++;
    %%%%%:  388-block 11
        -:  389:	}
        -:  390:
    #####:  391:	if (hasNumber == false)
    %%%%%:  391-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  392:		return false;
    %%%%%:  392-block 16
        -:  393:
    #####:  394:	if (p < in_end)
    %%%%%:  394-block 17
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  395:	{
    #####:  396:		if (*p == '.')
    %%%%%:  396-block 18
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  397:		{
    #####:  398:			p++;
        -:  399:
    #####:  400:			while (p < in_end && (*p >= '0' && *p <= '9'))
    %%%%%:  400-block 19
    %%%%%:  400-block 21
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  400-block 22
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  400-block 23
branch  4 never executed
branch  5 never executed (fallthrough)
    #####:  401:				p++;
    %%%%%:  401-block 20
        -:  402:		}
        -:  403:
        -:  404:		// floating point exponent
    #####:  405:		if (p < in_end && (*p == 'e' || *p == 'E'))
    %%%%%:  405-block 24
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  405-block 25
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  405-block 26
branch  4 never executed (fallthrough)
branch  5 never executed
        -:  406:		{
    #####:  407:			p++;
        -:  408:
    #####:  409:			if (p < in_end && (*p == '+' || *p == '-'))
    %%%%%:  409-block 27
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  409-block 28
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  409-block 29
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:  410:				p++;
    %%%%%:  410-block 30
        -:  411:
    #####:  412:			bool hasDigits = false;
        -:  413:
    #####:  414:			while (p < in_end && (*p >= '0' && *p <= '9'))
    %%%%%:  414-block 31
    %%%%%:  414-block 33
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  414-block 34
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  414-block 35
branch  4 never executed
branch  5 never executed (fallthrough)
        -:  415:			{
    #####:  416:				hasDigits = true;
        -:  417:
    #####:  418:				p++;
    %%%%%:  418-block 32
        -:  419:			}
        -:  420:
    #####:  421:			if (hasDigits == false)
    %%%%%:  421-block 36
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  422:				return false;
    %%%%%:  422-block 37
        -:  423:		}
        -:  424:	}
        -:  425:
    #####:  426:	out_begin = in_begin;
    #####:  427:	out_end = p;
    #####:  428:	return true;
    %%%%%:  428-block 38
        -:  429:}
        -:  430:
function _ZL27TokenizeLuaStylePunctuationPKcS0_RS0_S1_ called 0 returned 0% blocks executed 0%
    #####:  431:static bool TokenizeLuaStylePunctuation(const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end)
        -:  432:{
        -:  433:	(void)in_end;
        -:  434:
    #####:  435:	switch (*in_begin)
    %%%%%:  435-block 2
branch  0 never executed
branch  1 never executed
        -:  436:	{
    #####:  437:	case '[':
        -:  438:	case ']':
        -:  439:	case '{':
        -:  440:	case '}':
        -:  441:	case '!':
        -:  442:	case '%':
        -:  443:	case '#':
        -:  444:	case '^':
        -:  445:	case '&':
        -:  446:	case '*':
        -:  447:	case '(':
        -:  448:	case ')':
        -:  449:	case '-':
        -:  450:	case '+':
        -:  451:	case '=':
        -:  452:	case '~':
        -:  453:	case '|':
        -:  454:	case '<':
        -:  455:	case '>':
        -:  456:	case '?':
        -:  457:	case ':':
        -:  458:	case '/':
        -:  459:	case ';':
        -:  460:	case ',':
        -:  461:	case '.':
    #####:  462:		out_begin = in_begin;
    #####:  463:		out_end = in_begin + 1;
    #####:  464:		return true;
    %%%%%:  464-block 3
        -:  465:	}
        -:  466:
    #####:  467:	return false;
    %%%%%:  467-block 4
        -:  468:}
        -:  469:
function _ZN10TextEditor18LanguageDefinition9Asmx86_64Ev called 1 returned 100% blocks executed 64%
        1:  470:const TextEditor::LanguageDefinition& TextEditor::LanguageDefinition::Asmx86_64()
        -:  471:{
        -:  472:    static bool inited = false;
        1:  473:    static LanguageDefinition langDef;
        1:  473-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  473-block 3
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:  473-block 5
call    5 returned 1
call    6 returned 1
call    7 returned 1
        1:  474:    if (!inited)
        1:  474-block 8
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  475:    {
        -:  476:        static const char* const x86Keywords[] =  {"aaa", "aad", "aam", "aas", "fabs", "adc", "adcx", "add", "addpd", "addps", "addsd", "addss", "addsubpd", "addsubps", "fadd", "fiadd", "adox", "aesdeclast", "aesdec", "aesenclast", "aesenc", "aesimc", "aeskeygenassist", "and", "andn", "andnpd", "andnps", "andpd", "andps", "arpl", "bextr", "blcfill", "blci", "blcic", "blcmsk", "blcs", "blendpd", "blendps", "blendvpd", "blendvps", "blsfill", "blsi", "blsic", "blsmsk", "blsr", "bndcl", "bndcn", "bndcu", "bndldx", "bndmk", "bndmov", "bndstx", "bound", "bsf", "bsr", "bswap", "bt", "btc", "btr", "bts", "bzhi", "call", "cbw", "cdq", "cdqe", "fchs", "clac", "clc", "cld", "cldemote", "clflush", "clflushopt", "clgi", "cli", "clrssbsy", "clts", "clwb", "clzero", "cmc", "cmova", "cmovae", "cmovb", "cmovbe", "fcmovbe", "fcmovb", "cmove", "fcmove", "cmovg", "cmovge", "cmovl", "cmovle", "fcmovnbe", "fcmovnb", "cmovne", "fcmovne", "cmovno", "cmovnp", "fcmovnu", "fcmovnp", "cmovns", "cmovo", "cmovp", "fcmovu", "cmovs", "cmp", "cmppd", "cmpps", "cmpsb", "cmpsd", "cmpsq", "cmpss", "cmpsw", "cmpxchg16b", "cmpxchg", "cmpxchg8b", "comisd", "comiss", "fcomp", "fcompi", "fcomi", "fcom", "fcos", "cpuid", "cqo", "crc32", "cvtdq2pd", "cvtdq2ps", "cvtpd2dq", "cvtpd2ps", "cvtps2dq", "cvtps2pd", "cvtsd2si", "cvtsd2ss", "cvtsi2sd", "cvtsi2ss", "cvtss2sd", "cvtss2si", "cvttpd2dq", "cvttps2dq", "cvttsd2si", "cvttss2si", "cwd", "cwde", "daa", "das", "data16", "dec", "div", "divpd", "divps", "fdivr", "fidivr", "fdivrp", "divsd", "divss", "fdiv", "fidiv", "fdivp", "dppd", "dpps", "encls", "enclu", "enclv", "endbr32", "endbr64", "enter", "extractps", "extrq", "f2xm1", "lcall", "ljmp", "jmp", "fbld", "fbstp", "fcompp", "fdecstp", "fdisi8087_nop", "femms", "feni8087_nop", "ffree", "ffreep", "ficom", "ficomp", "fincstp", "fldcw", "fldenv", "fldl2e", "fldl2t", "fldlg2", "fldln2", "fldpi", "fnclex", "fninit", "fnop", "fnstcw", "fnstsw", "fpatan", "fstpnce", "fprem", "fprem1", "fptan", "frndint", "frstor", "fnsave", "fscale", "fsetpm", "fsincos", "fnstenv", "fxam", "fxrstor", "fxrstor64", "fxsave", "fxsave64", "fxtract", "fyl2x", "fyl2xp1", "getsec", "gf2p8affineinvqb", "gf2p8affineqb", "gf2p8mulb", "haddpd", "haddps", "hlt", "hsubpd", "hsubps", "idiv", "fild", "imul", "in", "inc", "incsspd", "incsspq", "insb", "insertps", "insertq", "insd", "insw", "int", "int1", "int3", "into", "invd", "invept", "invlpg", "invlpga", "invpcid", "invvpid", "iret", "iretd", "iretq", "fisttp", "fist", "fistp", "jae", "ja", "jbe", "jb", "jcxz", "jecxz", "je", "jge", "jg", "jle", "jl", "jne", "jno", "jnp", "jns", "jo", "jp", "jrcxz", "js", "kaddb", "kaddd", "kaddq", "kaddw", "kandb", "kandd", "kandnb", "kandnd", "kandnq", "kandnw", "kandq", "kandw", "kmovb", "kmovd", "kmovq", "kmovw", "knotb", "knotd", "knotq", "knotw", "korb", "kord", "korq", "kortestb", "kortestd", "kortestq", "kortestw", "korw", "kshiftlb", "kshiftld", "kshiftlq", "kshiftlw", "kshiftrb", "kshiftrd", "kshiftrq", "kshiftrw", "ktestb", "ktestd", "ktestq", "ktestw", "kunpckbw", "kunpckdq", "kunpckwd", "kxnorb", "kxnord", "kxnorq", "kxnorw", "kxorb", "kxord", "kxorq", "kxorw", "lahf", "lar", "lddqu", "ldmxcsr", "lds", "fldz", "fld1", "fld", "lea", "leave", "les", "lfence", "lfs", "lgdt", "lgs", "lidt", "lldt", "llwpcb", "lmsw", "lock", "lodsb", "lodsd", "lodsq", "lodsw", "loop", "loope", "loopne", "retf", "retfq", "lsl", "lss", "ltr", "lwpins", "lwpval", "lzcnt", "maskmovdqu", "maxpd", "maxps", "maxsd", "maxss", "mfence", "minpd", "minps", "minsd", "minss", "cvtpd2pi", "cvtpi2pd", "cvtpi2ps", "cvtps2pi", "cvttpd2pi", "cvttps2pi", "emms", "maskmovq", "movd", "movq", "movdq2q", "movntq", "movq2dq", "pabsb", "pabsd", "pabsw", "packssdw", "packsswb", "packuswb", "paddb", "paddd", "paddq", "paddsb", "paddsw", "paddusb", "paddusw", "paddw", "palignr", "pandn", "pand", "pavgb", "pavgw", "pcmpeqb", "pcmpeqd", "pcmpeqw", "pcmpgtb", "pcmpgtd", "pcmpgtw", "pextrw", "phaddd", "phaddsw", "phaddw", "phsubd", "phsubsw", "phsubw", "pinsrw", "pmaddubsw", "pmaddwd", "pmaxsw", "pmaxub", "pminsw", "pminub", "pmovmskb", "pmulhrsw", "pmulhuw", "pmulhw", "pmullw", "pmuludq", "por", "psadbw", "pshufb", "pshufw", "psignb", "psignd", "psignw", "pslld", "psllq", "psllw", "psrad", "psraw", "psrld", "psrlq", "psrlw", "psubb", "psubd", "psubq", "psubsb", "psubsw", "psubusb", "psubusw", "psubw", "punpckhbw", "punpckhdq", "punpckhwd", "punpcklbw", "punpckldq", "punpcklwd", "pxor", "monitorx", "monitor", "montmul", "mov", "movabs", "movapd", "movaps", "movbe", "movddup", "movdir64b", "movdiri", "movdqa", "movdqu", "movhlps", "movhpd", "movhps", "movlhps", "movlpd", "movlps", "movmskpd", "movmskps", "movntdqa", "movntdq", "movnti", "movntpd", "movntps", "movntsd", "movntss", "movsb", "movsd", "movshdup", "movsldup", "movsq", "movss", "movsw", "movsx", "movsxd", "movupd", "movups", "movzx", "mpsadbw", "mul", "mulpd", "mulps", "mulsd", "mulss", "mulx", "fmul", "fimul", "fmulp", "mwaitx", "mwait", "neg", "nop", "not", "or", "orpd", "orps", "out", "outsb", "outsd", "outsw", "packusdw", "pause", "pavgusb", "pblendvb", "pblendw", "pclmulqdq", "pcmpeqq", "pcmpestri", "pcmpestrm", "pcmpgtq", "pcmpistri", "pcmpistrm", "pconfig", "pdep", "pext", "pextrb", "pextrd", "pextrq", "pf2id", "pf2iw", "pfacc", "pfadd", "pfcmpeq", "pfcmpge", "pfcmpgt", "pfmax", "pfmin", "pfmul", "pfnacc", "pfpnacc", "pfrcpit1", "pfrcpit2", "pfrcp", "pfrsqit1", "pfrsqrt", "pfsubr", "pfsub", "phminposuw", "pi2fd", "pi2fw", "pinsrb", "pinsrd", "pinsrq", "pmaxsb", "pmaxsd", "pmaxud", "pmaxuw", "pminsb", "pminsd", "pminud", "pminuw", "pmovsxbd", "pmovsxbq", "pmovsxbw", "pmovsxdq", "pmovsxwd", "pmovsxwq", "pmovzxbd", "pmovzxbq", "pmovzxbw", "pmovzxdq", "pmovzxwd", "pmovzxwq", "pmuldq", "pmulhrw", "pmulld", "pop", "popaw", "popal", "popcnt", "popf", "popfd", "popfq", "prefetch", "prefetchnta", "prefetcht0", "prefetcht1", "prefetcht2", "prefetchw", "prefetchwt1", "pshufd", "pshufhw", "pshuflw", "pslldq", "psrldq", "pswapd", "ptest", "ptwrite", "punpckhqdq", "punpcklqdq", "push", "pushaw", "pushal", "pushf", "pushfd", "pushfq", "rcl", "rcpps", "rcpss", "rcr", "rdfsbase", "rdgsbase", "rdmsr", "rdpid", "rdpkru", "rdpmc", "rdrand", "rdseed", "rdsspd", "rdsspq", "rdtsc", "rdtscp", "repne", "rep", "ret", "rex64", "rol", "ror", "rorx", "roundpd", "roundps", "roundsd", "roundss", "rsm", "rsqrtps", "rsqrtss", "rstorssp", "sahf", "sal", "salc", "sar", "sarx", "saveprevssp", "sbb", "scasb", "scasd", "scasq", "scasw", "setae", "seta", "setbe", "setb", "sete", "setge", "setg", "setle", "setl", "setne", "setno", "setnp", "setns", "seto", "setp", "setssbsy", "sets", "sfence", "sgdt", "sha1msg1", "sha1msg2", "sha1nexte", "sha1rnds4", "sha256msg1", "sha256msg2", "sha256rnds2", "shl", "shld", "shlx", "shr", "shrd", "shrx", "shufpd", "shufps", "sidt", "fsin", "skinit", "sldt", "slwpcb", "smsw", "sqrtpd", "sqrtps", "sqrtsd", "sqrtss", "fsqrt", "stac", "stc", "std", "stgi", "sti", "stmxcsr", "stosb", "stosd", "stosq", "stosw", "str", "fst", "fstp", "sub", "subpd", "subps", "fsubr", "fisubr", "fsubrp", "subsd", "subss", "fsub", "fisub", "fsubp", "swapgs", "syscall", "sysenter", "sysexit", "sysexitq", "sysret", "sysretq", "t1mskc", "test", "tpause", "ftst", "tzcnt", "tzmsk", "ucomisd", "ucomiss", "fucompi", "fucomi", "fucompp", "fucomp", "fucom", "ud0", "ud1", "ud2", "umonitor", "umwait", "unpckhpd", "unpckhps", "unpcklpd", "unpcklps", "v4fmaddps", "v4fmaddss", "v4fnmaddps", "v4fnmaddss", "vaddpd", "vaddps", "vaddsd", "vaddss", "vaddsubpd", "vaddsubps", "vaesdeclast", "vaesdec", "vaesenclast", "vaesenc", "vaesimc", "vaeskeygenassist", "valignd", "valignq", "vandnpd", "vandnps", "vandpd", "vandps", "vblendmpd", "vblendmps", "vblendpd", "vblendps", "vblendvpd", "vblendvps", "vbroadcastf128", "vbroadcastf32x2", "vbroadcastf32x4", "vbroadcastf32x8", "vbroadcastf64x2", "vbroadcastf64x4", "vbroadcasti128", "vbroadcasti32x2", "vbroadcasti32x4", "vbroadcasti32x8", "vbroadcasti64x2", "vbroadcasti64x4", "vbroadcastsd", "vbroadcastss", "vcmp", "vcmppd", "vcmpps", "vcmpsd", "vcmpss", "vcomisd", "vcomiss", "vcompresspd", "vcompressps", "vcvtdq2pd", "vcvtdq2ps", "vcvtpd2dq", "vcvtpd2ps", "vcvtpd2qq", "vcvtpd2udq", "vcvtpd2uqq", "vcvtph2ps", "vcvtps2dq", "vcvtps2pd", "vcvtps2ph", "vcvtps2qq", "vcvtps2udq", "vcvtps2uqq", "vcvtqq2pd", "vcvtqq2ps", "vcvtsd2si", "vcvtsd2ss", "vcvtsd2usi", "vcvtsi2sd", "vcvtsi2ss", "vcvtss2sd", "vcvtss2si", "vcvtss2usi", "vcvttpd2dq", "vcvttpd2qq", "vcvttpd2udq", "vcvttpd2uqq", "vcvttps2dq", "vcvttps2qq", "vcvttps2udq", "vcvttps2uqq", "vcvttsd2si", "vcvttsd2usi", "vcvttss2si", "vcvttss2usi", "vcvtudq2pd", "vcvtudq2ps", "vcvtuqq2pd", "vcvtuqq2ps", "vcvtusi2sd", "vcvtusi2ss", "vdbpsadbw", "vdivpd", "vdivps", "vdivsd", "vdivss", "vdppd", "vdpps", "verr", "verw", "vexp2pd", "vexp2ps", "vexpandpd", "vexpandps", "vextractf128", "vextractf32x4", "vextractf32x8", "vextractf64x2", "vextractf64x4", "vextracti128", "vextracti32x4", "vextracti32x8", "vextracti64x2", "vextracti64x4", "vextractps", "vfixupimmpd", "vfixupimmps", "vfixupimmsd", "vfixupimmss", "vfmadd132pd", "vfmadd132ps", "vfmadd132sd", "vfmadd132ss", "vfmadd213pd", "vfmadd213ps", "vfmadd213sd", "vfmadd213ss", "vfmadd231pd", "vfmadd231ps", "vfmadd231sd", "vfmadd231ss", "vfmaddpd", "vfmaddps", "vfmaddsd", "vfmaddss", "vfmaddsub132pd", "vfmaddsub132ps", "vfmaddsub213pd", "vfmaddsub213ps", "vfmaddsub231pd", "vfmaddsub231ps", "vfmaddsubpd", "vfmaddsubps", "vfmsub132pd", "vfmsub132ps", "vfmsub132sd", "vfmsub132ss", "vfmsub213pd", "vfmsub213ps", "vfmsub213sd", "vfmsub213ss", "vfmsub231pd", "vfmsub231ps", "vfmsub231sd", "vfmsub231ss", "vfmsubadd132pd", "vfmsubadd132ps", "vfmsubadd213pd", "vfmsubadd213ps", "vfmsubadd231pd", "vfmsubadd231ps", "vfmsubaddpd", "vfmsubaddps", "vfmsubpd", "vfmsubps", "vfmsubsd", "vfmsubss", "vfnmadd132pd", "vfnmadd132ps", "vfnmadd132sd", "vfnmadd132ss", "vfnmadd213pd", "vfnmadd213ps", "vfnmadd213sd", "vfnmadd213ss", "vfnmadd231pd", "vfnmadd231ps", "vfnmadd231sd", "vfnmadd231ss", "vfnmaddpd", "vfnmaddps", "vfnmaddsd", "vfnmaddss", "vfnmsub132pd", "vfnmsub132ps", "vfnmsub132sd", "vfnmsub132ss", "vfnmsub213pd", "vfnmsub213ps", "vfnmsub213sd", "vfnmsub213ss", "vfnmsub231pd", "vfnmsub231ps", "vfnmsub231sd", "vfnmsub231ss", "vfnmsubpd", "vfnmsubps", "vfnmsubsd", "vfnmsubss", "vfpclasspd", "vfpclassps", "vfpclasssd", "vfpclassss", "vfrczpd", "vfrczps", "vfrczsd", "vfrczss", "vgatherdpd", "vgatherdps", "vgatherpf0dpd", "vgatherpf0dps", "vgatherpf0qpd", "vgatherpf0qps", "vgatherpf1dpd", "vgatherpf1dps", "vgatherpf1qpd", "vgatherpf1qps", "vgatherqpd", "vgatherqps", "vgetexppd", "vgetexpps", "vgetexpsd", "vgetexpss", "vgetmantpd", "vgetmantps", "vgetmantsd", "vgetmantss", "vgf2p8affineinvqb", "vgf2p8affineqb", "vgf2p8mulb", "vhaddpd", "vhaddps", "vhsubpd", "vhsubps", "vinsertf128", "vinsertf32x4", "vinsertf32x8", "vinsertf64x2", "vinsertf64x4", "vinserti128", "vinserti32x4", "vinserti32x8", "vinserti64x2", "vinserti64x4", "vinsertps", "vlddqu", "vldmxcsr", "vmaskmovdqu", "vmaskmovpd", "vmaskmovps", "vmaxpd", "vmaxps", "vmaxsd", "vmaxss", "vmcall", "vmclear", "vmfunc", "vminpd", "vminps", "vminsd", "vminss", "vmlaunch", "vmload", "vmmcall", "vmovq", "vmovapd", "vmovaps", "vmovddup", "vmovd", "vmovdqa32", "vmovdqa64", "vmovdqa", "vmovdqu16", "vmovdqu32", "vmovdqu64", "vmovdqu8", "vmovdqu", "vmovhlps", "vmovhpd", "vmovhps", "vmovlhps", "vmovlpd", "vmovlps", "vmovmskpd", "vmovmskps", "vmovntdqa", "vmovntdq", "vmovntpd", "vmovntps", "vmovsd", "vmovshdup", "vmovsldup", "vmovss", "vmovupd", "vmovups", "vmpsadbw", "vmptrld", "vmptrst", "vmread", "vmresume", "vmrun", "vmsave", "vmulpd", "vmulps", "vmulsd", "vmulss", "vmwrite", "vmxoff", "vmxon", "vorpd", "vorps", "vp4dpwssds", "vp4dpwssd", "vpabsb", "vpabsd", "vpabsq", "vpabsw", "vpackssdw", "vpacksswb", "vpackusdw", "vpackuswb", "vpaddb", "vpaddd", "vpaddq", "vpaddsb", "vpaddsw", "vpaddusb", "vpaddusw", "vpaddw", "vpalignr", "vpandd", "vpandnd", "vpandnq", "vpandn", "vpandq", "vpand", "vpavgb", "vpavgw", "vpblendd", "vpblendmb", "vpblendmd", "vpblendmq", "vpblendmw", "vpblendvb", "vpblendw", "vpbroadcastb", "vpbroadcastd", "vpbroadcastmb2q", "vpbroadcastmw2d", "vpbroadcastq", "vpbroadcastw", "vpclmulqdq", "vpcmov", "vpcmp", "vpcmpb", "vpcmpd", "vpcmpeqb", "vpcmpeqd", "vpcmpeqq", "vpcmpeqw", "vpcmpestri", "vpcmpestrm", "vpcmpgtb", "vpcmpgtd", "vpcmpgtq", "vpcmpgtw", "vpcmpistri", "vpcmpistrm", "vpcmpq", "vpcmpub", "vpcmpud", "vpcmpuq", "vpcmpuw", "vpcmpw", "vpcom", "vpcomb", "vpcomd", "vpcompressb", "vpcompressd", "vpcompressq", "vpcompressw", "vpcomq", "vpcomub", "vpcomud", "vpcomuq", "vpcomuw", "vpcomw", "vpconflictd", "vpconflictq", "vpdpbusds", "vpdpbusd", "vpdpwssds", "vpdpwssd", "vperm2f128", "vperm2i128", "vpermb", "vpermd", "vpermi2b", "vpermi2d", "vpermi2pd", "vpermi2ps", "vpermi2q", "vpermi2w", "vpermil2pd", "vpermilpd", "vpermil2ps", "vpermilps", "vpermpd", "vpermps", "vpermq", "vpermt2b", "vpermt2d", "vpermt2pd", "vpermt2ps", "vpermt2q", "vpermt2w", "vpermw", "vpexpandb", "vpexpandd", "vpexpandq", "vpexpandw", "vpextrb", "vpextrd", "vpextrq", "vpextrw", "vpgatherdd", "vpgatherdq", "vpgatherqd", "vpgatherqq", "vphaddbd", "vphaddbq", "vphaddbw", "vphadddq", "vphaddd", "vphaddsw", "vphaddubd", "vphaddubq", "vphaddubw", "vphaddudq", "vphadduwd", "vphadduwq", "vphaddwd", "vphaddwq", "vphaddw", "vphminposuw", "vphsubbw", "vphsubdq", "vphsubd", "vphsubsw", "vphsubwd", "vphsubw", "vpinsrb", "vpinsrd", "vpinsrq", "vpinsrw", "vplzcntd", "vplzcntq", "vpmacsdd", "vpmacsdqh", "vpmacsdql", "vpmacssdd", "vpmacssdqh", "vpmacssdql", "vpmacsswd", "vpmacssww", "vpmacswd", "vpmacsww", "vpmadcsswd", "vpmadcswd", "vpmadd52huq", "vpmadd52luq", "vpmaddubsw", "vpmaddwd", "vpmaskmovd", "vpmaskmovq", "vpmaxsb", "vpmaxsd", "vpmaxsq", "vpmaxsw", "vpmaxub", "vpmaxud", "vpmaxuq", "vpmaxuw", "vpminsb", "vpminsd", "vpminsq", "vpminsw", "vpminub", "vpminud", "vpminuq", "vpminuw", "vpmovb2m", "vpmovd2m", "vpmovdb", "vpmovdw", "vpmovm2b", "vpmovm2d", "vpmovm2q", "vpmovm2w", "vpmovmskb", "vpmovq2m", "vpmovqb", "vpmovqd", "vpmovqw", "vpmovsdb", "vpmovsdw", "vpmovsqb", "vpmovsqd", "vpmovsqw", "vpmovswb", "vpmovsxbd", "vpmovsxbq", "vpmovsxbw", "vpmovsxdq", "vpmovsxwd", "vpmovsxwq", "vpmovusdb", "vpmovusdw", "vpmovusqb", "vpmovusqd", "vpmovusqw", "vpmovuswb", "vpmovw2m", "vpmovwb", "vpmovzxbd", "vpmovzxbq", "vpmovzxbw", "vpmovzxdq", "vpmovzxwd", "vpmovzxwq", "vpmuldq", "vpmulhrsw", "vpmulhuw", "vpmulhw", "vpmulld", "vpmullq", "vpmullw", "vpmultishiftqb", "vpmuludq", "vpopcntb", "vpopcntd", "vpopcntq", "vpopcntw", "vpord", "vporq", "vpor", "vpperm", "vprold", "vprolq", "vprolvd", "vprolvq", "vprord", "vprorq", "vprorvd", "vprorvq", "vprotb", "vprotd", "vprotq", "vprotw", "vpsadbw", "vpscatterdd", "vpscatterdq", "vpscatterqd", "vpscatterqq", "vpshab", "vpshad", "vpshaq", "vpshaw", "vpshlb", "vpshldd", "vpshldq", "vpshldvd", "vpshldvq", "vpshldvw", "vpshldw", "vpshld", "vpshlq", "vpshlw", "vpshrdd", "vpshrdq", "vpshrdvd", "vpshrdvq", "vpshrdvw", "vpshrdw", "vpshufbitqmb", "vpshufb", "vpshufd", "vpshufhw", "vpshuflw", "vpsignb", "vpsignd", "vpsignw", "vpslldq", "vpslld", "vpsllq", "vpsllvd", "vpsllvq", "vpsllvw", "vpsllw", "vpsrad", "vpsraq", "vpsravd", "vpsravq", "vpsravw", "vpsraw", "vpsrldq", "vpsrld", "vpsrlq", "vpsrlvd", "vpsrlvq", "vpsrlvw", "vpsrlw", "vpsubb", "vpsubd", "vpsubq", "vpsubsb", "vpsubsw", "vpsubusb", "vpsubusw", "vpsubw", "vpternlogd", "vpternlogq", "vptestmb", "vptestmd", "vptestmq", "vptestmw", "vptestnmb", "vptestnmd", "vptestnmq", "vptestnmw", "vptest", "vpunpckhbw", "vpunpckhdq", "vpunpckhqdq", "vpunpckhwd", "vpunpcklbw", "vpunpckldq", "vpunpcklqdq", "vpunpcklwd", "vpxord", "vpxorq", "vpxor", "vrangepd", "vrangeps", "vrangesd", "vrangess", "vrcp14pd", "vrcp14ps", "vrcp14sd", "vrcp14ss", "vrcp28pd", "vrcp28ps", "vrcp28sd", "vrcp28ss", "vrcpps", "vrcpss", "vreducepd", "vreduceps", "vreducesd", "vreducess", "vrndscalepd", "vrndscaleps", "vrndscalesd", "vrndscaless", "vroundpd", "vroundps", "vroundsd", "vroundss", "vrsqrt14pd", "vrsqrt14ps", "vrsqrt14sd", "vrsqrt14ss", "vrsqrt28pd", "vrsqrt28ps", "vrsqrt28sd", "vrsqrt28ss", "vrsqrtps", "vrsqrtss", "vscalefpd", "vscalefps", "vscalefsd", "vscalefss", "vscatterdpd", "vscatterdps", "vscatterpf0dpd", "vscatterpf0dps", "vscatterpf0qpd", "vscatterpf0qps", "vscatterpf1dpd", "vscatterpf1dps", "vscatterpf1qpd", "vscatterpf1qps", "vscatterqpd", "vscatterqps", "vshuff32x4", "vshuff64x2", "vshufi32x4", "vshufi64x2", "vshufpd", "vshufps", "vsqrtpd", "vsqrtps", "vsqrtsd", "vsqrtss", "vstmxcsr", "vsubpd", "vsubps", "vsubsd", "vsubss", "vtestpd", "vtestps", "vucomisd", "vucomiss", "vunpckhpd", "vunpckhps", "vunpcklpd", "vunpcklps", "vxorpd", "vxorps", "vzeroall", "vzeroupper", "wait", "wbinvd", "wbnoinvd", "wrfsbase", "wrgsbase", "wrmsr", "wrpkru", "wrssd", "wrssq", "wrussd", "wrussq", "xabort", "xacquire", "xadd", "xbegin", "xchg", "fxch", "xcryptcbc", "xcryptcfb", "xcryptctr", "xcryptecb", "xcryptofb", "xend", "xgetbv", "xlatb", "xor", "xorpd", "xorps", "xrelease", "xrstor", "xrstor64", "xrstors", "xrstors64", "xsave", "xsave64", "xsavec", "xsavec64", "xsaveopt", "xsaveopt64", "xsaves", "xsaves64", "xsetbv", "xsha1", "xsha256", "xstore", "xtest"};
        -:  477:
     1524:  478:        for (auto& k : x86Keywords)
        1:  478-block 9
     1523:  478-block 10
     1524:  478-block 17
branch  0 taken 1523
branch  1 taken 1 (fallthrough)
     3046:  479:            langDef.mKeywords.insert(k);
     1523:  479-block 12
call    0 returned 1523
branch  1 taken 1523 (fallthrough)
branch  2 taken 0 (throw)
     1523:  479-block 13
call    3 returned 1523
branch  4 taken 1523 (fallthrough)
branch  5 taken 0 (throw)
     1523:  479-block 14
call    6 returned 1523
     1523:  479-block 16
    $$$$$:  479-block 48
call    7 never executed
    $$$$$:  479-block 52
    $$$$$:  479-block 53
call    8 never executed
        -:  480:
        -:  481:        static const char* const identifiers[] = {
        -:  482:                // General-purpose registers (32-bit)
        -:  483:                "eax", "ebx", "ecx", "edx", "esi", "edi", "ebp", "esp",
        -:  484:                "al", "ah", "bl", "bh", "cl", "ch", "dl", "dh",
        -:  485:                // General-purpose registers (64-bit)
        -:  486:                "rax", "rbx", "rcx", "rdx", "rsi", "rdi", "rbp", "rsp", "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
        -:  487:                "sil", "dil", "bpl", "spl",
        -:  488:                "r8b", "r9b", "r10b", "r11b", "r12b", "r13b", "r14b", "r15b",
        -:  489:                // General-purpose registers (16-bit)
        -:  490:                "ax", "bx", "cx", "dx", "si", "di", "bp", "sp",
        -:  491:                // Segment registers
        -:  492:                "cs", "ds", "ss", "es", "fs", "gs",
        -:  493:                // Control registers
        -:  494:                "cr0", "cr1", "cr2", "cr3", "cr4", "cr8",
        -:  495:                "cr5", "cr6", "cr7", "cr9", "cr10", "cr11", "cr12", "cr13", "cr14", "cr15",
        -:  496:                // Debug registers
        -:  497:                "dr0", "dr1", "dr2", "dr3", "dr6", "dr7",
        -:  498:                "dr4", "dr5",
        -:  499:                // Extended multimedia registers (SSE/AVX)
        -:  500:                "xmm0", "xmm1", "xmm2", "xmm3", "xmm4", "xmm5", "xmm6", "xmm7", "xmm8", "xmm9", "xmm10", "xmm11", "xmm12", "xmm13", "xmm14", "xmm15",
        -:  501:                "ymm0", "ymm1", "ymm2", "ymm3", "ymm4", "ymm5", "ymm6", "ymm7", "ymm8", "ymm9", "ymm10", "ymm11", "ymm12", "ymm13", "ymm14", "ymm15",
        -:  502:                // Floating-point registers
        -:  503:                "st0", "st1", "st2", "st3", "st4", "st5", "st6", "st7",
        -:  504:                // Other registers
        -:  505:                "eip", "rip", "eflags", "rflags",
        -:  506:        };
        -:  507:
      127:  508:        for (auto& k : identifiers)
        1:  508-block 18
      127:  508-block 31
branch  0 taken 126
branch  1 taken 1 (fallthrough)
        -:  509:        {
      126:  510:            Identifier id;
      126:  510-block 19
call    0 returned 126
      126:  511:            id.mDeclaration = "CPU Register";
call    0 returned 126
branch  1 taken 126 (fallthrough)
branch  2 taken 0 (throw)
      126:  512:            langDef.mIdentifiers.insert(std::make_pair(std::string(k), id));
      126:  512-block 23
call    0 returned 126
branch  1 taken 126 (fallthrough)
branch  2 taken 0 (throw)
      126:  512-block 24
call    3 returned 126
branch  4 taken 126 (fallthrough)
branch  5 taken 0 (throw)
      126:  512-block 25
call    6 returned 126
branch  7 taken 126 (fallthrough)
branch  8 taken 0 (throw)
      126:  512-block 26
call    9 returned 126
call   10 returned 126
    $$$$$:  512-block 54
call   11 never executed
    $$$$$:  512-block 56
call   12 never executed
    $$$$$:  512-block 60
    $$$$$:  512-block 61
    $$$$$:  512-block 62
      126:  513:        }
      126:  513-block 29
call    0 returned 126
    $$$$$:  513-block 63
call    1 never executed
        -:  514:
        2:  515:        langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([a-zA-Z_]{1}[_a-zA-Z0-9]{0,}:)##", PaletteIndex::Identifier));
        1:  515-block 32
        1:  515-block 34
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  515-block 35
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  515-block 37
call    7 returned 1
call    8 returned 1
    $$$$$:  515-block 66
call    9 never executed
    $$$$$:  515-block 68
call   10 never executed
    $$$$$:  515-block 72
    $$$$$:  515-block 73
    $$$$$:  515-block 74
        -:  516:
function _ZZN10TextEditor18LanguageDefinition9Asmx86_64EvENKUlPKcS2_RS2_S3_RNS_12PaletteIndexEE_clES2_S2_S3_S3_S5_ called 97 returned 100% blocks executed 92%
        1:  517:        langDef.mTokenize = [](const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end, PaletteIndex& paletteIndex) -> bool
        1:  517-block 40
call    0 returned 1
        -:  518:        {
       97:  519:            paletteIndex = PaletteIndex::Max;
        -:  520:
      204:  521:            while (in_begin < in_end && isascii(*in_begin) && isblank(*in_begin))
       97:  521-block 2
      204:  521-block 4
branch  0 taken 203 (fallthrough)
branch  1 taken 1
      203:  521-block 5
branch  2 taken 203 (fallthrough)
branch  3 taken 0
      203:  521-block 6
branch  4 taken 107
branch  5 taken 96 (fallthrough)
      107:  522:                in_begin++;
      107:  522-block 3
        -:  523:
       97:  524:            if (in_begin == in_end)
       97:  524-block 7
branch  0 taken 1 (fallthrough)
branch  1 taken 96
        -:  525:            {
        1:  526:                out_begin = in_end;
        1:  527:                out_end = in_end;
        1:  528:                paletteIndex = PaletteIndex::Default;
        1:  528-block 8
        -:  529:            }
       96:  530:            else if (TokenizeCStyleString(in_begin, in_end, out_begin, out_end))
       96:  530-block 9
call    0 returned 96
branch  1 taken 0 (fallthrough)
branch  2 taken 96
    #####:  531:                paletteIndex = PaletteIndex::String;
    %%%%%:  531-block 11
       96:  532:            else if (TokenizeCStyleCharacterLiteral(in_begin, in_end, out_begin, out_end))
       96:  532-block 12
call    0 returned 96
branch  1 taken 0 (fallthrough)
branch  2 taken 96
    #####:  533:                paletteIndex = PaletteIndex::CharLiteral;
    %%%%%:  533-block 14
       96:  534:            else if (TokenizeCStyleIdentifier(in_begin, in_end, out_begin, out_end))
       96:  534-block 15
call    0 returned 96
branch  1 taken 71 (fallthrough)
branch  2 taken 25
       71:  535:                paletteIndex = PaletteIndex::Identifier;
       71:  535-block 17
       25:  536:            else if (TokenizeCStyleNumber(in_begin, in_end, out_begin, out_end))
       25:  536-block 18
call    0 returned 25
branch  1 taken 5 (fallthrough)
branch  2 taken 20
        5:  537:                paletteIndex = PaletteIndex::Number;
        5:  537-block 20
       20:  538:            else if (TokenizeCStylePunctuation(in_begin, in_end, out_begin, out_end))
       20:  538-block 21
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0
       20:  539:                paletteIndex = PaletteIndex::Punctuation;
       20:  539-block 23
        -:  540:
       97:  541:            return paletteIndex != PaletteIndex::Max;
       97:  541-block 24
        -:  542:        };
        -:  543:
        1:  544:        langDef.mCommentStart = "%comment";
call    0 returned 1
        1:  545:        langDef.mCommentEnd = "%endcomment";
call    0 returned 1
        1:  546:        langDef.mSingleLineComment = ";";
call    0 returned 1
        -:  547:
        1:  548:        langDef.mCaseSensitive = true;
        -:  549:
        1:  550:        langDef.mName = "Assembly x86";
call    0 returned 1
        1:  551:        inited = true;
        -:  552:    }
        1:  553:    return langDef;
        1:  553-block 46
        1:  553-block 47
        -:  554:}
        -:  555:
function _ZN10TextEditor18LanguageDefinition3CppEv called 0 returned 0% blocks executed 0%
    #####:  556:const TextEditor::LanguageDefinition& TextEditor::LanguageDefinition::Cpp()
        -:  557:{
        -:  558:	static bool inited = false;
    #####:  559:	static LanguageDefinition langDef;
    %%%%%:  559-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  559-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  559-block 5
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  560:	if (!inited)
    %%%%%:  560-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  561:	{
        -:  562:		static const char* const cppKeywords[] = {
        -:  563:			"alignas", "alignof", "and", "and_eq", "asm", "atomic_cancel", "atomic_commit", "atomic_noexcept", "auto", "bitand", "bitor", "bool", "break", "case", "catch", "char", "char16_t", "char32_t", "class",
        -:  564:			"compl", "concept", "const", "constexpr", "const_cast", "continue", "decltype", "default", "delete", "do", "double", "dynamic_cast", "else", "enum", "explicit", "export", "extern", "false", "float",
        -:  565:			"for", "friend", "goto", "if", "import", "inline", "int", "long", "module", "mutable", "namespace", "new", "noexcept", "not", "not_eq", "nullptr", "operator", "or", "or_eq", "private", "protected", "public",
        -:  566:			"register", "reinterpret_cast", "requires", "return", "short", "signed", "sizeof", "static", "static_assert", "static_cast", "struct", "switch", "synchronized", "template", "this", "thread_local",
        -:  567:			"throw", "true", "try", "typedef", "typeid", "typename", "union", "unsigned", "using", "virtual", "void", "volatile", "wchar_t", "while", "xor", "xor_eq"
        -:  568:		};
    #####:  569:		for (auto& k : cppKeywords)
    %%%%%:  569-block 9
    %%%%%:  569-block 10
    %%%%%:  569-block 17
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  570:			langDef.mKeywords.insert(k);
    %%%%%:  570-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  570-block 13
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  570-block 14
call    6 never executed
    %%%%%:  570-block 16
    $$$$$:  570-block 40
call    7 never executed
    $$$$$:  570-block 44
    $$$$$:  570-block 45
call    8 never executed
        -:  571:
        -:  572:		static const char* const identifiers[] = {
        -:  573:			"abort", "abs", "acos", "asin", "atan", "atexit", "atof", "atoi", "atol", "ceil", "clock", "cosh", "ctime", "div", "exit", "fabs", "floor", "fmod", "getchar", "getenv", "isalnum", "isalpha", "isdigit", "isgraph",
        -:  574:			"ispunct", "isspace", "isupper", "kbhit", "log10", "log2", "log", "memcmp", "modf", "pow", "printf", "sprintf", "snprintf", "putchar", "putenv", "puts", "rand", "remove", "rename", "sinh", "sqrt", "srand", "strcat", "strcmp", "strerror", "time", "tolower", "toupper",
        -:  575:			"std", "string", "vector", "map", "unordered_map", "set", "unordered_set", "min", "max"
        -:  576:		};
    #####:  577:		for (auto& k : identifiers)
    %%%%%:  577-block 18
    %%%%%:  577-block 31
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  578:		{
    #####:  579:			Identifier id;
    %%%%%:  579-block 19
call    0 never executed
    #####:  580:			id.mDeclaration = "Built-in function";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  581:			langDef.mIdentifiers.insert(std::make_pair(std::string(k), id));
    %%%%%:  581-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  581-block 24
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  581-block 25
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  581-block 26
call    9 never executed
call   10 never executed
    $$$$$:  581-block 46
call   11 never executed
    $$$$$:  581-block 48
call   12 never executed
    $$$$$:  581-block 52
    $$$$$:  581-block 53
    $$$$$:  581-block 54
    #####:  582:		}
    %%%%%:  582-block 29
call    0 never executed
    $$$$$:  582-block 55
call    1 never executed
        -:  583:
        -:  584:
function _ZZN10TextEditor18LanguageDefinition3CppEvENKUlPKcS2_RS2_S3_RNS_12PaletteIndexEE_clES2_S2_S3_S3_S5_ called 0 returned 0% blocks executed 0%
    #####:  585:		langDef.mTokenize = [](const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end, PaletteIndex& paletteIndex) -> bool
    %%%%%:  585-block 32
call    0 never executed
        -:  586:		{
    #####:  587:			paletteIndex = PaletteIndex::Max;
        -:  588:
    #####:  589:			while (in_begin < in_end && isascii(*in_begin) && isblank(*in_begin))
    %%%%%:  589-block 2
    %%%%%:  589-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  589-block 5
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  589-block 6
branch  4 never executed
branch  5 never executed (fallthrough)
    #####:  590:				in_begin++;
    %%%%%:  590-block 3
        -:  591:
    #####:  592:			if (in_begin == in_end)
    %%%%%:  592-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  593:			{
    #####:  594:				out_begin = in_end;
    #####:  595:				out_end = in_end;
    #####:  596:				paletteIndex = PaletteIndex::Default;
    %%%%%:  596-block 8
        -:  597:			}
    #####:  598:			else if (TokenizeCStyleString(in_begin, in_end, out_begin, out_end))
    %%%%%:  598-block 9
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  599:				paletteIndex = PaletteIndex::String;
    %%%%%:  599-block 11
    #####:  600:			else if (TokenizeCStyleCharacterLiteral(in_begin, in_end, out_begin, out_end))
    %%%%%:  600-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  601:				paletteIndex = PaletteIndex::CharLiteral;
    %%%%%:  601-block 14
    #####:  602:			else if (TokenizeCStyleIdentifier(in_begin, in_end, out_begin, out_end))
    %%%%%:  602-block 15
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  603:				paletteIndex = PaletteIndex::Identifier;
    %%%%%:  603-block 17
    #####:  604:			else if (TokenizeCStyleNumber(in_begin, in_end, out_begin, out_end))
    %%%%%:  604-block 18
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  605:				paletteIndex = PaletteIndex::Number;
    %%%%%:  605-block 20
    #####:  606:			else if (TokenizeCStylePunctuation(in_begin, in_end, out_begin, out_end))
    %%%%%:  606-block 21
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  607:				paletteIndex = PaletteIndex::Punctuation;
    %%%%%:  607-block 23
        -:  608:
    #####:  609:			return paletteIndex != PaletteIndex::Max;
    %%%%%:  609-block 24
        -:  610:		};
        -:  611:
    #####:  612:		langDef.mCommentStart = "/*";
call    0 never executed
    #####:  613:		langDef.mCommentEnd = "*/";
call    0 never executed
    #####:  614:		langDef.mSingleLineComment = "//";
call    0 never executed
        -:  615:
    #####:  616:		langDef.mCaseSensitive = true;
        -:  617:
    #####:  618:		langDef.mName = "C++";
call    0 never executed
        -:  619:
    #####:  620:		inited = true;
        -:  621:	}
    #####:  622:	return langDef;
    %%%%%:  622-block 38
    %%%%%:  622-block 39
        -:  623:}
        -:  624:
function _ZN10TextEditor18LanguageDefinition4HlslEv called 0 returned 0% blocks executed 0%
    #####:  625:const TextEditor::LanguageDefinition& TextEditor::LanguageDefinition::Hlsl()
        -:  626:{
        -:  627:	static bool inited = false;
    #####:  628:	static LanguageDefinition langDef;
    %%%%%:  628-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  628-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  628-block 5
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  629:	if (!inited)
    %%%%%:  629-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  630:	{
        -:  631:		static const char* const keywords[] = {
        -:  632:			"AppendStructuredBuffer", "asm", "asm_fragment", "BlendState", "bool", "break", "Buffer", "ByteAddressBuffer", "case", "cbuffer", "centroid", "class", "column_major", "compile", "compile_fragment",
        -:  633:			"CompileShader", "const", "continue", "ComputeShader", "ConsumeStructuredBuffer", "default", "DepthStencilState", "DepthStencilView", "discard", "do", "double", "DomainShader", "dword", "else",
        -:  634:			"export", "extern", "false", "float", "for", "fxgroup", "GeometryShader", "groupshared", "half", "Hullshader", "if", "in", "inline", "inout", "InputPatch", "int", "interface", "line", "lineadj",
        -:  635:			"linear", "LineStream", "matrix", "min16float", "min10float", "min16int", "min12int", "min16uint", "namespace", "nointerpolation", "noperspective", "NULL", "out", "OutputPatch", "packoffset",
        -:  636:			"pass", "pixelfragment", "PixelShader", "point", "PointStream", "precise", "RasterizerState", "RenderTargetView", "return", "register", "row_major", "RWBuffer", "RWByteAddressBuffer", "RWStructuredBuffer",
        -:  637:			"RWTexture1D", "RWTexture1DArray", "RWTexture2D", "RWTexture2DArray", "RWTexture3D", "sample", "sampler", "SamplerState", "SamplerComparisonState", "shared", "snorm", "stateblock", "stateblock_state",
        -:  638:			"static", "string", "struct", "switch", "StructuredBuffer", "tbuffer", "technique", "technique10", "technique11", "texture", "Texture1D", "Texture1DArray", "Texture2D", "Texture2DArray", "Texture2DMS",
        -:  639:			"Texture2DMSArray", "Texture3D", "TextureCube", "TextureCubeArray", "true", "typedef", "triangle", "triangleadj", "TriangleStream", "uint", "uniform", "unorm", "unsigned", "vector", "vertexfragment",
        -:  640:			"VertexShader", "void", "volatile", "while",
        -:  641:			"bool1","bool2","bool3","bool4","double1","double2","double3","double4", "float1", "float2", "float3", "float4", "int1", "int2", "int3", "int4", "in", "out", "inout",
        -:  642:			"uint1", "uint2", "uint3", "uint4", "dword1", "dword2", "dword3", "dword4", "half1", "half2", "half3", "half4",
        -:  643:			"float1x1","float2x1","float3x1","float4x1","float1x2","float2x2","float3x2","float4x2",
        -:  644:			"float1x3","float2x3","float3x3","float4x3","float1x4","float2x4","float3x4","float4x4",
        -:  645:			"half1x1","half2x1","half3x1","half4x1","half1x2","half2x2","half3x2","half4x2",
        -:  646:			"half1x3","half2x3","half3x3","half4x3","half1x4","half2x4","half3x4","half4x4",
        -:  647:		};
    #####:  648:		for (auto& k : keywords)
    %%%%%:  648-block 9
    %%%%%:  648-block 10
    %%%%%:  648-block 17
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  649:			langDef.mKeywords.insert(k);
    %%%%%:  649-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  649-block 13
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  649-block 14
call    6 never executed
    %%%%%:  649-block 16
    $$$$$:  649-block 111
call    7 never executed
    $$$$$:  649-block 115
    $$$$$:  649-block 116
call    8 never executed
        -:  650:
        -:  651:		static const char* const identifiers[] = {
        -:  652:			"abort", "abs", "acos", "all", "AllMemoryBarrier", "AllMemoryBarrierWithGroupSync", "any", "asdouble", "asfloat", "asin", "asint", "asint", "asuint",
        -:  653:			"asuint", "atan", "atan2", "ceil", "CheckAccessFullyMapped", "clamp", "clip", "cos", "cosh", "countbits", "cross", "D3DCOLORtoUBYTE4", "ddx",
        -:  654:			"ddx_coarse", "ddx_fine", "ddy", "ddy_coarse", "ddy_fine", "degrees", "determinant", "DeviceMemoryBarrier", "DeviceMemoryBarrierWithGroupSync",
        -:  655:			"distance", "dot", "dst", "errorf", "EvaluateAttributeAtCentroid", "EvaluateAttributeAtSample", "EvaluateAttributeSnapped", "exp", "exp2",
        -:  656:			"f16tof32", "f32tof16", "faceforward", "firstbithigh", "firstbitlow", "floor", "fma", "fmod", "frac", "frexp", "fwidth", "GetRenderTargetSampleCount",
        -:  657:			"GetRenderTargetSamplePosition", "GroupMemoryBarrier", "GroupMemoryBarrierWithGroupSync", "InterlockedAdd", "InterlockedAnd", "InterlockedCompareExchange",
        -:  658:			"InterlockedCompareStore", "InterlockedExchange", "InterlockedMax", "InterlockedMin", "InterlockedOr", "InterlockedXor", "isfinite", "isinf", "isnan",
        -:  659:			"ldexp", "length", "lerp", "lit", "log", "log10", "log2", "mad", "max", "min", "modf", "msad4", "mul", "noise", "normalize", "pow", "printf",
        -:  660:			"Process2DQuadTessFactorsAvg", "Process2DQuadTessFactorsMax", "Process2DQuadTessFactorsMin", "ProcessIsolineTessFactors", "ProcessQuadTessFactorsAvg",
        -:  661:			"ProcessQuadTessFactorsMax", "ProcessQuadTessFactorsMin", "ProcessTriTessFactorsAvg", "ProcessTriTessFactorsMax", "ProcessTriTessFactorsMin",
        -:  662:			"radians", "rcp", "reflect", "refract", "reversebits", "round", "rsqrt", "saturate", "sign", "sin", "sincos", "sinh", "smoothstep", "sqrt", "step",
        -:  663:			"tan", "tanh", "tex1D", "tex1D", "tex1Dbias", "tex1Dgrad", "tex1Dlod", "tex1Dproj", "tex2D", "tex2D", "tex2Dbias", "tex2Dgrad", "tex2Dlod", "tex2Dproj",
        -:  664:			"tex3D", "tex3D", "tex3Dbias", "tex3Dgrad", "tex3Dlod", "tex3Dproj", "texCUBE", "texCUBE", "texCUBEbias", "texCUBEgrad", "texCUBElod", "texCUBEproj", "transpose", "trunc"
        -:  665:		};
    #####:  666:		for (auto& k : identifiers)
    %%%%%:  666-block 18
    %%%%%:  666-block 31
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  667:		{
    #####:  668:			Identifier id;
    %%%%%:  668-block 19
call    0 never executed
    #####:  669:			id.mDeclaration = "Built-in function";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  670:			langDef.mIdentifiers.insert(std::make_pair(std::string(k), id));
    %%%%%:  670-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  670-block 24
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  670-block 25
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  670-block 26
call    9 never executed
call   10 never executed
    $$$$$:  670-block 117
call   11 never executed
    $$$$$:  670-block 119
call   12 never executed
    $$$$$:  670-block 123
    $$$$$:  670-block 124
    $$$$$:  670-block 125
    #####:  671:		}
    %%%%%:  671-block 29
call    0 never executed
    $$$$$:  671-block 126
call    1 never executed
        -:  672:
    #####:  673:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([ \t]*#[ \t]*[a-zA-Z_]+)##", PaletteIndex::Preprocessor));
    %%%%%:  673-block 32
    %%%%%:  673-block 34
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  673-block 35
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  673-block 37
call    7 never executed
call    8 never executed
    $$$$$:  673-block 129
call    9 never executed
    $$$$$:  673-block 131
call   10 never executed
    $$$$$:  673-block 135
    $$$$$:  673-block 136
    $$$$$:  673-block 137
    $$$$$:  673-block 138
call   11 never executed
    #####:  674:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(L?\"(\\.|[^\"])*\")##", PaletteIndex::String));
    %%%%%:  674-block 40
    %%%%%:  674-block 42
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  674-block 43
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  674-block 45
call    7 never executed
call    8 never executed
    $$$$$:  674-block 139
call    9 never executed
    $$$$$:  674-block 141
call   10 never executed
    $$$$$:  674-block 145
    $$$$$:  674-block 146
    $$$$$:  674-block 147
    $$$$$:  674-block 148
call   11 never executed
    #####:  675:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(\'\\?[^\']\')##", PaletteIndex::CharLiteral));
    %%%%%:  675-block 48
    %%%%%:  675-block 50
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  675-block 51
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  675-block 53
call    7 never executed
call    8 never executed
    $$$$$:  675-block 149
call    9 never executed
    $$$$$:  675-block 151
call   10 never executed
    $$$$$:  675-block 155
    $$$$$:  675-block 156
    $$$$$:  675-block 157
    $$$$$:  675-block 158
call   11 never executed
    #####:  676:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)([eE][+-]?[0-9]+)?[fF]?)##", PaletteIndex::Number));
    %%%%%:  676-block 56
    %%%%%:  676-block 58
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  676-block 59
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  676-block 61
call    7 never executed
call    8 never executed
    $$$$$:  676-block 159
call    9 never executed
    $$$$$:  676-block 161
call   10 never executed
    $$$$$:  676-block 165
    $$$$$:  676-block 166
    $$$$$:  676-block 167
    $$$$$:  676-block 168
call   11 never executed
    #####:  677:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?[0-9]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  677-block 64
    %%%%%:  677-block 66
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  677-block 67
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  677-block 69
call    7 never executed
call    8 never executed
    $$$$$:  677-block 169
call    9 never executed
    $$$$$:  677-block 171
call   10 never executed
    $$$$$:  677-block 175
    $$$$$:  677-block 176
    $$$$$:  677-block 177
    $$$$$:  677-block 178
call   11 never executed
    #####:  678:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[0-7]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  678-block 72
    %%%%%:  678-block 74
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  678-block 75
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  678-block 77
call    7 never executed
call    8 never executed
    $$$$$:  678-block 179
call    9 never executed
    $$$$$:  678-block 181
call   10 never executed
    $$$$$:  678-block 185
    $$$$$:  678-block 186
    $$$$$:  678-block 187
    $$$$$:  678-block 188
call   11 never executed
    #####:  679:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[xX][0-9a-fA-F]+[uU]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  679-block 80
    %%%%%:  679-block 82
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  679-block 83
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  679-block 85
call    7 never executed
call    8 never executed
    $$$$$:  679-block 189
call    9 never executed
    $$$$$:  679-block 191
call   10 never executed
    $$$$$:  679-block 195
    $$$$$:  679-block 196
    $$$$$:  679-block 197
    $$$$$:  679-block 198
call   11 never executed
    #####:  680:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([a-zA-Z_][a-zA-Z0-9_]*)##", PaletteIndex::Identifier));
    %%%%%:  680-block 88
    %%%%%:  680-block 90
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  680-block 91
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  680-block 93
call    7 never executed
call    8 never executed
    $$$$$:  680-block 199
call    9 never executed
    $$$$$:  680-block 201
call   10 never executed
    $$$$$:  680-block 205
    $$$$$:  680-block 206
    $$$$$:  680-block 207
    $$$$$:  680-block 208
call   11 never executed
    #####:  681:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([\[\]\{\}\!\%\^\&\*\(\)\-\+\=\~\|\<\>\?\/\;\,\.])##", PaletteIndex::Punctuation));
    %%%%%:  681-block 96
    %%%%%:  681-block 98
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  681-block 99
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  681-block 101
call    7 never executed
call    8 never executed
    $$$$$:  681-block 209
call    9 never executed
    $$$$$:  681-block 211
call   10 never executed
    $$$$$:  681-block 215
    $$$$$:  681-block 216
    $$$$$:  681-block 217
        -:  682:
    #####:  683:		langDef.mCommentStart = "/*";
    %%%%%:  683-block 104
call    0 never executed
    #####:  684:		langDef.mCommentEnd = "*/";
call    0 never executed
    #####:  685:		langDef.mSingleLineComment = "//";
call    0 never executed
        -:  686:
    #####:  687:		langDef.mCaseSensitive = true;
        -:  688:
    #####:  689:		langDef.mName = "HLSL";
call    0 never executed
        -:  690:
    #####:  691:		inited = true;
        -:  692:	}
    #####:  693:	return langDef;
    %%%%%:  693-block 109
    %%%%%:  693-block 110
        -:  694:}
        -:  695:
function _ZN10TextEditor18LanguageDefinition4GlslEv called 0 returned 0% blocks executed 0%
    #####:  696:const TextEditor::LanguageDefinition& TextEditor::LanguageDefinition::Glsl()
        -:  697:{
        -:  698:	static bool inited = false;
    #####:  699:	static LanguageDefinition langDef;
    %%%%%:  699-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  699-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  699-block 5
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  700:	if (!inited)
    %%%%%:  700-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  701:	{
        -:  702:		static const char* const keywords[] = {
        -:  703:			"auto", "break", "case", "char", "const", "continue", "default", "do", "double", "else", "enum", "extern", "float", "for", "goto", "if", "inline", "int", "long", "register", "restrict", "return", "short",
        -:  704:			"signed", "sizeof", "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while", "_Alignas", "_Alignof", "_Atomic", "_Bool", "_Complex", "_Generic", "_Imaginary",
        -:  705:			"_Noreturn", "_Static_assert", "_Thread_local"
        -:  706:		};
    #####:  707:		for (auto& k : keywords)
    %%%%%:  707-block 9
    %%%%%:  707-block 10
    %%%%%:  707-block 17
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  708:			langDef.mKeywords.insert(k);
    %%%%%:  708-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  708-block 13
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  708-block 14
call    6 never executed
    %%%%%:  708-block 16
    $$$$$:  708-block 111
call    7 never executed
    $$$$$:  708-block 115
    $$$$$:  708-block 116
call    8 never executed
        -:  709:
        -:  710:		static const char* const identifiers[] = {
        -:  711:			"abort", "abs", "acos", "asin", "atan", "atexit", "atof", "atoi", "atol", "ceil", "clock", "cosh", "ctime", "div", "exit", "fabs", "floor", "fmod", "getchar", "getenv", "isalnum", "isalpha", "isdigit", "isgraph",
        -:  712:			"ispunct", "isspace", "isupper", "kbhit", "log10", "log2", "log", "memcmp", "modf", "pow", "putchar", "putenv", "puts", "rand", "remove", "rename", "sinh", "sqrt", "srand", "strcat", "strcmp", "strerror", "time", "tolower", "toupper"
        -:  713:		};
    #####:  714:		for (auto& k : identifiers)
    %%%%%:  714-block 18
    %%%%%:  714-block 31
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  715:		{
    #####:  716:			Identifier id;
    %%%%%:  716-block 19
call    0 never executed
    #####:  717:			id.mDeclaration = "Built-in function";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  718:			langDef.mIdentifiers.insert(std::make_pair(std::string(k), id));
    %%%%%:  718-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  718-block 24
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  718-block 25
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  718-block 26
call    9 never executed
call   10 never executed
    $$$$$:  718-block 117
call   11 never executed
    $$$$$:  718-block 119
call   12 never executed
    $$$$$:  718-block 123
    $$$$$:  718-block 124
    $$$$$:  718-block 125
    #####:  719:		}
    %%%%%:  719-block 29
call    0 never executed
    $$$$$:  719-block 126
call    1 never executed
        -:  720:
    #####:  721:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([ \t]*#[ \t]*[a-zA-Z_]+)##", PaletteIndex::Preprocessor));
    %%%%%:  721-block 32
    %%%%%:  721-block 34
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  721-block 35
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  721-block 37
call    7 never executed
call    8 never executed
    $$$$$:  721-block 129
call    9 never executed
    $$$$$:  721-block 131
call   10 never executed
    $$$$$:  721-block 135
    $$$$$:  721-block 136
    $$$$$:  721-block 137
    $$$$$:  721-block 138
call   11 never executed
    #####:  722:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(L?\"(\\.|[^\"])*\")##", PaletteIndex::String));
    %%%%%:  722-block 40
    %%%%%:  722-block 42
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  722-block 43
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  722-block 45
call    7 never executed
call    8 never executed
    $$$$$:  722-block 139
call    9 never executed
    $$$$$:  722-block 141
call   10 never executed
    $$$$$:  722-block 145
    $$$$$:  722-block 146
    $$$$$:  722-block 147
    $$$$$:  722-block 148
call   11 never executed
    #####:  723:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(\'\\?[^\']\')##", PaletteIndex::CharLiteral));
    %%%%%:  723-block 48
    %%%%%:  723-block 50
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  723-block 51
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  723-block 53
call    7 never executed
call    8 never executed
    $$$$$:  723-block 149
call    9 never executed
    $$$$$:  723-block 151
call   10 never executed
    $$$$$:  723-block 155
    $$$$$:  723-block 156
    $$$$$:  723-block 157
    $$$$$:  723-block 158
call   11 never executed
    #####:  724:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)([eE][+-]?[0-9]+)?[fF]?)##", PaletteIndex::Number));
    %%%%%:  724-block 56
    %%%%%:  724-block 58
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  724-block 59
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  724-block 61
call    7 never executed
call    8 never executed
    $$$$$:  724-block 159
call    9 never executed
    $$$$$:  724-block 161
call   10 never executed
    $$$$$:  724-block 165
    $$$$$:  724-block 166
    $$$$$:  724-block 167
    $$$$$:  724-block 168
call   11 never executed
    #####:  725:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?[0-9]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  725-block 64
    %%%%%:  725-block 66
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  725-block 67
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  725-block 69
call    7 never executed
call    8 never executed
    $$$$$:  725-block 169
call    9 never executed
    $$$$$:  725-block 171
call   10 never executed
    $$$$$:  725-block 175
    $$$$$:  725-block 176
    $$$$$:  725-block 177
    $$$$$:  725-block 178
call   11 never executed
    #####:  726:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[0-7]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  726-block 72
    %%%%%:  726-block 74
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  726-block 75
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  726-block 77
call    7 never executed
call    8 never executed
    $$$$$:  726-block 179
call    9 never executed
    $$$$$:  726-block 181
call   10 never executed
    $$$$$:  726-block 185
    $$$$$:  726-block 186
    $$$$$:  726-block 187
    $$$$$:  726-block 188
call   11 never executed
    #####:  727:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[xX][0-9a-fA-F]+[uU]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  727-block 80
    %%%%%:  727-block 82
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  727-block 83
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  727-block 85
call    7 never executed
call    8 never executed
    $$$$$:  727-block 189
call    9 never executed
    $$$$$:  727-block 191
call   10 never executed
    $$$$$:  727-block 195
    $$$$$:  727-block 196
    $$$$$:  727-block 197
    $$$$$:  727-block 198
call   11 never executed
    #####:  728:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([a-zA-Z_][a-zA-Z0-9_]*)##", PaletteIndex::Identifier));
    %%%%%:  728-block 88
    %%%%%:  728-block 90
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  728-block 91
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  728-block 93
call    7 never executed
call    8 never executed
    $$$$$:  728-block 199
call    9 never executed
    $$$$$:  728-block 201
call   10 never executed
    $$$$$:  728-block 205
    $$$$$:  728-block 206
    $$$$$:  728-block 207
    $$$$$:  728-block 208
call   11 never executed
    #####:  729:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([\[\]\{\}\!\%\^\&\*\(\)\-\+\=\~\|\<\>\?\/\;\,\.])##", PaletteIndex::Punctuation));
    %%%%%:  729-block 96
    %%%%%:  729-block 98
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  729-block 99
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  729-block 101
call    7 never executed
call    8 never executed
    $$$$$:  729-block 209
call    9 never executed
    $$$$$:  729-block 211
call   10 never executed
    $$$$$:  729-block 215
    $$$$$:  729-block 216
    $$$$$:  729-block 217
        -:  730:
    #####:  731:		langDef.mCommentStart = "/*";
    %%%%%:  731-block 104
call    0 never executed
    #####:  732:		langDef.mCommentEnd = "*/";
call    0 never executed
    #####:  733:		langDef.mSingleLineComment = "//";
call    0 never executed
        -:  734:
    #####:  735:		langDef.mCaseSensitive = true;
        -:  736:
    #####:  737:		langDef.mName = "GLSL";
call    0 never executed
        -:  738:
    #####:  739:		inited = true;
        -:  740:	}
    #####:  741:	return langDef;
    %%%%%:  741-block 109
    %%%%%:  741-block 110
        -:  742:}
        -:  743:
function _ZN10TextEditor18LanguageDefinition6PythonEv called 0 returned 0% blocks executed 0%
    #####:  744:const TextEditor::LanguageDefinition& TextEditor::LanguageDefinition::Python()
        -:  745:{
        -:  746:	static bool inited = false;
    #####:  747:	static LanguageDefinition langDef;
    %%%%%:  747-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  747-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  747-block 5
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  748:	if (!inited)
    %%%%%:  748-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  749:	{
        -:  750:		static const char* const keywords[] = {
        -:  751:			"False", "await", "else", "import", "pass", "None", "break", "except", "in", "raise", "True", "class", "finally", "is", "return", "and", "continue", "for", "lambda", "try", "as", "def", "from", "nonlocal", "while", "assert", "del", "global", "not", "with", "async", "elif", "if", "or", "yield"
        -:  752:		};
    #####:  753:		for (auto& k : keywords)
    %%%%%:  753-block 9
    %%%%%:  753-block 10
    %%%%%:  753-block 17
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  754:			langDef.mKeywords.insert(k);
    %%%%%:  754-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  754-block 13
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  754-block 14
call    6 never executed
    %%%%%:  754-block 16
    $$$$$:  754-block 103
call    7 never executed
    $$$$$:  754-block 107
    $$$$$:  754-block 108
call    8 never executed
        -:  755:
        -:  756:		static const char* const identifiers[] = {
        -:  757:			"abs", "aiter", "all", "any", "anext", "ascii", "bin", "bool", "breakpoint", "bytearray", "bytes", "callable", "chr", "classmethod", "compile", "complex", "delattr", "dict", "dir", "divmod", "enumerate", "eval", "exec", "filter", "float", "format", "frozenset", "getattr", "globals", "hasattr", "hash", "help", "hex", "id", "input", "int", "isinstance", "issubclass", "iter", "len", "list", "locals", "map", "max", "memoryview", "min", "next", "object", "oct", "open", "ord", "pow", "print", "property", "range", "repr", "reversed", "round", "set", "setattr", "slice", "sorted", "staticmethod", "str", "sum", "super", "tuple", "type", "vars", "zip", "__import__"
        -:  758:		};
    #####:  759:		for (auto& k : identifiers)
    %%%%%:  759-block 18
    %%%%%:  759-block 31
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  760:		{
    #####:  761:			Identifier id;
    %%%%%:  761-block 19
call    0 never executed
    #####:  762:			id.mDeclaration = "Built-in function";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  763:			langDef.mIdentifiers.insert(std::make_pair(std::string(k), id));
    %%%%%:  763-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  763-block 24
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  763-block 25
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  763-block 26
call    9 never executed
call   10 never executed
    $$$$$:  763-block 109
call   11 never executed
    $$$$$:  763-block 111
call   12 never executed
    $$$$$:  763-block 115
    $$$$$:  763-block 116
    $$$$$:  763-block 117
    #####:  764:		}
    %%%%%:  764-block 29
call    0 never executed
    $$$$$:  764-block 118
call    1 never executed
        -:  765:
    #####:  766:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##((b|u|f|r)?\"(\\.|[^\"])*\")##", PaletteIndex::String));
    %%%%%:  766-block 32
    %%%%%:  766-block 34
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  766-block 35
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  766-block 37
call    7 never executed
call    8 never executed
    $$$$$:  766-block 121
call    9 never executed
    $$$$$:  766-block 123
call   10 never executed
    $$$$$:  766-block 127
    $$$$$:  766-block 128
    $$$$$:  766-block 129
    $$$$$:  766-block 130
call   11 never executed
    #####:  767:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##((b|u|f|r)?'(\\.|[^'])*')##", PaletteIndex::String));
    %%%%%:  767-block 40
    %%%%%:  767-block 42
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  767-block 43
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  767-block 45
call    7 never executed
call    8 never executed
    $$$$$:  767-block 131
call    9 never executed
    $$$$$:  767-block 133
call   10 never executed
    $$$$$:  767-block 137
    $$$$$:  767-block 138
    $$$$$:  767-block 139
    $$$$$:  767-block 140
call   11 never executed
    #####:  768:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)([eE][+-]?[0-9]+)?[fF]?)##", PaletteIndex::Number));
    %%%%%:  768-block 48
    %%%%%:  768-block 50
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  768-block 51
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  768-block 53
call    7 never executed
call    8 never executed
    $$$$$:  768-block 141
call    9 never executed
    $$$$$:  768-block 143
call   10 never executed
    $$$$$:  768-block 147
    $$$$$:  768-block 148
    $$$$$:  768-block 149
    $$$$$:  768-block 150
call   11 never executed
    #####:  769:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?[0-9]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  769-block 56
    %%%%%:  769-block 58
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  769-block 59
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  769-block 61
call    7 never executed
call    8 never executed
    $$$$$:  769-block 151
call    9 never executed
    $$$$$:  769-block 153
call   10 never executed
    $$$$$:  769-block 157
    $$$$$:  769-block 158
    $$$$$:  769-block 159
    $$$$$:  769-block 160
call   11 never executed
    #####:  770:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[0-7]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  770-block 64
    %%%%%:  770-block 66
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  770-block 67
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  770-block 69
call    7 never executed
call    8 never executed
    $$$$$:  770-block 161
call    9 never executed
    $$$$$:  770-block 163
call   10 never executed
    $$$$$:  770-block 167
    $$$$$:  770-block 168
    $$$$$:  770-block 169
    $$$$$:  770-block 170
call   11 never executed
    #####:  771:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[xX][0-9a-fA-F]+[uU]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  771-block 72
    %%%%%:  771-block 74
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  771-block 75
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  771-block 77
call    7 never executed
call    8 never executed
    $$$$$:  771-block 171
call    9 never executed
    $$$$$:  771-block 173
call   10 never executed
    $$$$$:  771-block 177
    $$$$$:  771-block 178
    $$$$$:  771-block 179
    $$$$$:  771-block 180
call   11 never executed
    #####:  772:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([a-zA-Z_][a-zA-Z0-9_]*)##", PaletteIndex::Identifier));
    %%%%%:  772-block 80
    %%%%%:  772-block 82
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  772-block 83
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  772-block 85
call    7 never executed
call    8 never executed
    $$$$$:  772-block 181
call    9 never executed
    $$$$$:  772-block 183
call   10 never executed
    $$$$$:  772-block 187
    $$$$$:  772-block 188
    $$$$$:  772-block 189
    $$$$$:  772-block 190
call   11 never executed
    #####:  773:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([\[\]\{\}\!\%\^\&\*\(\)\-\+\=\~\|\<\>\?\/\;\,\.\:])##", PaletteIndex::Punctuation));
    %%%%%:  773-block 88
    %%%%%:  773-block 90
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  773-block 91
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  773-block 93
call    7 never executed
call    8 never executed
    $$$$$:  773-block 191
call    9 never executed
    $$$$$:  773-block 193
call   10 never executed
    $$$$$:  773-block 197
    $$$$$:  773-block 198
    $$$$$:  773-block 199
        -:  774:
    #####:  775:		langDef.mCommentStart = "\"\"\"";
    %%%%%:  775-block 96
call    0 never executed
    #####:  776:		langDef.mCommentEnd = "\"\"\"";
call    0 never executed
    #####:  777:		langDef.mSingleLineComment = "#";
call    0 never executed
        -:  778:
    #####:  779:		langDef.mCaseSensitive = true;
        -:  780:
    #####:  781:		langDef.mName = "Python";
call    0 never executed
        -:  782:
    #####:  783:		inited = true;
        -:  784:	}
    #####:  785:	return langDef;
    %%%%%:  785-block 101
    %%%%%:  785-block 102
        -:  786:}
        -:  787:
function _ZN10TextEditor18LanguageDefinition1CEv called 0 returned 0% blocks executed 0%
    #####:  788:const TextEditor::LanguageDefinition& TextEditor::LanguageDefinition::C()
        -:  789:{
        -:  790:	static bool inited = false;
    #####:  791:	static LanguageDefinition langDef;
    %%%%%:  791-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  791-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  791-block 5
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  792:	if (!inited)
    %%%%%:  792-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  793:	{
        -:  794:		static const char* const keywords[] = {
        -:  795:			"auto", "break", "case", "char", "const", "continue", "default", "do", "double", "else", "enum", "extern", "float", "for", "goto", "if", "inline", "int", "long", "register", "restrict", "return", "short",
        -:  796:			"signed", "sizeof", "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while", "_Alignas", "_Alignof", "_Atomic", "_Bool", "_Complex", "_Generic", "_Imaginary",
        -:  797:			"_Noreturn", "_Static_assert", "_Thread_local"
        -:  798:		};
    #####:  799:		for (auto& k : keywords)
    %%%%%:  799-block 9
    %%%%%:  799-block 10
    %%%%%:  799-block 17
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  800:			langDef.mKeywords.insert(k);
    %%%%%:  800-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  800-block 13
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  800-block 14
call    6 never executed
    %%%%%:  800-block 16
    $$$$$:  800-block 40
call    7 never executed
    $$$$$:  800-block 44
    $$$$$:  800-block 45
call    8 never executed
        -:  801:
        -:  802:		static const char* const identifiers[] = {
        -:  803:			"abort", "abs", "acos", "asin", "atan", "atexit", "atof", "atoi", "atol", "ceil", "clock", "cosh", "ctime", "div", "exit", "fabs", "floor", "fmod", "getchar", "getenv", "isalnum", "isalpha", "isdigit", "isgraph",
        -:  804:			"ispunct", "isspace", "isupper", "kbhit", "log10", "log2", "log", "memcmp", "modf", "pow", "putchar", "putenv", "puts", "rand", "remove", "rename", "sinh", "sqrt", "srand", "strcat", "strcmp", "strerror", "time", "tolower", "toupper"
        -:  805:		};
    #####:  806:		for (auto& k : identifiers)
    %%%%%:  806-block 18
    %%%%%:  806-block 31
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  807:		{
    #####:  808:			Identifier id;
    %%%%%:  808-block 19
call    0 never executed
    #####:  809:			id.mDeclaration = "Built-in function";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  810:			langDef.mIdentifiers.insert(std::make_pair(std::string(k), id));
    %%%%%:  810-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  810-block 24
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  810-block 25
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  810-block 26
call    9 never executed
call   10 never executed
    $$$$$:  810-block 46
call   11 never executed
    $$$$$:  810-block 48
call   12 never executed
    $$$$$:  810-block 52
    $$$$$:  810-block 53
    $$$$$:  810-block 54
    #####:  811:		}
    %%%%%:  811-block 29
call    0 never executed
    $$$$$:  811-block 55
call    1 never executed
        -:  812:
function _ZZN10TextEditor18LanguageDefinition1CEvENKUlPKcS2_RS2_S3_RNS_12PaletteIndexEE_clES2_S2_S3_S3_S5_ called 0 returned 0% blocks executed 0%
    #####:  813:		langDef.mTokenize = [](const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end, PaletteIndex& paletteIndex) -> bool
    %%%%%:  813-block 32
call    0 never executed
        -:  814:		{
    #####:  815:			paletteIndex = PaletteIndex::Max;
        -:  816:
    #####:  817:			while (in_begin < in_end && isascii(*in_begin) && isblank(*in_begin))
    %%%%%:  817-block 2
    %%%%%:  817-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  817-block 5
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  817-block 6
branch  4 never executed
branch  5 never executed (fallthrough)
    #####:  818:				in_begin++;
    %%%%%:  818-block 3
        -:  819:
    #####:  820:			if (in_begin == in_end)
    %%%%%:  820-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  821:			{
    #####:  822:				out_begin = in_end;
    #####:  823:				out_end = in_end;
    #####:  824:				paletteIndex = PaletteIndex::Default;
    %%%%%:  824-block 8
        -:  825:			}
    #####:  826:			else if (TokenizeCStyleString(in_begin, in_end, out_begin, out_end))
    %%%%%:  826-block 9
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  827:				paletteIndex = PaletteIndex::String;
    %%%%%:  827-block 11
    #####:  828:			else if (TokenizeCStyleCharacterLiteral(in_begin, in_end, out_begin, out_end))
    %%%%%:  828-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  829:				paletteIndex = PaletteIndex::CharLiteral;
    %%%%%:  829-block 14
    #####:  830:			else if (TokenizeCStyleIdentifier(in_begin, in_end, out_begin, out_end))
    %%%%%:  830-block 15
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  831:				paletteIndex = PaletteIndex::Identifier;
    %%%%%:  831-block 17
    #####:  832:			else if (TokenizeCStyleNumber(in_begin, in_end, out_begin, out_end))
    %%%%%:  832-block 18
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  833:				paletteIndex = PaletteIndex::Number;
    %%%%%:  833-block 20
    #####:  834:			else if (TokenizeCStylePunctuation(in_begin, in_end, out_begin, out_end))
    %%%%%:  834-block 21
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  835:				paletteIndex = PaletteIndex::Punctuation;
    %%%%%:  835-block 23
        -:  836:
    #####:  837:			return paletteIndex != PaletteIndex::Max;
    %%%%%:  837-block 24
        -:  838:		};
        -:  839:
    #####:  840:		langDef.mCommentStart = "/*";
call    0 never executed
    #####:  841:		langDef.mCommentEnd = "*/";
call    0 never executed
    #####:  842:		langDef.mSingleLineComment = "//";
call    0 never executed
        -:  843:
    #####:  844:		langDef.mCaseSensitive = true;
        -:  845:
    #####:  846:		langDef.mName = "C";
call    0 never executed
        -:  847:
    #####:  848:		inited = true;
        -:  849:	}
    #####:  850:	return langDef;
    %%%%%:  850-block 38
    %%%%%:  850-block 39
        -:  851:}
        -:  852:
function _ZN10TextEditor18LanguageDefinition3SqlEv called 0 returned 0% blocks executed 0%
    #####:  853:const TextEditor::LanguageDefinition& TextEditor::LanguageDefinition::Sql()
        -:  854:{
        -:  855:	static bool inited = false;
    #####:  856:	static LanguageDefinition langDef;
    %%%%%:  856-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  856-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  856-block 5
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  857:	if (!inited)
    %%%%%:  857-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  858:	{
        -:  859:		static const char* const keywords[] = {
        -:  860:			"ADD", "EXCEPT", "PERCENT", "ALL", "EXEC", "PLAN", "ALTER", "EXECUTE", "PRECISION", "AND", "EXISTS", "PRIMARY", "ANY", "EXIT", "PRINT", "AS", "FETCH", "PROC", "ASC", "FILE", "PROCEDURE",
        -:  861:			"AUTHORIZATION", "FILLFACTOR", "PUBLIC", "BACKUP", "FOR", "RAISERROR", "BEGIN", "FOREIGN", "READ", "BETWEEN", "FREETEXT", "READTEXT", "BREAK", "FREETEXTTABLE", "RECONFIGURE",
        -:  862:			"BROWSE", "FROM", "REFERENCES", "BULK", "FULL", "REPLICATION", "BY", "FUNCTION", "RESTORE", "CASCADE", "GOTO", "RESTRICT", "CASE", "GRANT", "RETURN", "CHECK", "GROUP", "REVOKE",
        -:  863:			"CHECKPOINT", "HAVING", "RIGHT", "CLOSE", "HOLDLOCK", "ROLLBACK", "CLUSTERED", "IDENTITY", "ROWCOUNT", "COALESCE", "IDENTITY_INSERT", "ROWGUIDCOL", "COLLATE", "IDENTITYCOL", "RULE",
        -:  864:			"COLUMN", "IF", "SAVE", "COMMIT", "IN", "SCHEMA", "COMPUTE", "INDEX", "SELECT", "CONSTRAINT", "INNER", "SESSION_USER", "CONTAINS", "INSERT", "SET", "CONTAINSTABLE", "INTERSECT", "SETUSER",
        -:  865:			"CONTINUE", "INTO", "SHUTDOWN", "CONVERT", "IS", "SOME", "CREATE", "JOIN", "STATISTICS", "CROSS", "KEY", "SYSTEM_USER", "CURRENT", "KILL", "TABLE", "CURRENT_DATE", "LEFT", "TEXTSIZE",
        -:  866:			"CURRENT_TIME", "LIKE", "THEN", "CURRENT_TIMESTAMP", "LINENO", "TO", "CURRENT_USER", "LOAD", "TOP", "CURSOR", "NATIONAL", "TRAN", "DATABASE", "NOCHECK", "TRANSACTION",
        -:  867:			"DBCC", "NONCLUSTERED", "TRIGGER", "DEALLOCATE", "NOT", "TRUNCATE", "DECLARE", "NULL", "TSEQUAL", "DEFAULT", "NULLIF", "UNION", "DELETE", "OF", "UNIQUE", "DENY", "OFF", "UPDATE",
        -:  868:			"DESC", "OFFSETS", "UPDATETEXT", "DISK", "ON", "USE", "DISTINCT", "OPEN", "USER", "DISTRIBUTED", "OPENDATASOURCE", "VALUES", "DOUBLE", "OPENQUERY", "VARYING","DROP", "OPENROWSET", "VIEW",
        -:  869:			"DUMMY", "OPENXML", "WAITFOR", "DUMP", "OPTION", "WHEN", "ELSE", "OR", "WHERE", "END", "ORDER", "WHILE", "ERRLVL", "OUTER", "WITH", "ESCAPE", "OVER", "WRITETEXT"
        -:  870:		};
        -:  871:
    #####:  872:		for (auto& k : keywords)
    %%%%%:  872-block 9
    %%%%%:  872-block 10
    %%%%%:  872-block 17
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  873:			langDef.mKeywords.insert(k);
    %%%%%:  873-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  873-block 13
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  873-block 14
call    6 never executed
    %%%%%:  873-block 16
    $$$$$:  873-block 103
call    7 never executed
    $$$$$:  873-block 107
    $$$$$:  873-block 108
call    8 never executed
        -:  874:
        -:  875:		static const char* const identifiers[] = {
        -:  876:			"ABS", "ACOS", "ADD_MONTHS", "ASCII", "ASCIISTR", "ASIN", "ATAN", "ATAN2", "AVG", "BFILENAME", "BIN_TO_NUM", "BITAND", "CARDINALITY", "CASE", "CAST", "CEIL",
        -:  877:			"CHARTOROWID", "CHR", "COALESCE", "COMPOSE", "CONCAT", "CONVERT", "CORR", "COS", "COSH", "COUNT", "COVAR_POP", "COVAR_SAMP", "CUME_DIST", "CURRENT_DATE",
        -:  878:			"CURRENT_TIMESTAMP", "DBTIMEZONE", "DECODE", "DECOMPOSE", "DENSE_RANK", "DUMP", "EMPTY_BLOB", "EMPTY_CLOB", "EXP", "EXTRACT", "FIRST_VALUE", "FLOOR", "FROM_TZ", "GREATEST",
        -:  879:			"GROUP_ID", "HEXTORAW", "INITCAP", "INSTR", "INSTR2", "INSTR4", "INSTRB", "INSTRC", "LAG", "LAST_DAY", "LAST_VALUE", "LEAD", "LEAST", "LENGTH", "LENGTH2", "LENGTH4",
        -:  880:			"LENGTHB", "LENGTHC", "LISTAGG", "LN", "LNNVL", "LOCALTIMESTAMP", "LOG", "LOWER", "LPAD", "LTRIM", "MAX", "MEDIAN", "MIN", "MOD", "MONTHS_BETWEEN", "NANVL", "NCHR",
        -:  881:			"NEW_TIME", "NEXT_DAY", "NTH_VALUE", "NULLIF", "NUMTODSINTERVAL", "NUMTOYMINTERVAL", "NVL", "NVL2", "POWER", "RANK", "RAWTOHEX", "REGEXP_COUNT", "REGEXP_INSTR",
        -:  882:			"REGEXP_REPLACE", "REGEXP_SUBSTR", "REMAINDER", "REPLACE", "ROUND", "ROWNUM", "RPAD", "RTRIM", "SESSIONTIMEZONE", "SIGN", "SIN", "SINH",
        -:  883:			"SOUNDEX", "SQRT", "STDDEV", "SUBSTR", "SUM", "SYS_CONTEXT", "SYSDATE", "SYSTIMESTAMP", "TAN", "TANH", "TO_CHAR", "TO_CLOB", "TO_DATE", "TO_DSINTERVAL", "TO_LOB",
        -:  884:			"TO_MULTI_BYTE", "TO_NCLOB", "TO_NUMBER", "TO_SINGLE_BYTE", "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO_YMINTERVAL", "TRANSLATE", "TRIM", "TRUNC", "TZ_OFFSET", "UID", "UPPER",
        -:  885:			"USER", "USERENV", "VAR_POP", "VAR_SAMP", "VARIANCE", "VSIZE"
        -:  886:		};
    #####:  887:		for (auto& k : identifiers)
    %%%%%:  887-block 18
    %%%%%:  887-block 31
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  888:		{
    #####:  889:			Identifier id;
    %%%%%:  889-block 19
call    0 never executed
    #####:  890:			id.mDeclaration = "Built-in function";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  891:			langDef.mIdentifiers.insert(std::make_pair(std::string(k), id));
    %%%%%:  891-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  891-block 24
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  891-block 25
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  891-block 26
call    9 never executed
call   10 never executed
    $$$$$:  891-block 109
call   11 never executed
    $$$$$:  891-block 111
call   12 never executed
    $$$$$:  891-block 115
    $$$$$:  891-block 116
    $$$$$:  891-block 117
    #####:  892:		}
    %%%%%:  892-block 29
call    0 never executed
    $$$$$:  892-block 118
call    1 never executed
        -:  893:
    #####:  894:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(L?\"(\\.|[^\"])*\")##", PaletteIndex::String));
    %%%%%:  894-block 32
    %%%%%:  894-block 34
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  894-block 35
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  894-block 37
call    7 never executed
call    8 never executed
    $$$$$:  894-block 121
call    9 never executed
    $$$$$:  894-block 123
call   10 never executed
    $$$$$:  894-block 127
    $$$$$:  894-block 128
    $$$$$:  894-block 129
    $$$$$:  894-block 130
call   11 never executed
    #####:  895:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(\'[^\']*\')##", PaletteIndex::String));
    %%%%%:  895-block 40
    %%%%%:  895-block 42
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  895-block 43
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  895-block 45
call    7 never executed
call    8 never executed
    $$$$$:  895-block 131
call    9 never executed
    $$$$$:  895-block 133
call   10 never executed
    $$$$$:  895-block 137
    $$$$$:  895-block 138
    $$$$$:  895-block 139
    $$$$$:  895-block 140
call   11 never executed
    #####:  896:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)([eE][+-]?[0-9]+)?[fF]?)##", PaletteIndex::Number));
    %%%%%:  896-block 48
    %%%%%:  896-block 50
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  896-block 51
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  896-block 53
call    7 never executed
call    8 never executed
    $$$$$:  896-block 141
call    9 never executed
    $$$$$:  896-block 143
call   10 never executed
    $$$$$:  896-block 147
    $$$$$:  896-block 148
    $$$$$:  896-block 149
    $$$$$:  896-block 150
call   11 never executed
    #####:  897:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?[0-9]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  897-block 56
    %%%%%:  897-block 58
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  897-block 59
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  897-block 61
call    7 never executed
call    8 never executed
    $$$$$:  897-block 151
call    9 never executed
    $$$$$:  897-block 153
call   10 never executed
    $$$$$:  897-block 157
    $$$$$:  897-block 158
    $$$$$:  897-block 159
    $$$$$:  897-block 160
call   11 never executed
    #####:  898:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[0-7]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  898-block 64
    %%%%%:  898-block 66
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  898-block 67
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  898-block 69
call    7 never executed
call    8 never executed
    $$$$$:  898-block 161
call    9 never executed
    $$$$$:  898-block 163
call   10 never executed
    $$$$$:  898-block 167
    $$$$$:  898-block 168
    $$$$$:  898-block 169
    $$$$$:  898-block 170
call   11 never executed
    #####:  899:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[xX][0-9a-fA-F]+[uU]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  899-block 72
    %%%%%:  899-block 74
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  899-block 75
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  899-block 77
call    7 never executed
call    8 never executed
    $$$$$:  899-block 171
call    9 never executed
    $$$$$:  899-block 173
call   10 never executed
    $$$$$:  899-block 177
    $$$$$:  899-block 178
    $$$$$:  899-block 179
    $$$$$:  899-block 180
call   11 never executed
    #####:  900:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([a-zA-Z_][a-zA-Z0-9_]*)##", PaletteIndex::Identifier));
    %%%%%:  900-block 80
    %%%%%:  900-block 82
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  900-block 83
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  900-block 85
call    7 never executed
call    8 never executed
    $$$$$:  900-block 181
call    9 never executed
    $$$$$:  900-block 183
call   10 never executed
    $$$$$:  900-block 187
    $$$$$:  900-block 188
    $$$$$:  900-block 189
    $$$$$:  900-block 190
call   11 never executed
    #####:  901:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([\[\]\{\}\!\%\^\&\*\(\)\-\+\=\~\|\<\>\?\/\;\,\.])##", PaletteIndex::Punctuation));
    %%%%%:  901-block 88
    %%%%%:  901-block 90
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  901-block 91
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  901-block 93
call    7 never executed
call    8 never executed
    $$$$$:  901-block 191
call    9 never executed
    $$$$$:  901-block 193
call   10 never executed
    $$$$$:  901-block 197
    $$$$$:  901-block 198
    $$$$$:  901-block 199
        -:  902:
    #####:  903:		langDef.mCommentStart = "/*";
    %%%%%:  903-block 96
call    0 never executed
    #####:  904:		langDef.mCommentEnd = "*/";
call    0 never executed
    #####:  905:		langDef.mSingleLineComment = "--";
call    0 never executed
        -:  906:
    #####:  907:		langDef.mCaseSensitive = false;
        -:  908:
    #####:  909:		langDef.mName = "SQL";
call    0 never executed
        -:  910:
    #####:  911:		inited = true;
        -:  912:	}
    #####:  913:	return langDef;
    %%%%%:  913-block 101
    %%%%%:  913-block 102
        -:  914:}
        -:  915:
function _ZN10TextEditor18LanguageDefinition11AngelScriptEv called 0 returned 0% blocks executed 0%
    #####:  916:const TextEditor::LanguageDefinition& TextEditor::LanguageDefinition::AngelScript()
        -:  917:{
        -:  918:	static bool inited = false;
    #####:  919:	static LanguageDefinition langDef;
    %%%%%:  919-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  919-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  919-block 5
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  920:	if (!inited)
    %%%%%:  920-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  921:	{
        -:  922:		static const char* const keywords[] = {
        -:  923:			"and", "abstract", "auto", "bool", "break", "case", "cast", "class", "const", "continue", "default", "do", "double", "else", "enum", "false", "final", "float", "for",
        -:  924:			"from", "funcdef", "function", "get", "if", "import", "in", "inout", "int", "interface", "int8", "int16", "int32", "int64", "is", "mixin", "namespace", "not",
        -:  925:			"null", "or", "out", "override", "private", "protected", "return", "set", "shared", "super", "switch", "this ", "true", "typedef", "uint", "uint8", "uint16", "uint32",
        -:  926:			"uint64", "void", "while", "xor"
        -:  927:		};
        -:  928:
    #####:  929:		for (auto& k : keywords)
    %%%%%:  929-block 9
    %%%%%:  929-block 10
    %%%%%:  929-block 17
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  930:			langDef.mKeywords.insert(k);
    %%%%%:  930-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  930-block 13
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  930-block 14
call    6 never executed
    %%%%%:  930-block 16
    $$$$$:  930-block 103
call    7 never executed
    $$$$$:  930-block 107
    $$$$$:  930-block 108
call    8 never executed
        -:  931:
        -:  932:		static const char* const identifiers[] = {
        -:  933:			"cos", "sin", "tab", "acos", "asin", "atan", "atan2", "cosh", "sinh", "tanh", "log", "log10", "pow", "sqrt", "abs", "ceil", "floor", "fraction", "closeTo", "fpFromIEEE", "fpToIEEE",
        -:  934:			"complex", "opEquals", "opAddAssign", "opSubAssign", "opMulAssign", "opDivAssign", "opAdd", "opSub", "opMul", "opDiv"
        -:  935:		};
    #####:  936:		for (auto& k : identifiers)
    %%%%%:  936-block 18
    %%%%%:  936-block 31
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  937:		{
    #####:  938:			Identifier id;
    %%%%%:  938-block 19
call    0 never executed
    #####:  939:			id.mDeclaration = "Built-in function";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  940:			langDef.mIdentifiers.insert(std::make_pair(std::string(k), id));
    %%%%%:  940-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  940-block 24
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  940-block 25
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  940-block 26
call    9 never executed
call   10 never executed
    $$$$$:  940-block 109
call   11 never executed
    $$$$$:  940-block 111
call   12 never executed
    $$$$$:  940-block 115
    $$$$$:  940-block 116
    $$$$$:  940-block 117
    #####:  941:		}
    %%%%%:  941-block 29
call    0 never executed
    $$$$$:  941-block 118
call    1 never executed
        -:  942:
    #####:  943:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(L?\"(\\.|[^\"])*\")##", PaletteIndex::String));
    %%%%%:  943-block 32
    %%%%%:  943-block 34
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  943-block 35
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  943-block 37
call    7 never executed
call    8 never executed
    $$$$$:  943-block 121
call    9 never executed
    $$$$$:  943-block 123
call   10 never executed
    $$$$$:  943-block 127
    $$$$$:  943-block 128
    $$$$$:  943-block 129
    $$$$$:  943-block 130
call   11 never executed
    #####:  944:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(\'\\?[^\']\')##", PaletteIndex::String));
    %%%%%:  944-block 40
    %%%%%:  944-block 42
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  944-block 43
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  944-block 45
call    7 never executed
call    8 never executed
    $$$$$:  944-block 131
call    9 never executed
    $$$$$:  944-block 133
call   10 never executed
    $$$$$:  944-block 137
    $$$$$:  944-block 138
    $$$$$:  944-block 139
    $$$$$:  944-block 140
call   11 never executed
    #####:  945:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)([eE][+-]?[0-9]+)?[fF]?)##", PaletteIndex::Number));
    %%%%%:  945-block 48
    %%%%%:  945-block 50
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  945-block 51
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  945-block 53
call    7 never executed
call    8 never executed
    $$$$$:  945-block 141
call    9 never executed
    $$$$$:  945-block 143
call   10 never executed
    $$$$$:  945-block 147
    $$$$$:  945-block 148
    $$$$$:  945-block 149
    $$$$$:  945-block 150
call   11 never executed
    #####:  946:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?[0-9]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  946-block 56
    %%%%%:  946-block 58
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  946-block 59
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  946-block 61
call    7 never executed
call    8 never executed
    $$$$$:  946-block 151
call    9 never executed
    $$$$$:  946-block 153
call   10 never executed
    $$$$$:  946-block 157
    $$$$$:  946-block 158
    $$$$$:  946-block 159
    $$$$$:  946-block 160
call   11 never executed
    #####:  947:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[0-7]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  947-block 64
    %%%%%:  947-block 66
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  947-block 67
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  947-block 69
call    7 never executed
call    8 never executed
    $$$$$:  947-block 161
call    9 never executed
    $$$$$:  947-block 163
call   10 never executed
    $$$$$:  947-block 167
    $$$$$:  947-block 168
    $$$$$:  947-block 169
    $$$$$:  947-block 170
call   11 never executed
    #####:  948:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[xX][0-9a-fA-F]+[uU]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%:  948-block 72
    %%%%%:  948-block 74
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  948-block 75
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  948-block 77
call    7 never executed
call    8 never executed
    $$$$$:  948-block 171
call    9 never executed
    $$$$$:  948-block 173
call   10 never executed
    $$$$$:  948-block 177
    $$$$$:  948-block 178
    $$$$$:  948-block 179
    $$$$$:  948-block 180
call   11 never executed
    #####:  949:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([a-zA-Z_][a-zA-Z0-9_]*)##", PaletteIndex::Identifier));
    %%%%%:  949-block 80
    %%%%%:  949-block 82
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  949-block 83
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  949-block 85
call    7 never executed
call    8 never executed
    $$$$$:  949-block 181
call    9 never executed
    $$$$$:  949-block 183
call   10 never executed
    $$$$$:  949-block 187
    $$$$$:  949-block 188
    $$$$$:  949-block 189
    $$$$$:  949-block 190
call   11 never executed
    #####:  950:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([\[\]\{\}\!\%\^\&\*\(\)\-\+\=\~\|\<\>\?\/\;\,\.])##", PaletteIndex::Punctuation));
    %%%%%:  950-block 88
    %%%%%:  950-block 90
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  950-block 91
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  950-block 93
call    7 never executed
call    8 never executed
    $$$$$:  950-block 191
call    9 never executed
    $$$$$:  950-block 193
call   10 never executed
    $$$$$:  950-block 197
    $$$$$:  950-block 198
    $$$$$:  950-block 199
        -:  951:
    #####:  952:		langDef.mCommentStart = "/*";
    %%%%%:  952-block 96
call    0 never executed
    #####:  953:		langDef.mCommentEnd = "*/";
call    0 never executed
    #####:  954:		langDef.mSingleLineComment = "//";
call    0 never executed
        -:  955:
    #####:  956:		langDef.mCaseSensitive = true;
        -:  957:
    #####:  958:		langDef.mName = "AngelScript";
call    0 never executed
        -:  959:
    #####:  960:		inited = true;
        -:  961:	}
    #####:  962:	return langDef;
    %%%%%:  962-block 101
    %%%%%:  962-block 102
        -:  963:}
        -:  964:
function _ZN10TextEditor18LanguageDefinition3LuaEv called 0 returned 0% blocks executed 0%
    #####:  965:const TextEditor::LanguageDefinition& TextEditor::LanguageDefinition::Lua()
        -:  966:{
        -:  967:	static bool inited = false;
    #####:  968:	static LanguageDefinition langDef;
    %%%%%:  968-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  968-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  968-block 5
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  969:	if (!inited)
    %%%%%:  969-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  970:	{
        -:  971:		static const char* const keywords[] = {
        -:  972:			"and", "break", "do", "else", "elseif", "end", "false", "for", "function", "goto", "if", "in", "local", "nil", "not", "or", "repeat", "return", "then", "true", "until", "while"
        -:  973:		};
        -:  974:
    #####:  975:		for (auto& k : keywords)
    %%%%%:  975-block 9
    %%%%%:  975-block 10
    %%%%%:  975-block 17
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  976:			langDef.mKeywords.insert(k);
    %%%%%:  976-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  976-block 13
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  976-block 14
call    6 never executed
    %%%%%:  976-block 16
    $$$$$:  976-block 40
call    7 never executed
    $$$$$:  976-block 44
    $$$$$:  976-block 45
call    8 never executed
        -:  977:
        -:  978:		static const char* const identifiers[] = {
        -:  979:			"assert", "collectgarbage", "dofile", "error", "getmetatable", "ipairs", "loadfile", "load", "loadstring", "next", "pairs", "pcall", "print", "rawequal", "rawlen", "rawget", "rawset",
        -:  980:			"select", "setmetatable", "tonumber", "tostring", "type", "xpcall", "_G", "_VERSION","arshift", "band", "bnot", "bor", "bxor", "btest", "extract", "lrotate", "lshift", "replace",
        -:  981:			"rrotate", "rshift", "create", "resume", "running", "status", "wrap", "yield", "isyieldable", "debug","getuservalue", "gethook", "getinfo", "getlocal", "getregistry", "getmetatable",
        -:  982:			"getupvalue", "upvaluejoin", "upvalueid", "setuservalue", "sethook", "setlocal", "setmetatable", "setupvalue", "traceback", "close", "flush", "input", "lines", "open", "output", "popen",
        -:  983:			"read", "tmpfile", "type", "write", "close", "flush", "lines", "read", "seek", "setvbuf", "write", "__gc", "__tostring", "abs", "acos", "asin", "atan", "ceil", "cos", "deg", "exp", "tointeger",
        -:  984:			"floor", "fmod", "ult", "log", "max", "min", "modf", "rad", "random", "randomseed", "sin", "sqrt", "string", "tan", "type", "atan2", "cosh", "sinh", "tanh",
        -:  985:			"pow", "frexp", "ldexp", "log10", "pi", "huge", "maxinteger", "mininteger", "loadlib", "searchpath", "seeall", "preload", "cpath", "path", "searchers", "loaded", "module", "require", "clock",
        -:  986:			"date", "difftime", "execute", "exit", "getenv", "remove", "rename", "setlocale", "time", "tmpname", "byte", "char", "dump", "find", "format", "gmatch", "gsub", "len", "lower", "match", "rep",
        -:  987:			"reverse", "sub", "upper", "pack", "packsize", "unpack", "concat", "maxn", "insert", "pack", "unpack", "remove", "move", "sort", "offset", "codepoint", "char", "len", "codes", "charpattern",
        -:  988:			"coroutine", "table", "io", "os", "string", "utf8", "bit32", "math", "debug", "package"
        -:  989:		};
    #####:  990:		for (auto& k : identifiers)
    %%%%%:  990-block 18
    %%%%%:  990-block 31
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  991:		{
    #####:  992:			Identifier id;
    %%%%%:  992-block 19
call    0 never executed
    #####:  993:			id.mDeclaration = "Built-in function";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  994:			langDef.mIdentifiers.insert(std::make_pair(std::string(k), id));
    %%%%%:  994-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  994-block 24
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  994-block 25
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  994-block 26
call    9 never executed
call   10 never executed
    $$$$$:  994-block 46
call   11 never executed
    $$$$$:  994-block 48
call   12 never executed
    $$$$$:  994-block 52
    $$$$$:  994-block 53
    $$$$$:  994-block 54
    #####:  995:		}
    %%%%%:  995-block 29
call    0 never executed
    $$$$$:  995-block 55
call    1 never executed
        -:  996:
function _ZZN10TextEditor18LanguageDefinition3LuaEvENKUlPKcS2_RS2_S3_RNS_12PaletteIndexEE_clES2_S2_S3_S3_S5_ called 0 returned 0% blocks executed 0%
    #####:  997:		langDef.mTokenize = [](const char* in_begin, const char* in_end, const char*& out_begin, const char*& out_end, PaletteIndex& paletteIndex) -> bool
    %%%%%:  997-block 32
call    0 never executed
        -:  998:		{
    #####:  999:			paletteIndex = PaletteIndex::Max;
        -: 1000:
    #####: 1001:			while (in_begin < in_end && isascii(*in_begin) && isblank(*in_begin))
    %%%%%: 1001-block 2
    %%%%%: 1001-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1001-block 5
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1001-block 6
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 1002:				in_begin++;
    %%%%%: 1002-block 3
        -: 1003:
    #####: 1004:			if (in_begin == in_end)
    %%%%%: 1004-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1005:			{
    #####: 1006:				out_begin = in_end;
    #####: 1007:				out_end = in_end;
    #####: 1008:				paletteIndex = PaletteIndex::Default;
    %%%%%: 1008-block 8
        -: 1009:			}
    #####: 1010:			else if (TokenizeLuaStyleString(in_begin, in_end, out_begin, out_end))
    %%%%%: 1010-block 9
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1011:				paletteIndex = PaletteIndex::String;
    %%%%%: 1011-block 11
    #####: 1012:			else if (TokenizeLuaStyleIdentifier(in_begin, in_end, out_begin, out_end))
    %%%%%: 1012-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1013:				paletteIndex = PaletteIndex::Identifier;
    %%%%%: 1013-block 14
    #####: 1014:			else if (TokenizeLuaStyleNumber(in_begin, in_end, out_begin, out_end))
    %%%%%: 1014-block 15
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1015:				paletteIndex = PaletteIndex::Number;
    %%%%%: 1015-block 17
    #####: 1016:			else if (TokenizeLuaStylePunctuation(in_begin, in_end, out_begin, out_end))
    %%%%%: 1016-block 18
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1017:				paletteIndex = PaletteIndex::Punctuation;
    %%%%%: 1017-block 20
        -: 1018:
    #####: 1019:			return paletteIndex != PaletteIndex::Max;
    %%%%%: 1019-block 21
        -: 1020:		};
        -: 1021:
    #####: 1022:		langDef.mCommentStart = "--[[";
call    0 never executed
    #####: 1023:		langDef.mCommentEnd = "]]";
call    0 never executed
    #####: 1024:		langDef.mSingleLineComment = "--";
call    0 never executed
        -: 1025:
    #####: 1026:		langDef.mCaseSensitive = true;
        -: 1027:
    #####: 1028:		langDef.mName = "Lua";
call    0 never executed
        -: 1029:
    #####: 1030:		inited = true;
        -: 1031:	}
    #####: 1032:	return langDef;
    %%%%%: 1032-block 38
    %%%%%: 1032-block 39
        -: 1033:}
        -: 1034:
function _ZN10TextEditor18LanguageDefinition2CsEv called 0 returned 0% blocks executed 0%
    #####: 1035:const TextEditor::LanguageDefinition& TextEditor::LanguageDefinition::Cs()
        -: 1036:{
        -: 1037:	static bool inited = false;
    #####: 1038:	static LanguageDefinition langDef;
    %%%%%: 1038-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1038-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1038-block 5
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1039:	if (!inited)
    %%%%%: 1039-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1040:	{
        -: 1041:		static const char* const keywords[] = {
        -: 1042:			"abstract", "as", "base", "bool", "break", "byte", "case", "catch", "char", "checked", "class", "const", "continue", "decimal", "default", "delegate", "do", "double", "else", "enum", "event", "explicit", "extern", "false", "finally", "fixed", "float", "for", "foreach", "goto", "if", "implicit", "in", "in (generic modifier)", "int", "interface", "internal", "is", "lock", "long", "namespace", "new", "null", "object", "operator", "out", "out (generic modifier)", "override", "params", "private", "protected", "public", "readonly", "ref", "return", "sbyte", "sealed", "short", "sizeof", "stackalloc", "static", "string", "struct", "switch", "this", "throw", "true", "try", "typeof", "uint", "ulong", "unchecked", "unsafe", "ushort", "using", "using static", "void", "volatile", "while"
        -: 1043:		};
    #####: 1044:		for (auto& k : keywords)
    %%%%%: 1044-block 9
    %%%%%: 1044-block 10
    %%%%%: 1044-block 17
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1045:			langDef.mKeywords.insert(k);
    %%%%%: 1045-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1045-block 13
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1045-block 14
call    6 never executed
    %%%%%: 1045-block 16
    $$$$$: 1045-block 95
call    7 never executed
    $$$$$: 1045-block 99
    $$$$$: 1045-block 100
call    8 never executed
        -: 1046:
        -: 1047:		static const char* const identifiers[] = {
        -: 1048:			"add", "alias", "ascending", "async", "await", "descending", "dynamic", "from", "get", "global", "group", "into", "join", "let", "orderby", "partial", "remove", "select", "set", "value", "var", "when", "where", "yield"
        -: 1049:		};
    #####: 1050:		for (auto& k : identifiers)
    %%%%%: 1050-block 18
    %%%%%: 1050-block 31
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1051:		{
    #####: 1052:			Identifier id;
    %%%%%: 1052-block 19
call    0 never executed
    #####: 1053:			id.mDeclaration = "Built-in function";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1054:			langDef.mIdentifiers.insert(std::make_pair(std::string(k), id));
    %%%%%: 1054-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1054-block 24
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1054-block 25
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1054-block 26
call    9 never executed
call   10 never executed
    $$$$$: 1054-block 101
call   11 never executed
    $$$$$: 1054-block 103
call   12 never executed
    $$$$$: 1054-block 107
    $$$$$: 1054-block 108
    $$$$$: 1054-block 109
    #####: 1055:		}
    %%%%%: 1055-block 29
call    0 never executed
    $$$$$: 1055-block 110
call    1 never executed
    #####: 1056:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(($|@)?\"(\\.|[^\"])*\")##", PaletteIndex::String));
    %%%%%: 1056-block 32
    %%%%%: 1056-block 34
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1056-block 35
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1056-block 37
call    7 never executed
call    8 never executed
    $$$$$: 1056-block 113
call    9 never executed
    $$$$$: 1056-block 115
call   10 never executed
    $$$$$: 1056-block 119
    $$$$$: 1056-block 120
    $$$$$: 1056-block 121
    $$$$$: 1056-block 122
call   11 never executed
    #####: 1057:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)([eE][+-]?[0-9]+)?[fF]?)##", PaletteIndex::Number));
    %%%%%: 1057-block 40
    %%%%%: 1057-block 42
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1057-block 43
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1057-block 45
call    7 never executed
call    8 never executed
    $$$$$: 1057-block 123
call    9 never executed
    $$$$$: 1057-block 125
call   10 never executed
    $$$$$: 1057-block 129
    $$$$$: 1057-block 130
    $$$$$: 1057-block 131
    $$$$$: 1057-block 132
call   11 never executed
    #####: 1058:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?[0-9]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%: 1058-block 48
    %%%%%: 1058-block 50
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1058-block 51
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1058-block 53
call    7 never executed
call    8 never executed
    $$$$$: 1058-block 133
call    9 never executed
    $$$$$: 1058-block 135
call   10 never executed
    $$$$$: 1058-block 139
    $$$$$: 1058-block 140
    $$$$$: 1058-block 141
    $$$$$: 1058-block 142
call   11 never executed
    #####: 1059:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[0-7]+[Uu]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%: 1059-block 56
    %%%%%: 1059-block 58
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1059-block 59
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1059-block 61
call    7 never executed
call    8 never executed
    $$$$$: 1059-block 143
call    9 never executed
    $$$$$: 1059-block 145
call   10 never executed
    $$$$$: 1059-block 149
    $$$$$: 1059-block 150
    $$$$$: 1059-block 151
    $$$$$: 1059-block 152
call   11 never executed
    #####: 1060:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(0[xX][0-9a-fA-F]+[uU]?[lL]?[lL]?)##", PaletteIndex::Number));
    %%%%%: 1060-block 64
    %%%%%: 1060-block 66
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1060-block 67
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1060-block 69
call    7 never executed
call    8 never executed
    $$$$$: 1060-block 153
call    9 never executed
    $$$$$: 1060-block 155
call   10 never executed
    $$$$$: 1060-block 159
    $$$$$: 1060-block 160
    $$$$$: 1060-block 161
    $$$$$: 1060-block 162
call   11 never executed
    #####: 1061:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([a-zA-Z_][a-zA-Z0-9_]*)##", PaletteIndex::Identifier));
    %%%%%: 1061-block 72
    %%%%%: 1061-block 74
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1061-block 75
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1061-block 77
call    7 never executed
call    8 never executed
    $$$$$: 1061-block 163
call    9 never executed
    $$$$$: 1061-block 165
call   10 never executed
    $$$$$: 1061-block 169
    $$$$$: 1061-block 170
    $$$$$: 1061-block 171
    $$$$$: 1061-block 172
call   11 never executed
    #####: 1062:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([\[\]\{\}\!\%\^\&\*\(\)\-\+\=\~\|\<\>\?\/\;\,\.])##", PaletteIndex::Punctuation));
    %%%%%: 1062-block 80
    %%%%%: 1062-block 82
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1062-block 83
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1062-block 85
call    7 never executed
call    8 never executed
    $$$$$: 1062-block 173
call    9 never executed
    $$$$$: 1062-block 175
call   10 never executed
    $$$$$: 1062-block 179
    $$$$$: 1062-block 180
    $$$$$: 1062-block 181
        -: 1063:
    #####: 1064:		langDef.mCommentStart = "/*";
    %%%%%: 1064-block 88
call    0 never executed
    #####: 1065:		langDef.mCommentEnd = "*/";
call    0 never executed
    #####: 1066:		langDef.mSingleLineComment = "//";
call    0 never executed
        -: 1067:
    #####: 1068:		langDef.mCaseSensitive = true;
        -: 1069:
    #####: 1070:		langDef.mName = "C#";
call    0 never executed
        -: 1071:
    #####: 1072:		inited = true;
        -: 1073:	}
    #####: 1074:	return langDef;
    %%%%%: 1074-block 93
    %%%%%: 1074-block 94
        -: 1075:}
        -: 1076:
function _ZN10TextEditor18LanguageDefinition4JsonEv called 0 returned 0% blocks executed 0%
    #####: 1077:const TextEditor::LanguageDefinition& TextEditor::LanguageDefinition::Json()
        -: 1078:{
        -: 1079:	static bool inited = false;
    #####: 1080:	static LanguageDefinition langDef;
    %%%%%: 1080-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1080-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1080-block 5
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1081:	if (!inited)
    %%%%%: 1081-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1082:	{
    #####: 1083:		langDef.mKeywords.clear();
    %%%%%: 1083-block 9
call    0 never executed
    #####: 1084:		langDef.mIdentifiers.clear();
call    0 never executed
        -: 1085:
        -: 1086:		
    #####: 1087:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(\"(\\.|[^\"])*\")##", PaletteIndex::String));
    %%%%%: 1087-block 13
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1087-block 14
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1087-block 16
call    7 never executed
call    8 never executed
    $$$$$: 1087-block 50
call    9 never executed
    $$$$$: 1087-block 52
call   10 never executed
    $$$$$: 1087-block 56
    $$$$$: 1087-block 57
    $$$$$: 1087-block 58
    $$$$$: 1087-block 59
call   11 never executed
    #####: 1088:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)([eE][+-]?[0-9]+)?)##", PaletteIndex::Number));
    %%%%%: 1088-block 19
    %%%%%: 1088-block 21
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1088-block 22
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1088-block 24
call    7 never executed
call    8 never executed
    $$$$$: 1088-block 60
call    9 never executed
    $$$$$: 1088-block 62
call   10 never executed
    $$$$$: 1088-block 66
    $$$$$: 1088-block 67
    $$$$$: 1088-block 68
    $$$$$: 1088-block 69
call   11 never executed
    #####: 1089:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##([\[\]\{\}\!\%\^\&\*\(\)\-\+\=\~\|\<\>\?\/\;\,\.\:])##", PaletteIndex::Punctuation));
    %%%%%: 1089-block 27
    %%%%%: 1089-block 29
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1089-block 30
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1089-block 32
call    7 never executed
call    8 never executed
    $$$$$: 1089-block 70
call    9 never executed
    $$$$$: 1089-block 72
call   10 never executed
    $$$$$: 1089-block 76
    $$$$$: 1089-block 77
    $$$$$: 1089-block 78
    $$$$$: 1089-block 79
call   11 never executed
    #####: 1090:		langDef.mTokenRegexStrings.push_back(std::make_pair<std::string, PaletteIndex>(R"##(false|true)##", PaletteIndex::Keyword));
    %%%%%: 1090-block 35
    %%%%%: 1090-block 37
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1090-block 38
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1090-block 40
call    7 never executed
call    8 never executed
    $$$$$: 1090-block 80
call    9 never executed
    $$$$$: 1090-block 82
call   10 never executed
    $$$$$: 1090-block 86
    $$$$$: 1090-block 87
    $$$$$: 1090-block 88
        -: 1091:
    #####: 1092:		langDef.mCommentStart = "/*";
    %%%%%: 1092-block 43
call    0 never executed
    #####: 1093:		langDef.mCommentEnd = "*/";
call    0 never executed
    #####: 1094:		langDef.mSingleLineComment = "//";
call    0 never executed
        -: 1095:
    #####: 1096:		langDef.mCaseSensitive = true;
        -: 1097:
    #####: 1098:		langDef.mName = "Json";
call    0 never executed
        -: 1099:
    #####: 1100:		inited = true;
        -: 1101:	}
    #####: 1102:	return langDef;
    %%%%%: 1102-block 48
    %%%%%: 1102-block 49
        -: 1103:}
