        -:    0:Source:/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/vendor/regex/include/boost/regex/v5/basic_regex_parser.hpp
        -:    0:Graph:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcno
        -:    0:Data:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: *
        -:    3: * Copyright (c) 2004
        -:    4: * John Maddock
        -:    5: *
        -:    6: * Use, modification and distribution are subject to the 
        -:    7: * Boost Software License, Version 1.0. (See accompanying file 
        -:    8: * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9: *
        -:   10: */
        -:   11:
        -:   12: /*
        -:   13:  *   LOCATION:    see http://www.boost.org for most recent version.
        -:   14:  *   FILE         basic_regex_parser.cpp
        -:   15:  *   VERSION      see <boost/version.hpp>
        -:   16:  *   DESCRIPTION: Declares template class basic_regex_parser.
        -:   17:  */
        -:   18:
        -:   19:#ifndef BOOST_REGEX_V5_BASIC_REGEX_PARSER_HPP
        -:   20:#define BOOST_REGEX_V5_BASIC_REGEX_PARSER_HPP
        -:   21:
        -:   22:namespace boost{
        -:   23:namespace BOOST_REGEX_DETAIL_NS{
        -:   24:
        -:   25:#ifdef BOOST_REGEX_MSVC
        -:   26:#pragma warning(push)
        -:   27:#pragma warning(disable:4244 4459)
        -:   28:#if BOOST_REGEX_MSVC < 1910
        -:   29:#pragma warning(disable:4800)
        -:   30:#endif
        -:   31:#endif
        -:   32:
function _ZN5boost13re_detail_5004umaxERKSt17integral_constantIbLb0EE called 2 returned 100% blocks executed 100%
        2:   33:inline std::intmax_t umax(std::integral_constant<bool, false> const&)
        -:   34:{
        -:   35:   // Get out clause here, just in case numeric_limits is unspecialized:
        2:   36:   return std::numeric_limits<std::intmax_t>::is_specialized ? (std::numeric_limits<std::intmax_t>::max)() : INT_MAX;
        2:   36-block 2
call    0 returned 2
        -:   37:}
        -:   38:inline std::intmax_t umax(std::integral_constant<bool, true> const&)
        -:   39:{
        -:   40:   return (std::numeric_limits<std::size_t>::max)();
        -:   41:}
        -:   42:
function _ZN5boost13re_detail_5004umaxEv called 2 returned 100% blocks executed 100%
        2:   43:inline std::intmax_t umax()
        -:   44:{
        2:   45:   return umax(std::integral_constant<bool, std::numeric_limits<std::intmax_t>::digits >= std::numeric_limits<std::size_t>::digits>());
        2:   45-block 2
call    0 returned 2
        -:   46:}
        -:   47:
        -:   48:template <class charT, class traits>
        -:   49:class basic_regex_parser : public basic_regex_creator<charT, traits>
        -:   50:{
        -:   51:public:
        -:   52:   basic_regex_parser(regex_data<charT, traits>* data);
        -:   53:   void parse(const charT* p1, const charT* p2, unsigned flags);
        -:   54:   void fail(regex_constants::error_type error_code, std::ptrdiff_t position);
        -:   55:   void fail(regex_constants::error_type error_code, std::ptrdiff_t position, std::string message, std::ptrdiff_t start_pos);
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE4failENS_15regex_constants10error_typeElRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   56:   void fail(regex_constants::error_type error_code, std::ptrdiff_t position, const std::string& message)
        -:   57:   {
    #####:   58:      fail(error_code, position, message, position);
    %%%%%:   58-block 2
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   58-block 3
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:   58-block 4
call    6 never executed
    $$$$$:   58-block 6
call    7 never executed
    #####:   59:   }
        -:   60:
        -:   61:   bool parse_all();
        -:   62:   bool parse_basic();
        -:   63:   bool parse_extended();
        -:   64:   bool parse_literal();
        -:   65:   bool parse_open_paren();
        -:   66:   bool parse_basic_escape();
        -:   67:   bool parse_extended_escape();
        -:   68:   bool parse_match_any();
        -:   69:   bool parse_repeat(std::size_t low = 0, std::size_t high = (std::numeric_limits<std::size_t>::max)());
        -:   70:   bool parse_repeat_range(bool isbasic);
        -:   71:   bool parse_alt();
        -:   72:   bool parse_set();
        -:   73:   bool parse_backref();
        -:   74:   void parse_set_literal(basic_char_set<charT, traits>& char_set);
        -:   75:   bool parse_inner_set(basic_char_set<charT, traits>& char_set);
        -:   76:   bool parse_QE();
        -:   77:   bool parse_perl_extension();
        -:   78:   bool parse_perl_verb();
        -:   79:   bool match_verb(const char*);
        -:   80:   bool add_emacs_code(bool negate);
        -:   81:   bool unwind_alts(std::ptrdiff_t last_paren_start);
        -:   82:   digraph<charT> get_next_set_literal(basic_char_set<charT, traits>& char_set);
        -:   83:   charT unescape_character();
        -:   84:   regex_constants::syntax_option_type parse_options();
        -:   85:
        -:   86:private:
        -:   87:   typedef bool (basic_regex_parser::*parser_proc_type)();
        -:   88:   typedef typename traits::string_type string_type;
        -:   89:   typedef typename traits::char_class_type char_class_type;
        -:   90:   parser_proc_type           m_parser_proc;    // the main parser to use
        -:   91:   const charT*               m_base;           // the start of the string being parsed
        -:   92:   const charT*               m_end;            // the end of the string being parsed
        -:   93:   const charT*               m_position;       // our current parser position
        -:   94:   unsigned                   m_mark_count;     // how many sub-expressions we have
        -:   95:   int                        m_mark_reset;     // used to indicate that we're inside a (?|...) block.
        -:   96:   unsigned                   m_max_mark;       // largest mark count seen inside a (?|...) block.
        -:   97:   std::ptrdiff_t             m_paren_start;    // where the last seen ')' began (where repeats are inserted).
        -:   98:   std::ptrdiff_t             m_alt_insert_point; // where to insert the next alternative
        -:   99:   bool                       m_has_case_change; // true if somewhere in the current block the case has changed
        -:  100:   unsigned                   m_recursion_count; // How many times we've called parse_all.
        -:  101:   unsigned                   m_max_backref;     // Largest index of any backref.
        -:  102:#if defined(BOOST_REGEX_MSVC) && defined(_M_IX86)
        -:  103:   // This is an ugly warning suppression workaround (for warnings *inside* std::vector
        -:  104:   // that can not otherwise be suppressed)...
        -:  105:   static_assert(sizeof(long) >= sizeof(void*), "Long isn't long enough!");
        -:  106:   std::vector<long>           m_alt_jumps;      // list of alternative in the current scope.
        -:  107:#else
        -:  108:   std::vector<std::ptrdiff_t> m_alt_jumps;      // list of alternative in the current scope.
        -:  109:#endif
        -:  110:
        -:  111:   basic_regex_parser& operator=(const basic_regex_parser&);
        -:  112:   basic_regex_parser(const basic_regex_parser&);
        -:  113:};
        -:  114:
        -:  115:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEEC2EPNS0_10regex_dataIcS5_EE called 1 returned 100% blocks executed 100%
        1:  116:basic_regex_parser<charT, traits>::basic_regex_parser(regex_data<charT, traits>* data)
        1:  117:   : basic_regex_creator<charT, traits>(data), m_parser_proc(), m_base(0), m_end(0), m_position(0), 
        1:  118:   m_mark_count(0), m_mark_reset(-1), m_max_mark(0), m_paren_start(0), m_alt_insert_point(0), m_has_case_change(false), m_recursion_count(0), m_max_backref(0)
        1:  118-block 2
call    0 returned 1
call    1 returned 1
        -:  119:{
        1:  120:}
        -:  121:
        -:  122:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE5parseEPKcS8_j called 1 returned 100% blocks executed 21%
        1:  123:void basic_regex_parser<charT, traits>::parse(const charT* p1, const charT* p2, unsigned l_flags)
        -:  124:{
        -:  125:   // pass l_flags on to base class:
        1:  126:   this->init(l_flags);
        1:  126-block 2
call    0 returned 1
        -:  127:   // set up pointers:
        1:  128:   m_position = m_base = p1;
        1:  129:   m_end = p2;
        -:  130:   // empty strings are errors:
       1*:  131:   if((p1 == p2) && 
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  132:      (
    #####:  133:         ((l_flags & regbase::main_option_type) != regbase::perl_syntax_group)
    %%%%%:  133-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  134:         || (l_flags & regbase::no_empty_expressions)
    %%%%%:  134-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  135:      )
        -:  136:     )
        -:  137:   {
    #####:  138:      fail(regex_constants::error_empty, 0);
    %%%%%:  138-block 6
call    0 never executed
    #####:  139:      return;
        -:  140:   }
        -:  141:   // select which parser to use:
        1:  142:   switch(l_flags & regbase::main_option_type)
        1:  142-block 8
branch  0 taken 1
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
        -:  143:   {
        1:  144:   case regbase::perl_syntax_group:
        -:  145:      {
        1:  146:         m_parser_proc = &basic_regex_parser<charT, traits>::parse_extended;
        -:  147:         //
        -:  148:         // Add a leading paren with index zero to give recursions a target:
        -:  149:         //
        1:  150:         re_brace* br = static_cast<re_brace*>(this->append_state(syntax_element_startmark, sizeof(re_brace)));
        1:  150-block 9
call    0 returned 1
        1:  151:         br->index = 0;
        1:  152:         br->icase = this->flags() & regbase::icase;
call    0 returned 1
        1:  153:         break;
        -:  154:      }
    #####:  155:   case regbase::basic_syntax_group:
    #####:  156:      m_parser_proc = &basic_regex_parser<charT, traits>::parse_basic;
    #####:  157:      break;
    %%%%%:  157-block 12
    #####:  158:   case regbase::literal:
    #####:  159:      m_parser_proc = &basic_regex_parser<charT, traits>::parse_literal;
    #####:  160:      break;
    %%%%%:  160-block 13
    #####:  161:   default:
    %%%%%:  161-block 14
        -:  162:      // Oops, someone has managed to set more than one of the main option flags, 
        -:  163:      // so this must be an error:
    #####:  164:      fail(regex_constants::error_unknown, 0, "An invalid combination of regular expression syntax flags was used.");
    %%%%%:  164-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  164-block 17
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  164-block 18
call    6 never executed
    $$$$$:  164-block 56
call    7 never executed
    $$$$$:  164-block 60
    $$$$$:  164-block 61
call    8 never executed
    #####:  165:      return;
    %%%%%:  165-block 20
        -:  166:   }
        -:  167:
        -:  168:   // parse all our characters:
        1:  169:   bool result = parse_all();
        1:  169-block 21
call    0 returned 1
        -:  170:   //
        -:  171:   // Unwind our alternatives:
        -:  172:   //
        1:  173:   unwind_alts(-1);
call    0 returned 1
        -:  174:   // reset l_flags as a global scope (?imsx) may have altered them:
        1:  175:   this->flags(l_flags);
call    0 returned 1
        -:  176:   // if we haven't gobbled up all the characters then we must
        -:  177:   // have had an unexpected ')' :
        1:  178:   if(!result)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  179:   {
    #####:  180:      fail(regex_constants::error_paren, std::distance(m_base, m_position), "Found a closing ) with no corresponding opening parenthesis.");
    %%%%%:  180-block 27
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  180-block 28
    %%%%%:  180-block 34
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  180-block 35
call    6 never executed
    $$$$$:  180-block 62
call    7 never executed
    $$$$$:  180-block 66
    $$$$$:  180-block 67
call    8 never executed
    #####:  181:      return;
    %%%%%:  181-block 37
        -:  182:   }
        -:  183:   // if an error has been set then give up now:
        1:  184:   if(this->m_pdata->m_status)
        1:  184-block 38
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  185:      return;
    %%%%%:  185-block 39
        -:  186:   // fill in our sub-expression count:
        1:  187:   this->m_pdata->m_mark_count = 1u + (std::size_t)m_mark_count;
        -:  188:   //
        -:  189:   // Check we don't have backreferences to sub-expressions which don't exist:
        -:  190:   //
        1:  191:   if (m_max_backref > m_mark_count)
        1:  191-block 40
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  192:   {
    #####:  193:      fail(regex_constants::error_backref, std::distance(m_base, m_position), "Found a backreference to a non-existant sub-expression.");
    %%%%%:  193-block 43
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  193-block 44
    %%%%%:  193-block 50
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  193-block 51
call    6 never executed
    %%%%%:  193-block 53
    $$$$$:  193-block 68
call    7 never executed
    $$$$$:  193-block 72
        -:  194:   }
        1:  195:   this->finalize(p1, p2);
        1:  195-block 54
call    0 returned 1
        -:  196:}
        -:  197:
        -:  198:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE4failENS_15regex_constants10error_typeEl called 0 returned 0% blocks executed 0%
    #####:  199:void basic_regex_parser<charT, traits>::fail(regex_constants::error_type error_code, std::ptrdiff_t position)
        -:  200:{
        -:  201:   // get the error message:
    #####:  202:   std::string message = this->m_pdata->m_ptraits->error_string(error_code);
    %%%%%:  202-block 2
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  203:   fail(error_code, position, message);
    %%%%%:  203-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  204:}
    %%%%%:  204-block 5
call    0 never executed
    $$$$$:  204-block 7
call    1 never executed
        -:  205:
        -:  206:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE4failENS_15regex_constants10error_typeElNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEl called 0 returned 0% blocks executed 0%
    #####:  207:void basic_regex_parser<charT, traits>::fail(regex_constants::error_type error_code, std::ptrdiff_t position, std::string message, std::ptrdiff_t start_pos)
        -:  208:{
    #####:  209:   if(0 == this->m_pdata->m_status) // update the error code if not already set
    %%%%%:  209-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  210:      this->m_pdata->m_status = error_code;
    %%%%%:  210-block 3
    #####:  211:   m_position = m_end; // don't bother parsing anything else
        -:  212:
        -:  213:   //
        -:  214:   // Augment error message with the regular expression text:
        -:  215:   //
    #####:  216:   if(start_pos == position)
    %%%%%:  216-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  217:      start_pos = (std::max)(static_cast<std::ptrdiff_t>(0), position - static_cast<std::ptrdiff_t>(10));
    %%%%%:  217-block 5
call    0 never executed
    #####:  218:   std::ptrdiff_t end_pos = (std::min)(position + static_cast<std::ptrdiff_t>(10), static_cast<std::ptrdiff_t>(m_end - m_base));
    %%%%%:  218-block 7
call    0 never executed
    #####:  219:   if(error_code != regex_constants::error_empty)
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  220:   {
    #####:  221:      if((start_pos != 0) || (end_pos != (m_end - m_base)))
    %%%%%:  221-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  221-block 10
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  222:         message += "  The error occurred while parsing the regular expression fragment: '";
    %%%%%:  222-block 11
call    0 never executed
        -:  223:      else
    #####:  224:         message += "  The error occurred while parsing the regular expression: '";
    %%%%%:  224-block 12
call    0 never executed
    #####:  225:      if(start_pos != end_pos)
    %%%%%:  225-block 13
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  226:      {
    #####:  227:         message += std::string(m_base + start_pos, m_base + position);
    %%%%%:  227-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  227-block 17
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  227-block 18
call    6 never executed
    $$$$$:  227-block 36
call    7 never executed
    $$$$$:  227-block 40
    $$$$$:  227-block 41
call    8 never executed
    #####:  228:         message += ">>>HERE>>>";
    %%%%%:  228-block 20
call    0 never executed
    #####:  229:         message += std::string(m_base + position, m_base + end_pos);
    %%%%%:  229-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  229-block 24
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  229-block 25
call    6 never executed
    %%%%%:  229-block 27
    $$$$$:  229-block 42
call    7 never executed
    $$$$$:  229-block 46
    $$$$$:  229-block 47
call    8 never executed
        -:  230:      }
    #####:  231:      message += "'.";
    %%%%%:  231-block 28
call    0 never executed
        -:  232:   }
        -:  233:
        -:  234:#ifndef BOOST_NO_EXCEPTIONS
    #####:  235:   if(0 == (this->flags() & regex_constants::no_except))
    %%%%%:  235-block 29
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  236:   {
    #####:  237:      boost::regex_error e(message, error_code, position);
    %%%%%:  237-block 31
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  238:      e.raise();
    %%%%%:  238-block 32
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  239:   }
    %%%%%:  239-block 33
call    0 never executed
    $$$$$:  239-block 48
call    1 never executed
        -:  240:#else
        -:  241:   (void)position; // suppress warnings.
        -:  242:#endif
    #####:  243:}
    %%%%%:  243-block 35
        -:  244:
        -:  245:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9parse_allEv called 1 returned 100% blocks executed 46%
        1:  246:bool basic_regex_parser<charT, traits>::parse_all()
        -:  247:{
        1:  248:   if (++m_recursion_count > 400)
        1:  248-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  249:   {
        -:  250:      // exceeded internal limits
    #####:  251:      fail(boost::regex_constants::error_complexity, m_position - m_base, "Exceeded nested brace limit.");
    %%%%%:  251-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  251-block 6
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  251-block 7
call    6 never executed
    %%%%%:  251-block 9
    $$$$$:  251-block 20
call    7 never executed
    $$$$$:  251-block 24
        -:  252:   }
        1:  253:   bool result = true;
        6:  254:   while(result && (m_position != m_end))
        1:  254-block 10
        6:  254-block 16
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  254-block 17
branch  2 taken 5
branch  3 taken 1 (fallthrough)
        -:  255:   {
       5*:  256:      result = (this->*m_parser_proc)();
        5:  256-block 11
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%:  256-block 12
        5:  256-block 13
        5:  256-block 14
call    2 returned 5
        -:  257:   }
        1:  258:   --m_recursion_count;
        1:  259:   return result;
        1:  259-block 18
        1:  259-block 19
        -:  260:}
        -:  261:
        -:  262:#ifdef BOOST_REGEX_MSVC
        -:  263:#pragma warning(push)
        -:  264:#pragma warning(disable:4702)
        -:  265:#endif
        -:  266:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE11parse_basicEv called 0 returned 0% blocks executed 0%
    #####:  267:bool basic_regex_parser<charT, traits>::parse_basic()
        -:  268:{
    #####:  269:   switch(this->m_traits.syntax_type(*m_position))
    %%%%%:  269-block 2
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  270:   {
    #####:  271:   case regex_constants::syntax_escape:
    #####:  272:      return parse_basic_escape();
    %%%%%:  272-block 4
call    0 never executed
    #####:  273:   case regex_constants::syntax_dot:
    #####:  274:      return parse_match_any();
    %%%%%:  274-block 6
call    0 never executed
    #####:  275:   case regex_constants::syntax_caret:
    #####:  276:      ++m_position;
    #####:  277:      this->append_state(syntax_element_start_line);
    %%%%%:  277-block 8
call    0 never executed
    #####:  278:      break;
    #####:  279:   case regex_constants::syntax_dollar:
    #####:  280:      ++m_position;
    #####:  281:      this->append_state(syntax_element_end_line);
    %%%%%:  281-block 9
call    0 never executed
    #####:  282:      break;
    #####:  283:   case regex_constants::syntax_star:
    #####:  284:      if(!(this->m_last_state) || (this->m_last_state->type == syntax_element_start_line))
    %%%%%:  284-block 11
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  284-block 12
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  285:         return parse_literal();
    %%%%%:  285-block 13
call    0 never executed
        -:  286:      else
        -:  287:      {
    #####:  288:         ++m_position;
    #####:  289:         return parse_repeat();
    %%%%%:  289-block 15
call    0 never executed
call    1 never executed
        -:  290:      }
    #####:  291:   case regex_constants::syntax_plus:
    #####:  292:      if(!(this->m_last_state) || (this->m_last_state->type == syntax_element_start_line) || !(this->flags() & regbase::emacs_ex))
    %%%%%:  292-block 18
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  292-block 19
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  292-block 20
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  292-block 22
    %%%%%:  292-block 23
    %%%%%:  292-block 24
branch  7 never executed (fallthrough)
branch  8 never executed
    #####:  293:         return parse_literal();
    %%%%%:  293-block 25
call    0 never executed
        -:  294:      else
        -:  295:      {
    #####:  296:         ++m_position;
    #####:  297:         return parse_repeat(1);
    %%%%%:  297-block 27
call    0 never executed
call    1 never executed
        -:  298:      }
    #####:  299:   case regex_constants::syntax_question:
    #####:  300:      if(!(this->m_last_state) || (this->m_last_state->type == syntax_element_start_line) || !(this->flags() & regbase::emacs_ex))
    %%%%%:  300-block 30
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  300-block 31
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  300-block 32
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  300-block 34
    %%%%%:  300-block 35
    %%%%%:  300-block 36
branch  7 never executed (fallthrough)
branch  8 never executed
    #####:  301:         return parse_literal();
    %%%%%:  301-block 37
call    0 never executed
        -:  302:      else
        -:  303:      {
    #####:  304:         ++m_position;
    #####:  305:         return parse_repeat(0, 1);
    %%%%%:  305-block 39
call    0 never executed
        -:  306:      }
    #####:  307:   case regex_constants::syntax_open_set:
    #####:  308:      return parse_set();
    %%%%%:  308-block 41
call    0 never executed
    #####:  309:   case regex_constants::syntax_newline:
    #####:  310:      if(this->flags() & regbase::newline_alt)
    %%%%%:  310-block 43
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  311:         return parse_alt();
    %%%%%:  311-block 45
call    0 never executed
        -:  312:      else
    #####:  313:         return parse_literal();
    %%%%%:  313-block 47
call    0 never executed
    #####:  314:   default:
    #####:  315:      return parse_literal();
    %%%%%:  315-block 49
call    0 never executed
        -:  316:   }
    #####:  317:   return true;
    %%%%%:  317-block 52
        -:  318:}
        -:  319:
        -:  320:#ifdef BOOST_REGEX_MSVC
        -:  321:#  pragma warning(push)
        -:  322:#if BOOST_REGEX_MSVC >= 1800
        -:  323:#pragma warning(disable:26812)
        -:  324:#endif
        -:  325:#endif
        -:  326:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE14parse_extendedEv called 5 returned 100% blocks executed 10%
        5:  327:bool basic_regex_parser<charT, traits>::parse_extended()
        -:  328:{
        5:  329:   bool result = true;
        5:  330:   switch(this->m_traits.syntax_type(*m_position))
        5:  330-block 2
call    0 returned 5
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 2
branch 11 taken 0
branch 12 taken 0
branch 13 taken 2
branch 14 taken 0
branch 15 taken 0
branch 16 taken 1
        -:  331:   {
    #####:  332:   case regex_constants::syntax_open_mark:
    #####:  333:      return parse_open_paren();
    %%%%%:  333-block 4
call    0 never executed
    #####:  334:   case regex_constants::syntax_close_mark:
    #####:  335:      return false;
    %%%%%:  335-block 6
    #####:  336:   case regex_constants::syntax_escape:
    #####:  337:      return parse_extended_escape();
    %%%%%:  337-block 7
call    0 never executed
    #####:  338:   case regex_constants::syntax_dot:
    #####:  339:      return parse_match_any();
    %%%%%:  339-block 9
call    0 never executed
    #####:  340:   case regex_constants::syntax_caret:
    #####:  341:      ++m_position;
    #####:  342:      this->append_state(
    %%%%%:  342-block 13
    %%%%%:  342-block 14
    %%%%%:  342-block 15
call    0 never executed
    #####:  343:         (this->flags() & regex_constants::no_mod_m ? syntax_element_buffer_start : syntax_element_start_line));
    %%%%%:  343-block 11
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  344:      break;
    #####:  345:   case regex_constants::syntax_dollar:
    #####:  346:      ++m_position;
    #####:  347:      this->append_state(
    %%%%%:  347-block 19
    %%%%%:  347-block 20
    %%%%%:  347-block 21
call    0 never executed
    #####:  348:         (this->flags() & regex_constants::no_mod_m ? syntax_element_buffer_end : syntax_element_end_line));
    %%%%%:  348-block 17
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  349:      break;
    #####:  350:   case regex_constants::syntax_star:
    #####:  351:      if(m_position == this->m_base)
    %%%%%:  351-block 23
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  352:      {
    #####:  353:         fail(regex_constants::error_badrepeat, 0, "The repeat operator \"*\" cannot start a regular expression.");
    %%%%%:  353-block 26
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  353-block 27
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  353-block 28
call    6 never executed
    $$$$$:  353-block 92
call    7 never executed
    $$$$$:  353-block 96
    $$$$$:  353-block 97
call    8 never executed
    #####:  354:         return false;
    %%%%%:  354-block 30
        -:  355:      }
    #####:  356:      ++m_position;
    #####:  357:      return parse_repeat();
    %%%%%:  357-block 31
call    0 never executed
call    1 never executed
    #####:  358:   case regex_constants::syntax_question:
    #####:  359:      if(m_position == this->m_base)
    %%%%%:  359-block 34
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  360:      {
    #####:  361:         fail(regex_constants::error_badrepeat, 0, "The repeat operator \"?\" cannot start a regular expression.");
    %%%%%:  361-block 37
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  361-block 38
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  361-block 39
call    6 never executed
    $$$$$:  361-block 98
call    7 never executed
    $$$$$:  361-block 102
    $$$$$:  361-block 103
call    8 never executed
    #####:  362:         return false;
    %%%%%:  362-block 41
        -:  363:      }
    #####:  364:      ++m_position;
    #####:  365:      return parse_repeat(0,1);
    %%%%%:  365-block 42
call    0 never executed
    #####:  366:   case regex_constants::syntax_plus:
    #####:  367:      if(m_position == this->m_base)
    %%%%%:  367-block 44
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  368:      {
    #####:  369:         fail(regex_constants::error_badrepeat, 0, "The repeat operator \"+\" cannot start a regular expression.");
    %%%%%:  369-block 47
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  369-block 48
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  369-block 49
call    6 never executed
    $$$$$:  369-block 104
call    7 never executed
    $$$$$:  369-block 108
    $$$$$:  369-block 109
call    8 never executed
    #####:  370:         return false;
    %%%%%:  370-block 51
        -:  371:      }
    #####:  372:      ++m_position;
    #####:  373:      return parse_repeat(1);
    %%%%%:  373-block 52
call    0 never executed
call    1 never executed
        2:  374:   case regex_constants::syntax_open_brace:
        2:  375:      ++m_position;
        2:  376:      return parse_repeat_range(false);
        2:  376-block 55
call    0 returned 2
    #####:  377:   case regex_constants::syntax_close_brace:
    #####:  378:      if((this->flags() & regbase::no_perl_ex) == regbase::no_perl_ex)
    %%%%%:  378-block 57
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  379:      {
    #####:  380:         fail(regex_constants::error_brace, this->m_position - this->m_base, "Found a closing repetition operator } with no corresponding {.");
    %%%%%:  380-block 61
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  380-block 62
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  380-block 63
call    6 never executed
    $$$$$:  380-block 110
call    7 never executed
    $$$$$:  380-block 114
    #####:  381:         return false;
    %%%%%:  381-block 65
        -:  382:      }
    #####:  383:      result = parse_literal();
    %%%%%:  383-block 66
call    0 never executed
    #####:  384:      break;
    #####:  385:   case regex_constants::syntax_or:
    #####:  386:      return parse_alt();
    %%%%%:  386-block 68
call    0 never executed
        2:  387:   case regex_constants::syntax_open_set:
        2:  388:      return parse_set();
        2:  388-block 70
call    0 returned 2
    #####:  389:   case regex_constants::syntax_newline:
    #####:  390:      if(this->flags() & regbase::newline_alt)
    %%%%%:  390-block 72
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  391:         return parse_alt();
    %%%%%:  391-block 74
call    0 never executed
        -:  392:      else
    #####:  393:         return parse_literal();
    %%%%%:  393-block 76
call    0 never executed
    #####:  394:   case regex_constants::syntax_hash:
        -:  395:      //
        -:  396:      // If we have a mod_x flag set, then skip until
        -:  397:      // we get to a newline character:
        -:  398:      //
    #####:  399:      if((this->flags() 
    %%%%%:  399-block 78
call    0 never executed
    #####:  400:         & (regbase::no_perl_ex|regbase::mod_x))
    #####:  401:         == regbase::mod_x)
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  402:      {
    #####:  403:         while((m_position != m_end) && !is_separator(*m_position++)){}
    %%%%%:  403-block 80
    %%%%%:  403-block 81
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  403-block 82
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  403-block 84
    %%%%%:  403-block 85
    %%%%%:  403-block 86
branch  5 never executed
branch  6 never executed (fallthrough)
    #####:  404:         return true;
    %%%%%:  404-block 87
        -:  405:      }
        -:  406:      BOOST_REGEX_FALLTHROUGH;
        -:  407:   default:
        1:  408:      result = parse_literal();
        1:  408-block 88
call    0 returned 1
        1:  409:      break;
        -:  410:   }
        1:  411:   return result;
        1:  411-block 90
        -:  412:}
        -:  413:#ifdef BOOST_REGEX_MSVC
        -:  414:#  pragma warning(pop)
        -:  415:#endif
        -:  416:#ifdef BOOST_REGEX_MSVC
        -:  417:#pragma warning(pop)
        -:  418:#endif
        -:  419:
        -:  420:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE13parse_literalEv called 1 returned 100% blocks executed 70%
        1:  421:bool basic_regex_parser<charT, traits>::parse_literal()
        -:  422:{
        -:  423:   // append this as a literal provided it's not a space character
        -:  424:   // or the perl option regbase::mod_x is not set:
        1:  425:   if(
        1:  426:      ((this->flags() 
        1:  426-block 2
call    0 returned 1
        1:  427:         & (regbase::main_option_type|regbase::mod_x|regbase::no_perl_ex)) 
        -:  428:            != regbase::mod_x)
       1*:  429:      || !this->m_traits.isctype(*m_position, this->m_mask_space))
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  429-block 4
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
        1:  429-block 6
    %%%%%:  429-block 7
        1:  429-block 8
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1:  430:         this->append_literal(*m_position);
        1:  430-block 9
call    0 returned 1
        1:  431:   ++m_position;
        1:  432:   return true;
        1:  432-block 10
        -:  433:}
        -:  434:
        -:  435:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16parse_open_parenEv called 0 returned 0% blocks executed 0%
    #####:  436:bool basic_regex_parser<charT, traits>::parse_open_paren()
        -:  437:{
        -:  438:   //
        -:  439:   // skip the '(' and error check:
        -:  440:   //
    #####:  441:   if(++m_position == m_end)
    %%%%%:  441-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  442:   {
    #####:  443:      fail(regex_constants::error_paren, m_position - m_base);
    %%%%%:  443-block 3
call    0 never executed
    #####:  444:      return false;
        -:  445:   }
        -:  446:   //
        -:  447:   // begin by checking for a perl-style (?...) extension:
        -:  448:   //
    #####:  449:   if(
    #####:  450:         ((this->flags() & (regbase::main_option_type | regbase::no_perl_ex)) == 0)
    %%%%%:  450-block 5
call    0 never executed
    #####:  451:         || ((this->flags() & (regbase::main_option_type | regbase::emacs_ex)) == (regbase::basic_syntax_group|regbase::emacs_ex))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  451-block 7
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  451-block 9
    %%%%%:  451-block 10
    %%%%%:  451-block 11
branch  5 never executed (fallthrough)
branch  6 never executed
        -:  452:     )
        -:  453:   {
    #####:  454:      if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_question)
    %%%%%:  454-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  455:         return parse_perl_extension();
    %%%%%:  455-block 14
call    0 never executed
    #####:  456:      if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_star)
    %%%%%:  456-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  457:         return parse_perl_verb();
    %%%%%:  457-block 18
call    0 never executed
        -:  458:   }
        -:  459:   //
        -:  460:   // update our mark count, and append the required state:
        -:  461:   //
    #####:  462:   unsigned markid = 0;
    #####:  463:   if(0 == (this->flags() & regbase::nosubs))
    %%%%%:  463-block 20
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  464:   {
    #####:  465:      markid = ++m_mark_count;
    #####:  466:      if(this->flags() & regbase::save_subexpression_location)
    %%%%%:  466-block 22
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  467:         this->m_pdata->m_subs.push_back(std::pair<std::size_t, std::size_t>(std::distance(m_base, m_position) - 1, 0));
    %%%%%:  467-block 24
    %%%%%:  467-block 30
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  467-block 32
    $$$$$:  467-block 77
    $$$$$:  467-block 78
        -:  468:   }
    #####:  469:   re_brace* pb = static_cast<re_brace*>(this->append_state(syntax_element_startmark, sizeof(re_brace)));
    %%%%%:  469-block 33
call    0 never executed
    #####:  470:   pb->index = markid;
    #####:  471:   pb->icase = this->flags() & regbase::icase;
call    0 never executed
    #####:  472:   std::ptrdiff_t last_paren_start = this->getoffset(pb);
call    0 never executed
        -:  473:   // back up insertion point for alternations, and set new point:
    #####:  474:   std::ptrdiff_t last_alt_point = m_alt_insert_point;
    #####:  475:   this->m_pdata->m_data.align();
call    0 never executed
    #####:  476:   m_alt_insert_point = this->m_pdata->m_data.size();
call    0 never executed
        -:  477:   //
        -:  478:   // back up the current flags in case we have a nested (?imsx) group:
        -:  479:   //
    #####:  480:   regex_constants::syntax_option_type opts = this->flags();
call    0 never executed
    #####:  481:   bool old_case_change = m_has_case_change;
    #####:  482:   m_has_case_change = false; // no changes to this scope as yet...
        -:  483:   //
        -:  484:   // Back up branch reset data in case we have a nested (?|...)
        -:  485:   //
    #####:  486:   int mark_reset = m_mark_reset;
    #####:  487:   m_mark_reset = -1;
        -:  488:   //
        -:  489:   // now recursively add more states, this will terminate when we get to a
        -:  490:   // matching ')' :
        -:  491:   //
    #####:  492:   parse_all();
call    0 never executed
        -:  493:   //
        -:  494:   // Unwind pushed alternatives:
        -:  495:   //
    #####:  496:   if(0 == unwind_alts(last_paren_start))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  497:      return false;
    %%%%%:  497-block 42
        -:  498:   //
        -:  499:   // restore flags:
        -:  500:   //
    #####:  501:   if(m_has_case_change)
    %%%%%:  501-block 43
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  502:   {
        -:  503:      // the case has changed in one or more of the alternatives
        -:  504:      // within the scoped (...) block: we have to add a state
        -:  505:      // to reset the case sensitivity:
        -:  506:      static_cast<re_case*>(
    #####:  507:         this->append_state(syntax_element_toggle_case, sizeof(re_case))
    #####:  508:         )->icase = opts & regbase::icase;
    %%%%%:  508-block 44
call    0 never executed
        -:  509:   }
    #####:  510:   this->flags(opts);
    %%%%%:  510-block 46
call    0 never executed
    #####:  511:   m_has_case_change = old_case_change;
        -:  512:   //
        -:  513:   // restore branch reset:
        -:  514:   //
    #####:  515:   m_mark_reset = mark_reset;
        -:  516:   //
        -:  517:   // we either have a ')' or we have run out of characters prematurely:
        -:  518:   //
    #####:  519:   if(m_position == m_end)
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  520:   {
    #####:  521:      this->fail(regex_constants::error_paren, std::distance(m_base, m_end));
    %%%%%:  521-block 48
    %%%%%:  521-block 54
call    0 never executed
    #####:  522:      return false;
        -:  523:   }
    #####:  524:   if(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark)
    %%%%%:  524-block 56
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  525:      return false;
    %%%%%:  525-block 58
    #####:  526:   if(markid && (this->flags() & regbase::save_subexpression_location))
    %%%%%:  526-block 59
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  526-block 60
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  526-block 62
    %%%%%:  526-block 63
    %%%%%:  526-block 64
branch  5 never executed (fallthrough)
branch  6 never executed
    #####:  527:      this->m_pdata->m_subs.at(markid - 1).second = std::distance(m_base, m_position);
    %%%%%:  527-block 65
    %%%%%:  527-block 71
call    0 never executed
    #####:  528:   ++m_position;
        -:  529:   //
        -:  530:   // append closing parenthesis state:
        -:  531:   //
    #####:  532:   pb = static_cast<re_brace*>(this->append_state(syntax_element_endmark, sizeof(re_brace)));
    %%%%%:  532-block 73
call    0 never executed
    #####:  533:   pb->index = markid;
    #####:  534:   pb->icase = this->flags() & regbase::icase;
call    0 never executed
    #####:  535:   this->m_paren_start = last_paren_start;
        -:  536:   //
        -:  537:   // restore the alternate insertion point:
        -:  538:   //
    #####:  539:   this->m_alt_insert_point = last_alt_point;
        -:  540:
    #####:  541:   return true;
        -:  542:}
        -:  543:
        -:  544:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE18parse_basic_escapeEv called 0 returned 0% blocks executed 0%
    #####:  545:bool basic_regex_parser<charT, traits>::parse_basic_escape()
        -:  546:{
    #####:  547:   if(++m_position == m_end)
    %%%%%:  547-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  548:   {
    #####:  549:      fail(regex_constants::error_paren, m_position - m_base);
    %%%%%:  549-block 3
call    0 never executed
    #####:  550:      return false;
        -:  551:   }
    #####:  552:   bool result = true;
    #####:  553:   switch(this->m_traits.escape_syntax_type(*m_position))
    %%%%%:  553-block 5
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  554:   {
    #####:  555:   case regex_constants::syntax_open_mark:
    #####:  556:      return parse_open_paren();
    %%%%%:  556-block 7
call    0 never executed
    #####:  557:   case regex_constants::syntax_close_mark:
    #####:  558:      return false;
    %%%%%:  558-block 9
    #####:  559:   case regex_constants::syntax_plus:
    #####:  560:      if(this->flags() & regex_constants::bk_plus_qm)
    %%%%%:  560-block 10
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  561:      {
    #####:  562:         ++m_position;
    #####:  563:         return parse_repeat(1);
    %%%%%:  563-block 12
call    0 never executed
call    1 never executed
        -:  564:      }
        -:  565:      else
    #####:  566:         return parse_literal();
    %%%%%:  566-block 15
call    0 never executed
    #####:  567:   case regex_constants::syntax_question:
    #####:  568:      if(this->flags() & regex_constants::bk_plus_qm)
    %%%%%:  568-block 17
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  569:      {
    #####:  570:         ++m_position;
    #####:  571:         return parse_repeat(0, 1);
    %%%%%:  571-block 19
call    0 never executed
        -:  572:      }
        -:  573:      else
    #####:  574:         return parse_literal();
    %%%%%:  574-block 21
call    0 never executed
    #####:  575:   case regex_constants::syntax_open_brace:
    #####:  576:      if(this->flags() & regbase::no_intervals)
    %%%%%:  576-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  577:         return parse_literal();
    %%%%%:  577-block 25
call    0 never executed
    #####:  578:      ++m_position;
    #####:  579:      return parse_repeat_range(true);
    %%%%%:  579-block 27
call    0 never executed
    #####:  580:   case regex_constants::syntax_close_brace:
    #####:  581:      if(this->flags() & regbase::no_intervals)
    %%%%%:  581-block 29
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  582:         return parse_literal();
    %%%%%:  582-block 31
call    0 never executed
    #####:  583:      fail(regex_constants::error_brace, this->m_position - this->m_base, "Found a closing repetition operator } with no corresponding {.");
    %%%%%:  583-block 35
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  583-block 36
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  583-block 37
call    6 never executed
    $$$$$:  583-block 115
call    7 never executed
    $$$$$:  583-block 119
    $$$$$:  583-block 120
call    8 never executed
    #####:  584:      return false;
    %%%%%:  584-block 39
    #####:  585:   case regex_constants::syntax_or:
    #####:  586:      if(this->flags() & regbase::bk_vbar)
    %%%%%:  586-block 40
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  587:         return parse_alt();
    %%%%%:  587-block 42
call    0 never executed
        -:  588:      else
    #####:  589:         result = parse_literal();
    %%%%%:  589-block 44
call    0 never executed
    #####:  590:      break;
    #####:  591:   case regex_constants::syntax_digit:
    #####:  592:      return parse_backref();
    %%%%%:  592-block 46
call    0 never executed
    #####:  593:   case regex_constants::escape_type_start_buffer:
    #####:  594:      if(this->flags() & regbase::emacs_ex)
    %%%%%:  594-block 48
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  595:      {
    #####:  596:         ++m_position;
    #####:  597:         this->append_state(syntax_element_buffer_start);
    %%%%%:  597-block 50
call    0 never executed
        -:  598:      }
        -:  599:      else
    #####:  600:         result = parse_literal();
    %%%%%:  600-block 51
call    0 never executed
    #####:  601:      break;
    %%%%%:  601-block 53
    #####:  602:   case regex_constants::escape_type_end_buffer:
    #####:  603:      if(this->flags() & regbase::emacs_ex)
    %%%%%:  603-block 54
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  604:      {
    #####:  605:         ++m_position;
    #####:  606:         this->append_state(syntax_element_buffer_end);
    %%%%%:  606-block 56
call    0 never executed
        -:  607:      }
        -:  608:      else
    #####:  609:         result = parse_literal();
    %%%%%:  609-block 57
call    0 never executed
    #####:  610:      break;
    %%%%%:  610-block 59
    #####:  611:   case regex_constants::escape_type_word_assert:
    #####:  612:      if(this->flags() & regbase::emacs_ex)
    %%%%%:  612-block 60
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  613:      {
    #####:  614:         ++m_position;
    #####:  615:         this->append_state(syntax_element_word_boundary);
    %%%%%:  615-block 62
call    0 never executed
        -:  616:      }
        -:  617:      else
    #####:  618:         result = parse_literal();
    %%%%%:  618-block 63
call    0 never executed
    #####:  619:      break;
    %%%%%:  619-block 65
    #####:  620:   case regex_constants::escape_type_not_word_assert:
    #####:  621:      if(this->flags() & regbase::emacs_ex)
    %%%%%:  621-block 66
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  622:      {
    #####:  623:         ++m_position;
    #####:  624:         this->append_state(syntax_element_within_word);
    %%%%%:  624-block 68
call    0 never executed
        -:  625:      }
        -:  626:      else
    #####:  627:         result = parse_literal();
    %%%%%:  627-block 69
call    0 never executed
    #####:  628:      break;
    %%%%%:  628-block 71
    #####:  629:   case regex_constants::escape_type_left_word:
    #####:  630:      if(this->flags() & regbase::emacs_ex)
    %%%%%:  630-block 72
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  631:      {
    #####:  632:         ++m_position;
    #####:  633:         this->append_state(syntax_element_word_start);
    %%%%%:  633-block 74
call    0 never executed
        -:  634:      }
        -:  635:      else
    #####:  636:         result = parse_literal();
    %%%%%:  636-block 75
call    0 never executed
    #####:  637:      break;
    %%%%%:  637-block 77
    #####:  638:   case regex_constants::escape_type_right_word:
    #####:  639:      if(this->flags() & regbase::emacs_ex)
    %%%%%:  639-block 78
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  640:      {
    #####:  641:         ++m_position;
    #####:  642:         this->append_state(syntax_element_word_end);
    %%%%%:  642-block 80
call    0 never executed
        -:  643:      }
        -:  644:      else
    #####:  645:         result = parse_literal();
    %%%%%:  645-block 81
call    0 never executed
    #####:  646:      break;
    %%%%%:  646-block 83
    #####:  647:   default:
    #####:  648:      if(this->flags() & regbase::emacs_ex)
    %%%%%:  648-block 84
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  649:      {
    #####:  650:         bool negate = true;
    #####:  651:         switch(*m_position)
    %%%%%:  651-block 86
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  652:         {
    #####:  653:         case 'w':
    #####:  654:            negate = false;
    %%%%%:  654-block 87
        -:  655:            BOOST_REGEX_FALLTHROUGH;
    #####:  656:         case 'W':
        -:  657:            {
    #####:  658:            basic_char_set<charT, traits> char_set;
    %%%%%:  658-block 88
call    0 never executed
    #####:  659:            if(negate)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  660:               char_set.negate();
    %%%%%:  660-block 90
call    0 never executed
    #####:  661:            char_set.add_class(this->m_word_mask);
    %%%%%:  661-block 91
call    0 never executed
    #####:  662:            if(0 == this->append_set(char_set))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  662-block 93
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  663:            {
    #####:  664:               fail(regex_constants::error_ctype, m_position - m_base);
    %%%%%:  664-block 94
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  665:               return false;
    %%%%%:  665-block 95
        -:  666:            }
    #####:  667:            ++m_position;
    #####:  668:            return true;
    %%%%%:  668-block 96
    #####:  669:            }
    %%%%%:  669-block 97
call    0 never executed
    $$$$$:  669-block 121
call    1 never executed
    #####:  670:         case 's':
    #####:  671:            negate = false;
    %%%%%:  671-block 99
        -:  672:            BOOST_REGEX_FALLTHROUGH;
    #####:  673:         case 'S':
    #####:  674:            return add_emacs_code(negate);
    %%%%%:  674-block 100
call    0 never executed
    #####:  675:         case 'c':
    %%%%%:  675-block 102
        -:  676:         case 'C':
        -:  677:            // not supported yet:
    #####:  678:            fail(regex_constants::error_escape, m_position - m_base, "The \\c and \\C escape sequences are not supported by POSIX basic regular expressions: try the Perl syntax instead.");
    %%%%%:  678-block 104
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  678-block 105
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  678-block 106
call    6 never executed
    $$$$$:  678-block 124
call    7 never executed
    $$$$$:  678-block 128
    #####:  679:            return false;
    %%%%%:  679-block 108
    #####:  680:         default:
    #####:  681:            break;
    %%%%%:  681-block 109
        -:  682:         }
        -:  683:      }
    #####:  684:      result = parse_literal();
    %%%%%:  684-block 111
call    0 never executed
    #####:  685:      break;
        -:  686:   }
    #####:  687:   return result;
    %%%%%:  687-block 113
        -:  688:}
        -:  689:
        -:  690:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE21parse_extended_escapeEv called 0 returned 0% blocks executed 0%
    #####:  691:bool basic_regex_parser<charT, traits>::parse_extended_escape()
        -:  692:{
    #####:  693:   ++m_position;
    #####:  694:   if(m_position == m_end)
    %%%%%:  694-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  695:   {
    #####:  696:      fail(regex_constants::error_escape, m_position - m_base, "Incomplete escape sequence found.");
    %%%%%:  696-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  696-block 6
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  696-block 7
call    6 never executed
    $$$$$:  696-block 211
call    7 never executed
    $$$$$:  696-block 215
    $$$$$:  696-block 216
call    8 never executed
    #####:  697:      return false;
    %%%%%:  697-block 9
        -:  698:   }
    #####:  699:   bool negate = false; // in case this is a character class escape: \w \d etc
    #####:  700:   switch(this->m_traits.escape_syntax_type(*m_position))
    %%%%%:  700-block 10
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
        -:  701:   {
    #####:  702:   case regex_constants::escape_type_not_class:
    #####:  703:      negate = true;
    %%%%%:  703-block 12
        -:  704:      BOOST_REGEX_FALLTHROUGH;
        -:  705:   case regex_constants::escape_type_class:
        -:  706:      {
    #####:  707:escape_type_class_jump:
        -:  708:         typedef typename traits::char_class_type m_type;
    #####:  709:         m_type m = this->m_traits.lookup_classname(m_position, m_position+1);
    %%%%%:  709-block 13
call    0 never executed
    #####:  710:         if(m != 0)
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  711:         {
    #####:  712:            basic_char_set<charT, traits> char_set;
    %%%%%:  712-block 15
call    0 never executed
    #####:  713:            if(negate)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  714:               char_set.negate();
    %%%%%:  714-block 17
call    0 never executed
    #####:  715:            char_set.add_class(m);
    %%%%%:  715-block 18
call    0 never executed
    #####:  716:            if(0 == this->append_set(char_set))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  716-block 20
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  717:            {
    #####:  718:               fail(regex_constants::error_ctype, m_position - m_base);
    %%%%%:  718-block 21
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  719:               return false;
    %%%%%:  719-block 22
        -:  720:            }
    #####:  721:            ++m_position;
    #####:  722:            return true;
    %%%%%:  722-block 23
    #####:  723:         }
    %%%%%:  723-block 24
call    0 never executed
    $$$$$:  723-block 217
call    1 never executed
        -:  724:         //
        -:  725:         // not a class, just a regular unknown escape:
        -:  726:         //
    #####:  727:         this->append_literal(unescape_character());
    %%%%%:  727-block 26
call    0 never executed
call    1 never executed
    #####:  728:         break;
        -:  729:      }
    #####:  730:   case regex_constants::syntax_digit:
    #####:  731:      return parse_backref();
    %%%%%:  731-block 29
call    0 never executed
    #####:  732:   case regex_constants::escape_type_left_word:
    #####:  733:      ++m_position;
    #####:  734:      this->append_state(syntax_element_word_start);
    %%%%%:  734-block 31
call    0 never executed
    #####:  735:      break;
    #####:  736:   case regex_constants::escape_type_right_word:
    #####:  737:      ++m_position;
    #####:  738:      this->append_state(syntax_element_word_end);
    %%%%%:  738-block 33
call    0 never executed
    #####:  739:      break;
    #####:  740:   case regex_constants::escape_type_start_buffer:
    #####:  741:      ++m_position;
    #####:  742:      this->append_state(syntax_element_buffer_start);
    %%%%%:  742-block 35
call    0 never executed
    #####:  743:      break;
    #####:  744:   case regex_constants::escape_type_end_buffer:
    #####:  745:      ++m_position;
    #####:  746:      this->append_state(syntax_element_buffer_end);
    %%%%%:  746-block 37
call    0 never executed
    #####:  747:      break;
    #####:  748:   case regex_constants::escape_type_word_assert:
    #####:  749:      ++m_position;
    #####:  750:      this->append_state(syntax_element_word_boundary);
    %%%%%:  750-block 39
call    0 never executed
    #####:  751:      break;
    #####:  752:   case regex_constants::escape_type_not_word_assert:
    #####:  753:      ++m_position;
    #####:  754:      this->append_state(syntax_element_within_word);
    %%%%%:  754-block 41
call    0 never executed
    #####:  755:      break;
    #####:  756:   case regex_constants::escape_type_Z:
    #####:  757:      ++m_position;
    #####:  758:      this->append_state(syntax_element_soft_buffer_end);
    %%%%%:  758-block 43
call    0 never executed
    #####:  759:      break;
    #####:  760:   case regex_constants::escape_type_Q:
    #####:  761:      return parse_QE();
    %%%%%:  761-block 45
call    0 never executed
    #####:  762:   case regex_constants::escape_type_C:
    #####:  763:      return parse_match_any();
    %%%%%:  763-block 47
call    0 never executed
    #####:  764:   case regex_constants::escape_type_X:
    #####:  765:      ++m_position;
    #####:  766:      this->append_state(syntax_element_combining);
    %%%%%:  766-block 49
call    0 never executed
    #####:  767:      break;
    #####:  768:   case regex_constants::escape_type_G:
    #####:  769:      ++m_position;
    #####:  770:      this->append_state(syntax_element_restart_continue);
    %%%%%:  770-block 51
call    0 never executed
    #####:  771:      break;
    #####:  772:   case regex_constants::escape_type_not_property:
    #####:  773:      negate = true;
    %%%%%:  773-block 53
        -:  774:      BOOST_REGEX_FALLTHROUGH;
    #####:  775:   case regex_constants::escape_type_property:
        -:  776:      {
    #####:  777:         ++m_position;
        -:  778:         char_class_type m;
    #####:  779:         if(m_position == m_end)
    %%%%%:  779-block 54
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  780:         {
    #####:  781:            fail(regex_constants::error_escape, m_position - m_base, "Incomplete property escape found.");
    %%%%%:  781-block 57
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  781-block 58
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  781-block 59
call    6 never executed
    $$$$$:  781-block 220
call    7 never executed
    $$$$$:  781-block 224
    $$$$$:  781-block 225
call    8 never executed
    #####:  782:            return false;
    %%%%%:  782-block 61
        -:  783:         }
        -:  784:         // maybe have \p{ddd}
    #####:  785:         if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_open_brace)
    %%%%%:  785-block 62
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  786:         {
    #####:  787:            const charT* base = m_position;
        -:  788:            // skip forward until we find enclosing brace:
    #####:  789:            while((m_position != m_end) && (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_brace))
    %%%%%:  789-block 64
    %%%%%:  789-block 66
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  789-block 67
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  789-block 69
    %%%%%:  789-block 70
    %%%%%:  789-block 71
branch  5 never executed
branch  6 never executed (fallthrough)
    #####:  790:               ++m_position;
    %%%%%:  790-block 65
    #####:  791:            if(m_position == m_end)
    %%%%%:  791-block 72
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  792:            {
    #####:  793:               fail(regex_constants::error_escape, m_position - m_base, "Closing } missing from property escape sequence.");
    %%%%%:  793-block 75
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  793-block 76
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  793-block 77
call    6 never executed
    $$$$$:  793-block 226
call    7 never executed
    $$$$$:  793-block 230
    $$$$$:  793-block 231
call    8 never executed
    #####:  794:               return false;
    %%%%%:  794-block 79
        -:  795:            }
    #####:  796:            m = this->m_traits.lookup_classname(++base, m_position++);
    %%%%%:  796-block 80
call    0 never executed
        -:  797:         }
        -:  798:         else
        -:  799:         {
    #####:  800:            m = this->m_traits.lookup_classname(m_position, m_position+1);
    %%%%%:  800-block 82
call    0 never executed
    #####:  801:            ++m_position;
        -:  802:         }
    #####:  803:         if(m != 0)
    %%%%%:  803-block 84
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  804:         {
    #####:  805:            basic_char_set<charT, traits> char_set;
    %%%%%:  805-block 85
call    0 never executed
    #####:  806:            if(negate)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  807:               char_set.negate();
    %%%%%:  807-block 87
call    0 never executed
    #####:  808:            char_set.add_class(m);
    %%%%%:  808-block 88
call    0 never executed
    #####:  809:            if(0 == this->append_set(char_set))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  809-block 90
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  810:            {
    #####:  811:               fail(regex_constants::error_ctype, m_position - m_base);
    %%%%%:  811-block 91
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  812:               return false;
    %%%%%:  812-block 92
        -:  813:            }
    #####:  814:            return true;
    %%%%%:  814-block 93
    #####:  815:         }
    %%%%%:  815-block 94
call    0 never executed
    $$$$$:  815-block 232
call    1 never executed
    #####:  816:         fail(regex_constants::error_ctype, m_position - m_base, "Escape sequence was neither a valid property nor a valid character class name.");
    %%%%%:  816-block 98
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  816-block 99
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  816-block 100
call    6 never executed
    $$$$$:  816-block 235
call    7 never executed
    $$$$$:  816-block 239
    $$$$$:  816-block 240
call    8 never executed
    #####:  817:         return false;
    %%%%%:  817-block 102
        -:  818:      }
    #####:  819:   case regex_constants::escape_type_reset_start_mark:
    #####:  820:      if(0 == (this->flags() & (regbase::main_option_type | regbase::no_perl_ex)))
    %%%%%:  820-block 103
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  821:      {
    #####:  822:         re_brace* pb = static_cast<re_brace*>(this->append_state(syntax_element_startmark, sizeof(re_brace)));
    %%%%%:  822-block 105
call    0 never executed
    #####:  823:         pb->index = -5;
    #####:  824:         pb->icase = this->flags() & regbase::icase;
call    0 never executed
    #####:  825:         this->m_pdata->m_data.align();
call    0 never executed
    #####:  826:         ++m_position;
    #####:  827:         return true;
        -:  828:      }
    #####:  829:      goto escape_type_class_jump;
    %%%%%:  829-block 109
    #####:  830:   case regex_constants::escape_type_line_ending:
    #####:  831:      if(0 == (this->flags() & (regbase::main_option_type | regbase::no_perl_ex)))
    %%%%%:  831-block 110
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  832:      {
    #####:  833:         const charT* e = get_escape_R_string<charT>();
    %%%%%:  833-block 112
call    0 never executed
    #####:  834:         const charT* old_position = m_position;
    #####:  835:         const charT* old_end = m_end;
    #####:  836:         const charT* old_base = m_base;
    #####:  837:         m_position = e;
    #####:  838:         m_base = e;
    #####:  839:         m_end = e + traits::length(e);
call    0 never executed
    #####:  840:         bool r = parse_all();
call    0 never executed
    #####:  841:         m_position = ++old_position;
    #####:  842:         m_end = old_end;
    #####:  843:         m_base = old_base;
    #####:  844:         return r;
        -:  845:      }
    #####:  846:      goto escape_type_class_jump;
    %%%%%:  846-block 116
    #####:  847:   case regex_constants::escape_type_extended_backref:
    #####:  848:      if(0 == (this->flags() & (regbase::main_option_type | regbase::no_perl_ex)))
    %%%%%:  848-block 117
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  849:      {
    #####:  850:         bool have_brace = false;
    #####:  851:         bool negative = false;
        -:  852:         static const char incomplete_message[] = "Incomplete \\g escape found.";
    #####:  853:         if(++m_position == m_end)
    %%%%%:  853-block 119
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  854:         {
    #####:  855:            fail(regex_constants::error_escape, m_position - m_base, incomplete_message);
    %%%%%:  855-block 122
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  855-block 123
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  855-block 124
call    6 never executed
    $$$$$:  855-block 241
call    7 never executed
    $$$$$:  855-block 245
    $$$$$:  855-block 246
    #####:  856:            return false;
    %%%%%:  856-block 126
        -:  857:         }
        -:  858:         // maybe have \g{ddd}
    #####:  859:         regex_constants::syntax_type syn = this->m_traits.syntax_type(*m_position);
    %%%%%:  859-block 127
call    0 never executed
    #####:  860:         regex_constants::syntax_type syn_end = 0;
    #####:  861:         if((syn == regex_constants::syntax_open_brace) 
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  862:            || (syn == regex_constants::escape_type_left_word)
    %%%%%:  862-block 129
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  863:            || (syn == regex_constants::escape_type_end_buffer))
    %%%%%:  863-block 130
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  864:         {
    #####:  865:            if(++m_position == m_end)
    %%%%%:  865-block 131
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  866:            {
    #####:  867:               fail(regex_constants::error_escape, m_position - m_base, incomplete_message);
    %%%%%:  867-block 134
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  867-block 135
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  867-block 136
call    6 never executed
    $$$$$:  867-block 247
call    7 never executed
    $$$$$:  867-block 251
    $$$$$:  867-block 252
    #####:  868:               return false;
    %%%%%:  868-block 138
        -:  869:            }
    #####:  870:            have_brace = true;
    #####:  871:            switch(syn)
    %%%%%:  871-block 139
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:  872:            {
    #####:  873:            case regex_constants::syntax_open_brace:
    #####:  874:               syn_end = regex_constants::syntax_close_brace;
    #####:  875:               break;
    %%%%%:  875-block 140
    #####:  876:            case regex_constants::escape_type_left_word:
    #####:  877:               syn_end = regex_constants::escape_type_right_word;
    #####:  878:               break;
    %%%%%:  878-block 141
    #####:  879:            default:
    #####:  880:               syn_end = regex_constants::escape_type_end_buffer;
    #####:  881:               break;
    %%%%%:  881-block 142
        -:  882:            }
        -:  883:         }
    #####:  884:         negative = (*m_position == static_cast<charT>('-'));
    #####:  885:         if((negative) && (++m_position == m_end))
    %%%%%:  885-block 143
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  885-block 144
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  885-block 145
    %%%%%:  885-block 146
    %%%%%:  885-block 147
branch  4 never executed (fallthrough)
branch  5 never executed
        -:  886:         {
    #####:  887:            fail(regex_constants::error_escape, m_position - m_base, incomplete_message);
    %%%%%:  887-block 150
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  887-block 151
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  887-block 152
call    6 never executed
    $$$$$:  887-block 253
call    7 never executed
    $$$$$:  887-block 257
    $$$$$:  887-block 258
    #####:  888:            return false;
    %%%%%:  888-block 154
        -:  889:         }
    #####:  890:         const charT* pc = m_position;
    #####:  891:         std::intmax_t i = this->m_traits.toi(pc, m_end, 10);
    %%%%%:  891-block 155
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  892:         if((i < 0) && syn_end)
    %%%%%:  892-block 156
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  892-block 157
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  893:         {
        -:  894:            // Check for a named capture, get the leftmost one if there is more than one:
    #####:  895:            const charT* base = m_position;
    #####:  896:            while((m_position != m_end) && (this->m_traits.syntax_type(*m_position) != syn_end))
    %%%%%:  896-block 158
    %%%%%:  896-block 160
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  896-block 161
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  896-block 163
    %%%%%:  896-block 164
    %%%%%:  896-block 165
branch  5 never executed
branch  6 never executed (fallthrough)
        -:  897:            {
    #####:  898:               ++m_position;
    %%%%%:  898-block 159
        -:  899:            }
    #####:  900:            i = hash_value_from_capture_name(base, m_position);
    %%%%%:  900-block 166
call    0 never executed
    #####:  901:            pc = m_position;
        -:  902:         }
    #####:  903:         if(negative)
    %%%%%:  903-block 168
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  904:            i = 1 + (static_cast<std::intmax_t>(m_mark_count) - i);
    %%%%%:  904-block 169
    #####:  905:         if(((i < hash_value_mask) && (i > 0)) || ((i >= hash_value_mask) && (this->m_pdata->get_id((int)i) > 0)))
    %%%%%:  905-block 170
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  905-block 171
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  905-block 172
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  905-block 173
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  905-block 174
branch  9 never executed (fallthrough)
branch 10 never executed
    %%%%%:  905-block 175
    %%%%%:  905-block 176
    %%%%%:  905-block 177
branch 11 never executed (fallthrough)
branch 12 never executed
        -:  906:         {
    #####:  907:            m_position = pc;
    #####:  908:            re_brace* pb = static_cast<re_brace*>(this->append_state(syntax_element_backref, sizeof(re_brace)));
    %%%%%:  908-block 178
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  909:            pb->index = (int)i;
    #####:  910:            pb->icase = this->flags() & regbase::icase;
    %%%%%:  910-block 179
call    0 never executed
    #####:  911:            if ((i > m_max_backref) && (i < hash_value_mask))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  911-block 181
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  912:               m_max_backref = i;
    %%%%%:  912-block 182
        -:  913:         }
        -:  914:         else
        -:  915:         {
    #####:  916:            fail(regex_constants::error_backref, m_position - m_base);
    %%%%%:  916-block 183
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  917:            return false;
    %%%%%:  917-block 184
        -:  918:         }
    #####:  919:         m_position = pc;
    #####:  920:         if(have_brace)
    %%%%%:  920-block 185
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  921:         {
    #####:  922:            if((m_position == m_end) || (this->m_traits.syntax_type(*m_position) != syn_end))
    %%%%%:  922-block 186
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  922-block 187
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  922-block 189
    %%%%%:  922-block 190
    %%%%%:  922-block 191
branch  5 never executed (fallthrough)
branch  6 never executed
        -:  923:            {
    #####:  924:               fail(regex_constants::error_escape, m_position - m_base, incomplete_message);
    %%%%%:  924-block 194
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  924-block 195
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  924-block 196
call    6 never executed
    $$$$$:  924-block 259
call    7 never executed
    $$$$$:  924-block 263
    $$$$$:  924-block 264
    #####:  925:               return false;
    %%%%%:  925-block 198
        -:  926:            }
    #####:  927:            ++m_position;
    %%%%%:  927-block 199
        -:  928:         }
    #####:  929:         return true;
    %%%%%:  929-block 200
        -:  930:      }
    #####:  931:      goto escape_type_class_jump;
    %%%%%:  931-block 202
    #####:  932:   case regex_constants::escape_type_control_v:
    #####:  933:      if(0 == (this->flags() & (regbase::main_option_type | regbase::no_perl_ex)))
    %%%%%:  933-block 203
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  934:         goto escape_type_class_jump;
    %%%%%:  934-block 205
        -:  935:      BOOST_REGEX_FALLTHROUGH;
        -:  936:   default:
    #####:  937:      this->append_literal(unescape_character());
    %%%%%:  937-block 206
call    0 never executed
call    1 never executed
    #####:  938:      break;
        -:  939:   }
    #####:  940:   return true;
    %%%%%:  940-block 209
        -:  941:}
        -:  942:
        -:  943:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE15parse_match_anyEv called 0 returned 0% blocks executed 0%
    #####:  944:bool basic_regex_parser<charT, traits>::parse_match_any()
        -:  945:{
        -:  946:   //
        -:  947:   // we have a '.' that can match any character:
        -:  948:   //
    #####:  949:   ++m_position;
        -:  950:   static_cast<re_dot*>(
    #####:  951:      this->append_state(syntax_element_wild, sizeof(re_dot))
    #####:  952:      )->mask = static_cast<unsigned char>(this->flags() & regbase::no_mod_s 
    %%%%%:  952-block 2
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  952-block 6
    %%%%%:  952-block 7
    %%%%%:  952-block 8
    %%%%%:  952-block 9
    %%%%%:  952-block 10
call    3 never executed
        -:  953:      ? BOOST_REGEX_DETAIL_NS::force_not_newline 
    #####:  954:         : this->flags() & regbase::mod_s ?
    %%%%%:  954-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  955:            BOOST_REGEX_DETAIL_NS::force_newline : BOOST_REGEX_DETAIL_NS::dont_care);
    #####:  956:   return true;
        -:  957:}
        -:  958:
        -:  959:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE12parse_repeatEmm called 2 returned 100% blocks executed 30%
        2:  960:bool basic_regex_parser<charT, traits>::parse_repeat(std::size_t low, std::size_t high)
        -:  961:{
        2:  962:   bool greedy = true;
        2:  963:   bool possessive = false;
        -:  964:   std::size_t insert_point;
        -:  965:   // 
        -:  966:   // when we get to here we may have a non-greedy ? mark still to come:
        -:  967:   //
        4:  968:   if((m_position != m_end) 
       4*:  969:      && (
        2:  969-block 2
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  969-block 7
    %%%%%:  969-block 8
        2:  969-block 9
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2:  970:            (0 == (this->flags() & (regbase::main_option_type | regbase::no_perl_ex)))
        2:  970-block 3
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  971:            || ((regbase::basic_syntax_group|regbase::emacs_ex) == (this->flags() & (regbase::main_option_type | regbase::emacs_ex)))
    %%%%%:  971-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  972:         )
        -:  973:      )
        -:  974:   {
        -:  975:      // OK we have a perl or emacs regex, check for a '?':
        2:  976:      if ((this->flags() & (regbase::main_option_type | regbase::mod_x | regbase::no_perl_ex)) == regbase::mod_x)
        2:  976-block 10
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  977:      {
        -:  978:         // whitespace skip:
    #####:  979:         while ((m_position != m_end) && this->m_traits.isctype(*m_position, this->m_mask_space))
    %%%%%:  979-block 12
    %%%%%:  979-block 14
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  979-block 15
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  979-block 17
    %%%%%:  979-block 18
    %%%%%:  979-block 19
branch  5 never executed
branch  6 never executed (fallthrough)
    #####:  980:            ++m_position;
    %%%%%:  980-block 13
        -:  981:      }
       2*:  982:      if((m_position != m_end) && (this->m_traits.syntax_type(*m_position) == regex_constants::syntax_question))
        2:  982-block 20
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  982-block 21
call    2 returned 2
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  982-block 23
        2:  982-block 24
        2:  982-block 25
branch  5 taken 0 (fallthrough)
branch  6 taken 2
        -:  983:      {
    #####:  984:         greedy = false;
    #####:  985:         ++m_position;
    %%%%%:  985-block 26
        -:  986:      }
        -:  987:      // for perl regexes only check for possessive ++ repeats.
        4:  988:      if((m_position != m_end)
        2:  989:         && (0 == (this->flags() & regbase::main_option_type)) 
        2:  989-block 28
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
       4*:  990:         && (this->m_traits.syntax_type(*m_position) == regex_constants::syntax_plus))
        2:  990-block 27
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  990-block 30
call    2 returned 2
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  990-block 32
        2:  990-block 33
        2:  990-block 34
branch  5 taken 0 (fallthrough)
branch  6 taken 2
        -:  991:      {
    #####:  992:         possessive = true;
    #####:  993:         ++m_position;
    %%%%%:  993-block 35
        -:  994:      }
        -:  995:   }
        2:  996:   if(0 == this->m_last_state)
        2:  996-block 36
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  997:   {
    #####:  998:      fail(regex_constants::error_badrepeat, std::distance(m_base, m_position), "Nothing to repeat.");
    %%%%%:  998-block 39
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  998-block 40
    %%%%%:  998-block 46
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  998-block 47
call    6 never executed
    $$$$$:  998-block 121
call    7 never executed
    $$$$$:  998-block 125
    #####:  999:      return false;
    %%%%%:  999-block 49
        -: 1000:   }
        2: 1001:   if(this->m_last_state->type == syntax_element_endmark)
        2: 1001-block 50
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1002:   {
        -: 1003:      // insert a repeat before the '(' matching the last ')':
    #####: 1004:      insert_point = this->m_paren_start;
    %%%%%: 1004-block 51
        -: 1005:   }
       2*: 1006:   else if((this->m_last_state->type == syntax_element_literal) && (static_cast<re_literal*>(this->m_last_state)->length > 1))
        2: 1006-block 52
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1006-block 53
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1007:   {
        -: 1008:      // the last state was a literal with more than one character, split it in two:
    #####: 1009:      re_literal* lit = static_cast<re_literal*>(this->m_last_state);
    #####: 1010:      charT c = (static_cast<charT*>(static_cast<void*>(lit+1)))[lit->length - 1];
    #####: 1011:      lit->length -= 1;
        -: 1012:      // now append new state:
    #####: 1013:      lit = static_cast<re_literal*>(this->append_state(syntax_element_literal, sizeof(re_literal) + sizeof(charT)));
    %%%%%: 1013-block 54
call    0 never executed
    #####: 1014:      lit->length = 1;
    #####: 1015:      (static_cast<charT*>(static_cast<void*>(lit+1)))[0] = c;
    #####: 1016:      insert_point = this->getoffset(this->m_last_state);
call    0 never executed
    #####: 1017:   }
        -: 1018:   else
        -: 1019:   {
        -: 1020:      // repeat the last state whatever it was, need to add some error checking here:
        2: 1021:      switch(this->m_last_state->type)
        2: 1021-block 57
branch  0 taken 0
branch  1 taken 2
        -: 1022:      {
    #####: 1023:      case syntax_element_start_line:
        -: 1024:      case syntax_element_end_line:
        -: 1025:      case syntax_element_word_boundary:
        -: 1026:      case syntax_element_within_word:
        -: 1027:      case syntax_element_word_start:
        -: 1028:      case syntax_element_word_end:
        -: 1029:      case syntax_element_buffer_start:
        -: 1030:      case syntax_element_buffer_end:
        -: 1031:      case syntax_element_alt:
        -: 1032:      case syntax_element_soft_buffer_end:
        -: 1033:      case syntax_element_restart_continue:
        -: 1034:      case syntax_element_jump:
        -: 1035:      case syntax_element_startmark:
        -: 1036:      case syntax_element_backstep:
        -: 1037:      case syntax_element_toggle_case:
        -: 1038:         // can't legally repeat any of the above:
    #####: 1039:         fail(regex_constants::error_badrepeat, m_position - m_base);
    %%%%%: 1039-block 58
call    0 never executed
    #####: 1040:         return false;
        2: 1041:      default:
        -: 1042:         // do nothing...
        2: 1043:         break;
        2: 1043-block 60
        -: 1044:      }
        2: 1045:      insert_point = this->getoffset(this->m_last_state);
        2: 1045-block 61
call    0 returned 2
        -: 1046:   }
        -: 1047:   //
        -: 1048:   // OK we now know what to repeat, so insert the repeat around it:
        -: 1049:   //
        2: 1050:   re_repeat* rep = static_cast<re_repeat*>(this->insert_state(insert_point, syntax_element_rep, re_repeater_size));
        2: 1050-block 63
call    0 returned 2
        2: 1051:   rep->min = low;
        2: 1052:   rep->max = high;
        2: 1053:   rep->greedy = greedy;
        2: 1054:   rep->leading = false;
        -: 1055:   // store our repeater position for later:
        2: 1056:   std::ptrdiff_t rep_off = this->getoffset(rep);
call    0 returned 2
        -: 1057:   // and append a back jump to the repeat:
        2: 1058:   re_jump* jmp = static_cast<re_jump*>(this->append_state(syntax_element_jump, sizeof(re_jump)));
call    0 returned 2
        2: 1059:   jmp->alt.i = rep_off - this->getoffset(jmp);
call    0 returned 2
        2: 1060:   this->m_pdata->m_data.align();
call    0 returned 2
        -: 1061:   // now fill in the alt jump for the repeat:
        2: 1062:   rep = static_cast<re_repeat*>(this->getaddress(rep_off));
call    0 returned 2
        2: 1063:   rep->alt.i = this->m_pdata->m_data.size() - rep_off;
call    0 returned 2
        -: 1064:   //
        -: 1065:   // If the repeat is possessive then bracket the repeat with a (?>...)
        -: 1066:   // independent sub-expression construct:
        -: 1067:   //
        2: 1068:   if(possessive)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1069:   {
    #####: 1070:      if(m_position != m_end)
    %%%%%: 1070-block 71
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1071:      {
        -: 1072:         //
        -: 1073:         // Check for illegal following quantifier, we have to do this here, because
        -: 1074:         // the extra states we insert below circumvents our usual error checking :-(
        -: 1075:         //
    #####: 1076:         bool contin = false;
    %%%%%: 1076-block 72
    #####: 1077:         do
    %%%%%: 1077-block 109
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1078:         {
    #####: 1079:            if ((this->flags() & (regbase::main_option_type | regbase::mod_x | regbase::no_perl_ex)) == regbase::mod_x)
    %%%%%: 1079-block 73
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1080:            {
        -: 1081:               // whitespace skip:
    #####: 1082:               while ((m_position != m_end) && this->m_traits.isctype(*m_position, this->m_mask_space))
    %%%%%: 1082-block 75
    %%%%%: 1082-block 77
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1082-block 78
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1082-block 80
    %%%%%: 1082-block 81
    %%%%%: 1082-block 82
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 1083:                  ++m_position;
    %%%%%: 1083-block 76
        -: 1084:            }
    #####: 1085:            if (m_position != m_end)
    %%%%%: 1085-block 83
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1086:            {
    #####: 1087:               switch (this->m_traits.syntax_type(*m_position))
    %%%%%: 1087-block 84
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1088:               {
    #####: 1089:               case regex_constants::syntax_star:
        -: 1090:               case regex_constants::syntax_plus:
        -: 1091:               case regex_constants::syntax_question:
        -: 1092:               case regex_constants::syntax_open_brace:
    #####: 1093:                  fail(regex_constants::error_badrepeat, m_position - m_base);
    %%%%%: 1093-block 86
call    0 never executed
    #####: 1094:                  return false;
    #####: 1095:               case regex_constants::syntax_open_mark:
        -: 1096:                  // Do we have a comment?  If so we need to skip it here...
    #####: 1097:                  if ((m_position + 2 < m_end) && this->m_traits.syntax_type(*(m_position + 1)) == regex_constants::syntax_question
    %%%%%: 1097-block 89
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1098:                     && this->m_traits.syntax_type(*(m_position + 2)) == regex_constants::syntax_hash)
    %%%%%: 1098-block 88
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1098-block 91
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1098-block 93
    %%%%%: 1098-block 94
    %%%%%: 1098-block 95
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1099:                  {
    #####: 1100:                     while ((m_position != m_end)
    %%%%%: 1100-block 96
    #####: 1101:                        && (this->m_traits.syntax_type(*m_position++) != regex_constants::syntax_close_mark)) {
    %%%%%: 1101-block 97
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1101-block 98
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1101-block 100
    %%%%%: 1101-block 101
    %%%%%: 1101-block 102
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 1102:                     }
    #####: 1103:                     contin = true;
    %%%%%: 1103-block 103
        -: 1104:                  }
        -: 1105:                  else
    #####: 1106:                     contin = false;
    %%%%%: 1106-block 104
    #####: 1107:                  break;
    %%%%%: 1107-block 105
    #####: 1108:               default:
    #####: 1109:                  contin = false;
    %%%%%: 1109-block 106
        -: 1110:               }
        -: 1111:            }
        -: 1112:            else
    #####: 1113:               contin = false;
    %%%%%: 1113-block 108
        -: 1114:         } while (contin);
        -: 1115:      }
    #####: 1116:      re_brace* pb = static_cast<re_brace*>(this->insert_state(insert_point, syntax_element_startmark, sizeof(re_brace)));
    %%%%%: 1116-block 110
call    0 never executed
    #####: 1117:      pb->index = -3;
    #####: 1118:      pb->icase = this->flags() & regbase::icase;
call    0 never executed
    #####: 1119:      jmp = static_cast<re_jump*>(this->insert_state(insert_point + sizeof(re_brace), syntax_element_jump, sizeof(re_jump)));
call    0 never executed
    #####: 1120:      this->m_pdata->m_data.align();
call    0 never executed
    #####: 1121:      jmp->alt.i = this->m_pdata->m_data.size() - this->getoffset(jmp);
call    0 never executed
call    1 never executed
    #####: 1122:      pb = static_cast<re_brace*>(this->append_state(syntax_element_endmark, sizeof(re_brace)));
call    0 never executed
    #####: 1123:      pb->index = -3;
    #####: 1124:      pb->icase = this->flags() & regbase::icase;
call    0 never executed
        -: 1125:   }
        2: 1126:   return true;
        2: 1126-block 119
        -: 1127:}
        -: 1128:
        -: 1129:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE18parse_repeat_rangeEb called 2 returned 100% blocks executed 24%
        2: 1130:bool basic_regex_parser<charT, traits>::parse_repeat_range(bool isbasic)
        -: 1131:{
        -: 1132:   static const char incomplete_message[] = "Missing } in quantified repetition.";
        -: 1133:   //
        -: 1134:   // parse a repeat-range:
        -: 1135:   //
        -: 1136:   std::size_t min, max;
        -: 1137:   std::intmax_t v;
        -: 1138:   // skip whitespace:
       2*: 1139:   while((m_position != m_end) && this->m_traits.isctype(*m_position, this->m_mask_space))
        2: 1139-block 2
        2: 1139-block 4
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1139-block 5
call    2 returned 2
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 1139-block 7
        2: 1139-block 8
        2: 1139-block 9
branch  5 taken 0
branch  6 taken 2 (fallthrough)
    #####: 1140:      ++m_position;
    %%%%%: 1140-block 3
        2: 1141:   if(this->m_position == this->m_end)
        2: 1141-block 10
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1142:   {
    #####: 1143:      if(this->flags() & (regbase::main_option_type | regbase::no_perl_ex))
    %%%%%: 1143-block 11
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1144:      {
    #####: 1145:         fail(regex_constants::error_brace, this->m_position - this->m_base, incomplete_message);
    %%%%%: 1145-block 15
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1145-block 16
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1145-block 17
call    6 never executed
    $$$$$: 1145-block 167
call    7 never executed
    $$$$$: 1145-block 171
    $$$$$: 1145-block 172
call    8 never executed
    #####: 1146:         return false;
    %%%%%: 1146-block 19
        -: 1147:      }
        -: 1148:      // Treat the opening '{' as a literal character, rewind to start of error:
    #####: 1149:      --m_position;
    #####: 1150:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_brace) --m_position;
    %%%%%: 1150-block 20
    %%%%%: 1150-block 21
    %%%%%: 1150-block 22
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1151:      return parse_literal();
    %%%%%: 1151-block 24
call    0 never executed
        -: 1152:   }
        -: 1153:   // get min:
        2: 1154:   v = this->m_traits.toi(m_position, m_end, 10);
        2: 1154-block 26
call    0 returned 2
        -: 1155:   // skip whitespace:
       2*: 1156:   if((v < 0) || (v > umax()))
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1156-block 28
call    2 returned 2
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 1156-block 30
        2: 1156-block 31
        2: 1156-block 32
branch  5 taken 0 (fallthrough)
branch  6 taken 2
        -: 1157:   {
    #####: 1158:      if(this->flags() & (regbase::main_option_type | regbase::no_perl_ex))
    %%%%%: 1158-block 33
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1159:      {
    #####: 1160:         fail(regex_constants::error_brace, this->m_position - this->m_base, incomplete_message);
    %%%%%: 1160-block 37
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1160-block 38
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1160-block 39
call    6 never executed
    $$$$$: 1160-block 173
call    7 never executed
    $$$$$: 1160-block 177
    $$$$$: 1160-block 178
call    8 never executed
    #####: 1161:         return false;
    %%%%%: 1161-block 41
        -: 1162:      }
        -: 1163:      // Treat the opening '{' as a literal character, rewind to start of error:
    #####: 1164:      --m_position;
    #####: 1165:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_brace) --m_position;
    %%%%%: 1165-block 42
    %%%%%: 1165-block 43
    %%%%%: 1165-block 44
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1166:      return parse_literal();
    %%%%%: 1166-block 46
call    0 never executed
        -: 1167:   }
       2*: 1168:   while((m_position != m_end) && this->m_traits.isctype(*m_position, this->m_mask_space))
        2: 1168-block 48
        2: 1168-block 50
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1168-block 51
call    2 returned 2
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 1168-block 53
        2: 1168-block 54
        2: 1168-block 55
branch  5 taken 0
branch  6 taken 2 (fallthrough)
    #####: 1169:      ++m_position;
    %%%%%: 1169-block 49
        2: 1170:   if(this->m_position == this->m_end)
        2: 1170-block 56
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1171:   {
    #####: 1172:      if(this->flags() & (regbase::main_option_type | regbase::no_perl_ex))
    %%%%%: 1172-block 57
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1173:      {
    #####: 1174:         fail(regex_constants::error_brace, this->m_position - this->m_base, incomplete_message);
    %%%%%: 1174-block 61
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1174-block 62
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1174-block 63
call    6 never executed
    $$$$$: 1174-block 179
call    7 never executed
    $$$$$: 1174-block 183
    $$$$$: 1174-block 184
call    8 never executed
    #####: 1175:         return false;
    %%%%%: 1175-block 65
        -: 1176:      }
        -: 1177:      // Treat the opening '{' as a literal character, rewind to start of error:
    #####: 1178:      --m_position;
    #####: 1179:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_brace) --m_position;
    %%%%%: 1179-block 66
    %%%%%: 1179-block 67
    %%%%%: 1179-block 68
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1180:      return parse_literal();
    %%%%%: 1180-block 70
call    0 never executed
        -: 1181:   }
        2: 1182:   min = static_cast<std::size_t>(v);
        -: 1183:   // see if we have a comma:
        2: 1184:   if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_comma)
        2: 1184-block 72
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -: 1185:   {
        -: 1186:      // move on and error check:
        1: 1187:      ++m_position;
        -: 1188:      // skip whitespace:
       1*: 1189:      while((m_position != m_end) && this->m_traits.isctype(*m_position, this->m_mask_space))
        1: 1189-block 74
        1: 1189-block 76
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1189-block 77
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 1189-block 79
        1: 1189-block 80
        1: 1189-block 81
branch  5 taken 0
branch  6 taken 1 (fallthrough)
    #####: 1190:         ++m_position;
    %%%%%: 1190-block 75
        1: 1191:      if(this->m_position == this->m_end)
        1: 1191-block 82
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1192:      {
    #####: 1193:         if(this->flags() & (regbase::main_option_type | regbase::no_perl_ex))
    %%%%%: 1193-block 83
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1194:         {
    #####: 1195:            fail(regex_constants::error_brace, this->m_position - this->m_base, incomplete_message);
    %%%%%: 1195-block 87
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1195-block 88
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1195-block 89
call    6 never executed
    $$$$$: 1195-block 185
call    7 never executed
    $$$$$: 1195-block 189
    $$$$$: 1195-block 190
call    8 never executed
    #####: 1196:            return false;
    %%%%%: 1196-block 91
        -: 1197:         }
        -: 1198:         // Treat the opening '{' as a literal character, rewind to start of error:
    #####: 1199:         --m_position;
    #####: 1200:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_brace) --m_position;
    %%%%%: 1200-block 92
    %%%%%: 1200-block 93
    %%%%%: 1200-block 94
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1201:         return parse_literal();
    %%%%%: 1201-block 96
call    0 never executed
        -: 1202:      }
        -: 1203:      // get the value if any:
        1: 1204:      v = this->m_traits.toi(m_position, m_end, 10);
        1: 1204-block 98
call    0 returned 1
       1*: 1205:      max = ((v >= 0) && (v < umax())) ? (std::size_t)v : (std::numeric_limits<std::size_t>::max)();
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1205-block 100
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
        1: 1205-block 102
call    5 returned 1
    %%%%%: 1205-block 103
        1: 1205-block 104
        -: 1206:   }
        -: 1207:   else
        -: 1208:   {
        -: 1209:      // no comma, max = min:
        1: 1210:      max = min;
        1: 1210-block 105
        -: 1211:   }
        -: 1212:   // skip whitespace:
       2*: 1213:   while((m_position != m_end) && this->m_traits.isctype(*m_position, this->m_mask_space))
        2: 1213-block 106
        2: 1213-block 108
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1213-block 109
call    2 returned 2
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 1213-block 111
        2: 1213-block 112
        2: 1213-block 113
branch  5 taken 0
branch  6 taken 2 (fallthrough)
    #####: 1214:      ++m_position;
    %%%%%: 1214-block 107
        -: 1215:   // OK now check trailing }:
        2: 1216:   if(this->m_position == this->m_end)
        2: 1216-block 114
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1217:   {
    #####: 1218:      if(this->flags() & (regbase::main_option_type | regbase::no_perl_ex))
    %%%%%: 1218-block 115
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1219:      {
    #####: 1220:         fail(regex_constants::error_brace, this->m_position - this->m_base, incomplete_message);
    %%%%%: 1220-block 119
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1220-block 120
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1220-block 121
call    6 never executed
    $$$$$: 1220-block 191
call    7 never executed
    $$$$$: 1220-block 195
    $$$$$: 1220-block 196
call    8 never executed
    #####: 1221:         return false;
    %%%%%: 1221-block 123
        -: 1222:      }
        -: 1223:      // Treat the opening '{' as a literal character, rewind to start of error:
    #####: 1224:      --m_position;
    #####: 1225:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_brace) --m_position;
    %%%%%: 1225-block 124
    %%%%%: 1225-block 125
    %%%%%: 1225-block 126
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1226:      return parse_literal();
    %%%%%: 1226-block 128
call    0 never executed
        -: 1227:   }
        2: 1228:   if(isbasic)
        2: 1228-block 130
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1229:   {
    #####: 1230:      if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_escape)
    %%%%%: 1230-block 131
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1231:      {
    #####: 1232:         ++m_position;
    #####: 1233:         if(this->m_position == this->m_end)
    %%%%%: 1233-block 133
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1234:         {
    #####: 1235:            fail(regex_constants::error_brace, this->m_position - this->m_base, incomplete_message);
    %%%%%: 1235-block 136
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1235-block 137
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1235-block 138
call    6 never executed
    $$$$$: 1235-block 197
call    7 never executed
    $$$$$: 1235-block 201
    $$$$$: 1235-block 202
call    8 never executed
    #####: 1236:            return false;
    %%%%%: 1236-block 140
        -: 1237:         }
        -: 1238:      }
        -: 1239:      else
        -: 1240:      {
    #####: 1241:         fail(regex_constants::error_brace, this->m_position - this->m_base, incomplete_message);
    %%%%%: 1241-block 143
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1241-block 144
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1241-block 145
call    6 never executed
    $$$$$: 1241-block 203
call    7 never executed
    $$$$$: 1241-block 207
    #####: 1242:         return false;
    %%%%%: 1242-block 147
        -: 1243:      }
        -: 1244:   }
        2: 1245:   if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_close_brace)
        2: 1245-block 148
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2: 1246:      ++m_position;
        2: 1246-block 150
        -: 1247:   else
        -: 1248:   {
        -: 1249:      // Treat the opening '{' as a literal character, rewind to start of error:
    #####: 1250:      --m_position;
    #####: 1251:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_brace) --m_position;
    %%%%%: 1251-block 151
    %%%%%: 1251-block 152
    %%%%%: 1251-block 153
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1252:      return parse_literal();
    %%%%%: 1252-block 155
call    0 never executed
        -: 1253:   }
        -: 1254:   //
        -: 1255:   // finally go and add the repeat, unless error:
        -: 1256:   //
        2: 1257:   if(min > max)
        2: 1257-block 157
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1258:   {
        -: 1259:      // Backtrack to error location:
    #####: 1260:      m_position -= 2;
    #####: 1261:      while(this->m_traits.isctype(*m_position, this->m_word_mask)) --m_position;
    %%%%%: 1261-block 158
    %%%%%: 1261-block 159
    %%%%%: 1261-block 160
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1262:         ++m_position;
    #####: 1263:      fail(regex_constants::error_badbrace, m_position - m_base);
    %%%%%: 1263-block 162
call    0 never executed
    #####: 1264:      return false;
        -: 1265:   }
        2: 1266:   return parse_repeat(min, max);
        2: 1266-block 164
call    0 returned 2
        -: 1267:}
        -: 1268:
        -: 1269:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9parse_altEv called 0 returned 0% blocks executed 0%
    #####: 1270:bool basic_regex_parser<charT, traits>::parse_alt()
        -: 1271:{
        -: 1272:   //
        -: 1273:   // error check: if there have been no previous states,
        -: 1274:   // or if the last state was a '(' then error:
        -: 1275:   //
    #####: 1276:   if(
    #####: 1277:      ((this->m_last_state == 0) || (this->m_last_state->type == syntax_element_startmark))
    %%%%%: 1277-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1278:      &&
    %%%%%: 1278-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1278-block 8
    %%%%%: 1278-block 9
    %%%%%: 1278-block 10
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1279:      !(
    #####: 1280:         ((this->flags() & regbase::main_option_type) == regbase::perl_syntax_group)
    %%%%%: 1280-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1281:           &&
    #####: 1282:         ((this->flags() & regbase::no_empty_expressions) == 0)
    %%%%%: 1282-block 6
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1283:        )
        -: 1284:      )
        -: 1285:   {
    #####: 1286:      fail(regex_constants::error_empty, this->m_position - this->m_base, "A regular expression cannot start with the alternation operator |.");
    %%%%%: 1286-block 13
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1286-block 14
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1286-block 15
call    6 never executed
    $$$$$: 1286-block 36
call    7 never executed
    $$$$$: 1286-block 40
    $$$$$: 1286-block 41
    #####: 1287:      return false;
    %%%%%: 1287-block 17
        -: 1288:   }
        -: 1289:   //
        -: 1290:   // Reset mark count if required:
        -: 1291:   //
    #####: 1292:   if(m_max_mark < m_mark_count)
    %%%%%: 1292-block 18
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1293:      m_max_mark = m_mark_count;
    %%%%%: 1293-block 19
    #####: 1294:   if(m_mark_reset >= 0)
    %%%%%: 1294-block 20
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1295:      m_mark_count = m_mark_reset;
    %%%%%: 1295-block 21
        -: 1296:
    #####: 1297:   ++m_position;
        -: 1298:   //
        -: 1299:   // we need to append a trailing jump: 
        -: 1300:   //
    #####: 1301:   re_syntax_base* pj = this->append_state(BOOST_REGEX_DETAIL_NS::syntax_element_jump, sizeof(re_jump));
    %%%%%: 1301-block 22
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1302:   std::ptrdiff_t jump_offset = this->getoffset(pj);
    %%%%%: 1302-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1303:   //
        -: 1304:   // now insert the alternative:
        -: 1305:   //
    #####: 1306:   re_alt* palt = static_cast<re_alt*>(this->insert_state(this->m_alt_insert_point, syntax_element_alt, re_alt_size));
    %%%%%: 1306-block 24
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1307:   jump_offset += re_alt_size;
    #####: 1308:   this->m_pdata->m_data.align();
    %%%%%: 1308-block 25
call    0 never executed
    #####: 1309:   palt->alt.i = this->m_pdata->m_data.size() - this->getoffset(palt);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 1310:   //
        -: 1311:   // update m_alt_insert_point so that the next alternate gets
        -: 1312:   // inserted at the start of the second of the two we've just created:
        -: 1313:   //
    #####: 1314:   this->m_alt_insert_point = this->m_pdata->m_data.size();
    %%%%%: 1314-block 28
call    0 never executed
        -: 1315:   //
        -: 1316:   // the start of this alternative must have a case changes state
        -: 1317:   // if the current block has messed around with case changes:
        -: 1318:   //
    #####: 1319:   if(m_has_case_change)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1320:   {
        -: 1321:      static_cast<re_case*>(
    #####: 1322:         this->append_state(syntax_element_toggle_case, sizeof(re_case))
    #####: 1323:         )->icase = this->m_icase;
    %%%%%: 1323-block 30
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1323-block 31
        -: 1324:   }
        -: 1325:   //
        -: 1326:   // push the alternative onto our stack, a recursive
        -: 1327:   // implementation here is easier to understand (and faster
        -: 1328:   // as it happens), but causes all kinds of stack overflow problems
        -: 1329:   // on programs with small stacks (COM+).
        -: 1330:   //
    #####: 1331:   m_alt_jumps.push_back(jump_offset);
    %%%%%: 1331-block 32
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1332:   return true;
    %%%%%: 1332-block 33
        -: 1333:}
        -: 1334:
        -: 1335:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9parse_setEv called 2 returned 100% blocks executed 27%
        2: 1336:bool basic_regex_parser<charT, traits>::parse_set()
        -: 1337:{
        -: 1338:   static const char incomplete_message[] = "Character set declaration starting with [ terminated prematurely - either no ] was found or the set had no content.";
        2: 1339:   ++m_position;
        2: 1340:   if(m_position == m_end)
        2: 1340-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1341:   {
    #####: 1342:      fail(regex_constants::error_brack, m_position - m_base, incomplete_message);
    %%%%%: 1342-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1342-block 6
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1342-block 7
call    6 never executed
    $$$$$: 1342-block 52
call    7 never executed
    $$$$$: 1342-block 56
    $$$$$: 1342-block 57
    #####: 1343:      return false;
    %%%%%: 1343-block 9
        -: 1344:   }
        2: 1345:   basic_char_set<charT, traits> char_set;
        2: 1345-block 10
call    0 returned 2
        -: 1346:
        2: 1347:   const charT* base = m_position;  // where the '[' was
        2: 1348:   const charT* item_base = m_position;  // where the '[' or '^' was
        -: 1349:
        9: 1350:   while(m_position != m_end)
        9: 1350-block 47
branch  0 taken 9
branch  1 taken 0 (fallthrough)
        -: 1351:   {
        9: 1352:      switch(this->m_traits.syntax_type(*m_position))
        9: 1352-block 12
call    0 returned 9
branch  1 taken 0
branch  2 taken 2
branch  3 taken 0
branch  4 taken 0
branch  5 taken 7
        -: 1353:      {
    #####: 1354:      case regex_constants::syntax_caret:
    #####: 1355:         if(m_position == base)
    %%%%%: 1355-block 14
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1356:         {
    #####: 1357:            char_set.negate();
    %%%%%: 1357-block 15
call    0 never executed
    #####: 1358:            ++m_position;
    #####: 1359:            item_base = m_position;
        -: 1360:         }
        -: 1361:         else
    #####: 1362:            parse_set_literal(char_set);
    %%%%%: 1362-block 17
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1363:         break;
    %%%%%: 1363-block 18
        2: 1364:      case regex_constants::syntax_close_set:
        2: 1365:         if(m_position == item_base)
        2: 1365-block 19
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1366:         {
    #####: 1367:            parse_set_literal(char_set);
    %%%%%: 1367-block 20
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1368:            break;
    %%%%%: 1368-block 21
        -: 1369:         }
        -: 1370:         else
        -: 1371:         {
        2: 1372:            ++m_position;
        2: 1373:            if(0 == this->append_set(char_set))
        2: 1373-block 22
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 1373-block 23
branch  3 taken 0 (fallthrough)
branch  4 taken 2
        -: 1374:            {
    #####: 1375:               fail(regex_constants::error_ctype, m_position - m_base);
    %%%%%: 1375-block 24
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1376:               return false;
    %%%%%: 1376-block 25
        -: 1377:            }
        -: 1378:         }
        2: 1379:         return true;
        2: 1379-block 26
    #####: 1380:      case regex_constants::syntax_open_set:
    #####: 1381:         if(parse_inner_set(char_set))
    %%%%%: 1381-block 27
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1381-block 28
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1382:            break;
    %%%%%: 1382-block 29
    #####: 1383:         return true;
    %%%%%: 1383-block 30
    #####: 1384:      case regex_constants::syntax_escape:
        -: 1385:         {
        -: 1386:            // 
        -: 1387:            // look ahead and see if this is a character class shortcut
        -: 1388:            // \d \w \s etc...
        -: 1389:            //
    #####: 1390:            ++m_position;
    #####: 1391:            if(this->m_traits.escape_syntax_type(*m_position)
    %%%%%: 1391-block 31
call    0 never executed
    #####: 1392:               == regex_constants::escape_type_class)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1393:            {
    #####: 1394:               char_class_type m = this->m_traits.lookup_classname(m_position, m_position+1);
    %%%%%: 1394-block 33
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1395:               if(m != 0)
    %%%%%: 1395-block 34
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1396:               {
    #####: 1397:                  char_set.add_class(m);
    %%%%%: 1397-block 35
call    0 never executed
    #####: 1398:                  ++m_position;
    #####: 1399:                  break;
        -: 1400:               }
        -: 1401:            }
    #####: 1402:            else if(this->m_traits.escape_syntax_type(*m_position)
    %%%%%: 1402-block 37
call    0 never executed
    #####: 1403:               == regex_constants::escape_type_not_class)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1404:            {
        -: 1405:               // negated character class:
    #####: 1406:               char_class_type m = this->m_traits.lookup_classname(m_position, m_position+1);
    %%%%%: 1406-block 39
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1407:               if(m != 0)
    %%%%%: 1407-block 40
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1408:               {
    #####: 1409:                  char_set.add_negated_class(m);
    %%%%%: 1409-block 41
call    0 never executed
    #####: 1410:                  ++m_position;
    #####: 1411:                  break;
        -: 1412:               }
        -: 1413:            }
        -: 1414:            // not a character class, just a regular escape:
    #####: 1415:            --m_position;
    #####: 1416:            parse_set_literal(char_set);
    %%%%%: 1416-block 43
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1417:            break;
    %%%%%: 1417-block 44
        -: 1418:         }
        7: 1419:      default:
        7: 1420:         parse_set_literal(char_set);
        7: 1420-block 45
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1421:         break;
        7: 1421-block 46
        -: 1422:      }
        -: 1423:   }
    #####: 1424:   return m_position != m_end;
    %%%%%: 1424-block 48
        2: 1425:}
        2: 1425-block 49
call    0 returned 2
    $$$$$: 1425-block 58
call    1 never executed
        -: 1426:
        -: 1427:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE15parse_inner_setERNS0_14basic_char_setIcS5_EE called 0 returned 0% blocks executed 0%
    #####: 1428:bool basic_regex_parser<charT, traits>::parse_inner_set(basic_char_set<charT, traits>& char_set)
        -: 1429:{
        -: 1430:   static const char incomplete_message[] = "Character class declaration starting with [ terminated prematurely - either no ] was found or the set had no content.";
        -: 1431:   //
        -: 1432:   // we have either a character class [:name:]
        -: 1433:   // a collating element [.name.]
        -: 1434:   // or an equivalence class [=name=]
        -: 1435:   //
    #####: 1436:   if(m_end == ++m_position)
    %%%%%: 1436-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1437:   {
    #####: 1438:      fail(regex_constants::error_brack, m_position - m_base, incomplete_message);
    %%%%%: 1438-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1438-block 6
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1438-block 7
call    6 never executed
    $$$$$: 1438-block 166
call    7 never executed
    $$$$$: 1438-block 170
    $$$$$: 1438-block 171
call    8 never executed
    #####: 1439:      return false;
    %%%%%: 1439-block 9
        -: 1440:   }
    #####: 1441:   switch(this->m_traits.syntax_type(*m_position))
    %%%%%: 1441-block 10
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1442:   {
    #####: 1443:   case regex_constants::syntax_dot:
        -: 1444:      //
        -: 1445:      // a collating element is treated as a literal:
        -: 1446:      //
    #####: 1447:      --m_position;
    #####: 1448:      parse_set_literal(char_set);
    %%%%%: 1448-block 12
call    0 never executed
    #####: 1449:      return true;
    #####: 1450:   case regex_constants::syntax_colon:
        -: 1451:      {
        -: 1452:      // check that character classes are actually enabled:
    #####: 1453:      if((this->flags() & (regbase::main_option_type | regbase::no_char_classes)) 
    %%%%%: 1453-block 14
call    0 never executed
    #####: 1454:         == (regbase::basic_syntax_group  | regbase::no_char_classes))
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1455:      {
    #####: 1456:         --m_position;
    #####: 1457:         parse_set_literal(char_set);
    %%%%%: 1457-block 16
call    0 never executed
    #####: 1458:         return true;
        -: 1459:      }
        -: 1460:      // skip the ':'
    #####: 1461:      if(m_end == ++m_position)
    %%%%%: 1461-block 18
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1462:      {
    #####: 1463:         fail(regex_constants::error_brack, m_position - m_base, incomplete_message);
    %%%%%: 1463-block 21
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1463-block 22
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1463-block 23
call    6 never executed
    $$$$$: 1463-block 172
call    7 never executed
    $$$$$: 1463-block 176
    $$$$$: 1463-block 177
call    8 never executed
    #####: 1464:         return false;
    %%%%%: 1464-block 25
        -: 1465:      }
    #####: 1466:      const charT* name_first = m_position;
        -: 1467:      // skip at least one character, then find the matching ':]'
    #####: 1468:      if(m_end == ++m_position)
    %%%%%: 1468-block 26
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1469:      {
    #####: 1470:         fail(regex_constants::error_brack, m_position - m_base, incomplete_message);
    %%%%%: 1470-block 29
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1470-block 30
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1470-block 31
call    6 never executed
    $$$$$: 1470-block 178
call    7 never executed
    $$$$$: 1470-block 182
    $$$$$: 1470-block 183
call    8 never executed
    #####: 1471:         return false;
    %%%%%: 1471-block 33
        -: 1472:      }
    #####: 1473:      while((m_position != m_end) 
    %%%%%: 1473-block 34
    #####: 1474:         && (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_colon)) 
    %%%%%: 1474-block 36
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1474-block 37
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1474-block 39
    %%%%%: 1474-block 40
    %%%%%: 1474-block 41
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 1475:         ++m_position;
    %%%%%: 1475-block 35
    #####: 1476:      const charT* name_last = m_position;
    #####: 1477:      if(m_end == m_position)
    %%%%%: 1477-block 42
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1478:      {
    #####: 1479:         fail(regex_constants::error_brack, m_position - m_base, incomplete_message);
    %%%%%: 1479-block 45
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1479-block 46
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1479-block 47
call    6 never executed
    $$$$$: 1479-block 184
call    7 never executed
    $$$$$: 1479-block 188
    $$$$$: 1479-block 189
call    8 never executed
    #####: 1480:         return false;
    %%%%%: 1480-block 49
        -: 1481:      }
    #####: 1482:      if((m_end == ++m_position) 
    #####: 1483:         || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_set))
    %%%%%: 1483-block 50
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1483-block 51
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1483-block 53
    %%%%%: 1483-block 54
    %%%%%: 1483-block 55
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1484:      {
    #####: 1485:         fail(regex_constants::error_brack, m_position - m_base, incomplete_message);
    %%%%%: 1485-block 58
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1485-block 59
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1485-block 60
call    6 never executed
    $$$$$: 1485-block 190
call    7 never executed
    $$$$$: 1485-block 194
    $$$$$: 1485-block 195
call    8 never executed
    #####: 1486:         return false;
    %%%%%: 1486-block 62
        -: 1487:      }
        -: 1488:      //
        -: 1489:      // check for negated class:
        -: 1490:      //
    #####: 1491:      bool negated = false;
    #####: 1492:      if(this->m_traits.syntax_type(*name_first) == regex_constants::syntax_caret)
    %%%%%: 1492-block 63
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1493:      {
    #####: 1494:         ++name_first;
    #####: 1495:         negated = true;
    %%%%%: 1495-block 65
        -: 1496:      }
        -: 1497:      typedef typename traits::char_class_type m_type;
    #####: 1498:      m_type m = this->m_traits.lookup_classname(name_first, name_last);
    %%%%%: 1498-block 66
call    0 never executed
    #####: 1499:      if(m == 0)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1500:      {
    #####: 1501:         if(char_set.empty() && (name_last - name_first == 1))
    %%%%%: 1501-block 68
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1501-block 70
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1501-block 71
    %%%%%: 1501-block 72
    %%%%%: 1501-block 73
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1502:         {
        -: 1503:            // maybe a special case:
    #####: 1504:            ++m_position;
    #####: 1505:            if( (m_position != m_end) 
    #####: 1506:               && (this->m_traits.syntax_type(*m_position) 
    %%%%%: 1506-block 74
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1506-block 75
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1506-block 77
    %%%%%: 1506-block 78
    %%%%%: 1506-block 79
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1507:                  == regex_constants::syntax_close_set))
        -: 1508:            {
    #####: 1509:               if(this->m_traits.escape_syntax_type(*name_first) 
    %%%%%: 1509-block 80
call    0 never executed
    #####: 1510:                  == regex_constants::escape_type_left_word)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1511:               {
    #####: 1512:                  ++m_position;
    #####: 1513:                  this->append_state(syntax_element_word_start);
    %%%%%: 1513-block 82
call    0 never executed
    #####: 1514:                  return false;
        -: 1515:               }
    #####: 1516:               if(this->m_traits.escape_syntax_type(*name_first) 
    %%%%%: 1516-block 84
call    0 never executed
    #####: 1517:                  == regex_constants::escape_type_right_word)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1518:               {
    #####: 1519:                  ++m_position;
    #####: 1520:                  this->append_state(syntax_element_word_end);
    %%%%%: 1520-block 86
call    0 never executed
    #####: 1521:                  return false;
        -: 1522:               }
        -: 1523:            }
        -: 1524:         }
    #####: 1525:         fail(regex_constants::error_ctype, name_first - m_base);
    %%%%%: 1525-block 88
call    0 never executed
    #####: 1526:         return false;
        -: 1527:      }
    #####: 1528:      if(!negated)
    %%%%%: 1528-block 90
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1529:         char_set.add_class(m);
    %%%%%: 1529-block 91
call    0 never executed
        -: 1530:      else
    #####: 1531:         char_set.add_negated_class(m);
    %%%%%: 1531-block 92
call    0 never executed
    #####: 1532:      ++m_position;
    #####: 1533:      break;
    %%%%%: 1533-block 93
        -: 1534:   }
    #####: 1535:   case regex_constants::syntax_equal:
        -: 1536:      {
        -: 1537:      // skip the '='
    #####: 1538:      if(m_end == ++m_position)
    %%%%%: 1538-block 94
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1539:      {
    #####: 1540:         fail(regex_constants::error_brack, m_position - m_base, incomplete_message);
    %%%%%: 1540-block 97
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1540-block 98
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1540-block 99
call    6 never executed
    $$$$$: 1540-block 196
call    7 never executed
    $$$$$: 1540-block 200
    $$$$$: 1540-block 201
    #####: 1541:         return false;
    %%%%%: 1541-block 101
    %%%%%: 1541-block 160
        -: 1542:      }
    #####: 1543:      const charT* name_first = m_position;
        -: 1544:      // skip at least one character, then find the matching '=]'
    #####: 1545:      if(m_end == ++m_position)
    %%%%%: 1545-block 102
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1546:      {
    #####: 1547:         fail(regex_constants::error_brack, m_position - m_base, incomplete_message);
    %%%%%: 1547-block 105
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1547-block 106
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1547-block 107
call    6 never executed
    $$$$$: 1547-block 202
call    7 never executed
    $$$$$: 1547-block 206
    $$$$$: 1547-block 207
    #####: 1548:         return false;
    %%%%%: 1548-block 109
        -: 1549:      }
    #####: 1550:      while((m_position != m_end) 
    %%%%%: 1550-block 110
    #####: 1551:         && (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_equal)) 
    %%%%%: 1551-block 112
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1551-block 113
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1551-block 115
    %%%%%: 1551-block 116
    %%%%%: 1551-block 117
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 1552:         ++m_position;
    %%%%%: 1552-block 111
    #####: 1553:      const charT* name_last = m_position;
    #####: 1554:      if(m_end == m_position)
    %%%%%: 1554-block 118
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1555:      {
    #####: 1556:         fail(regex_constants::error_brack, m_position - m_base, incomplete_message);
    %%%%%: 1556-block 121
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1556-block 122
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1556-block 123
call    6 never executed
    $$$$$: 1556-block 208
call    7 never executed
    $$$$$: 1556-block 212
    $$$$$: 1556-block 213
    #####: 1557:         return false;
    %%%%%: 1557-block 125
        -: 1558:      }
    #####: 1559:      if((m_end == ++m_position) 
    #####: 1560:         || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_set))
    %%%%%: 1560-block 126
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1560-block 127
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1560-block 129
    %%%%%: 1560-block 130
    %%%%%: 1560-block 131
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1561:      {
    #####: 1562:         fail(regex_constants::error_brack, m_position - m_base, incomplete_message);
    %%%%%: 1562-block 134
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1562-block 135
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1562-block 136
call    6 never executed
    $$$$$: 1562-block 214
call    7 never executed
    $$$$$: 1562-block 218
    $$$$$: 1562-block 219
    #####: 1563:         return false;
    %%%%%: 1563-block 138
        -: 1564:      }
    #####: 1565:      string_type m = this->m_traits.lookup_collatename(name_first, name_last);
    %%%%%: 1565-block 139
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1566:      if(m.empty() || (m.size() > 2))
    %%%%%: 1566-block 140
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1566-block 142
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1566-block 144
    %%%%%: 1566-block 145
    %%%%%: 1566-block 146
branch  6 never executed (fallthrough)
branch  7 never executed
        -: 1567:      {
    #####: 1568:         fail(regex_constants::error_collate, name_first - m_base);
    %%%%%: 1568-block 147
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1569:         return false;
    %%%%%: 1569-block 148
        -: 1570:      }
    #####: 1571:      digraph<charT> d;
    %%%%%: 1571-block 149
call    0 never executed
    #####: 1572:      d.first = m[0];
call    0 never executed
    #####: 1573:      if(m.size() > 1)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1574:         d.second = m[1];
    %%%%%: 1574-block 153
call    0 never executed
        -: 1575:      else
    #####: 1576:         d.second = 0;
    %%%%%: 1576-block 155
    #####: 1577:      char_set.add_equivalent(d);
    %%%%%: 1577-block 156
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1578:      ++m_position;
    #####: 1579:      break;
    %%%%%: 1579-block 157
    #####: 1580:   }
    %%%%%: 1580-block 158
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 1580-block 220
call    3 never executed
    #####: 1581:   default:
    #####: 1582:      --m_position;
    #####: 1583:      parse_set_literal(char_set);
    %%%%%: 1583-block 162
call    0 never executed
    #####: 1584:      break;
        -: 1585:   }
    #####: 1586:   return true;
    %%%%%: 1586-block 164
        -: 1587:}
        -: 1588:
        -: 1589:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE17parse_set_literalERNS0_14basic_char_setIcS5_EE called 7 returned 100% blocks executed 56%
        7: 1590:void basic_regex_parser<charT, traits>::parse_set_literal(basic_char_set<charT, traits>& char_set)
        -: 1591:{
        7: 1592:   digraph<charT> start_range(get_next_set_literal(char_set));
        7: 1592-block 2
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1593:   if(m_end == m_position)
        7: 1593-block 3
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -: 1594:   {
    #####: 1595:      fail(regex_constants::error_brack, m_position - m_base);
    %%%%%: 1595-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
       5*: 1596:      return;
    %%%%%: 1596-block 5
        5: 1596-block 30
        -: 1597:   }
        7: 1598:   if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_dash)
        7: 1598-block 6
call    0 returned 7
branch  1 taken 5 (fallthrough)
branch  2 taken 2
        -: 1599:   {
        -: 1600:      // we have a range:
        5: 1601:      if(m_end == ++m_position)
        5: 1601-block 8
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 1602:      {
    #####: 1603:         fail(regex_constants::error_brack, m_position - m_base);
    %%%%%: 1603-block 9
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1604:         return;
    %%%%%: 1604-block 10
        -: 1605:      }
        5: 1606:      if(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_set)
        5: 1606-block 11
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        -: 1607:      {
        5: 1608:         digraph<charT> end_range = get_next_set_literal(char_set);
        5: 1608-block 13
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 1609:         char_set.add_range(start_range, end_range);
        5: 1609-block 14
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 1610:         if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_dash)
        5: 1610-block 15
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
        -: 1611:         {
    #####: 1612:            if(m_end == ++m_position)
    %%%%%: 1612-block 17
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1613:            {
    #####: 1614:               fail(regex_constants::error_brack, m_position - m_base);
    %%%%%: 1614-block 18
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1615:               return;
    %%%%%: 1615-block 19
        -: 1616:            }
    #####: 1617:            if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_close_set)
    %%%%%: 1617-block 20
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1618:            {
        -: 1619:               // trailing - :
    #####: 1620:               --m_position;
    #####: 1621:               return;
    %%%%%: 1621-block 22
        -: 1622:            }
    #####: 1623:            fail(regex_constants::error_range, m_position - m_base);
    %%%%%: 1623-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1624:            return;
    %%%%%: 1624-block 24
        -: 1625:         }
        5: 1626:         return;
        5: 1626-block 25
        -: 1627:      }
    #####: 1628:      --m_position;
    %%%%%: 1628-block 27
        -: 1629:   }
        2: 1630:   char_set.add_single(start_range);
        2: 1630-block 28
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 1631:}
        -: 1632:
        -: 1633:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE20get_next_set_literalERNS0_14basic_char_setIcS5_EE called 12 returned 100% blocks executed 11%
       12: 1634:digraph<charT> basic_regex_parser<charT, traits>::get_next_set_literal(basic_char_set<charT, traits>& char_set)
        -: 1635:{
       12: 1636:   digraph<charT> result;
       12: 1636-block 2
call    0 returned 12
       12: 1637:   switch(this->m_traits.syntax_type(*m_position))
call    0 returned 12
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 12
        -: 1638:   {
    #####: 1639:   case regex_constants::syntax_dash:
    #####: 1640:      if(!char_set.empty())
    %%%%%: 1640-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1641:      {
        -: 1642:         // see if we are at the end of the set:
    #####: 1643:         if((++m_position == m_end) || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_set))
    %%%%%: 1643-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1643-block 8
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1643-block 10
    %%%%%: 1643-block 11
    %%%%%: 1643-block 12
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1644:         {
    #####: 1645:            fail(regex_constants::error_range, m_position - m_base);
    %%%%%: 1645-block 13
call    0 never executed
    #####: 1646:            return result;
        -: 1647:         }
    #####: 1648:         --m_position;
    %%%%%: 1648-block 15
        -: 1649:      }
    #####: 1650:      result.first = *m_position++;
    #####: 1651:      return result;
    %%%%%: 1651-block 16
    #####: 1652:   case regex_constants::syntax_escape:
        -: 1653:      // check to see if escapes are supported first:
    #####: 1654:      if(this->flags() & regex_constants::no_escape_in_lists)
    %%%%%: 1654-block 17
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1655:      {
    #####: 1656:         result = *m_position++;
    %%%%%: 1656-block 19
call    0 never executed
call    1 never executed
    #####: 1657:         break;
        -: 1658:      }
    #####: 1659:      ++m_position;
    #####: 1660:      result = unescape_character();
    %%%%%: 1660-block 22
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1660-block 23
call    3 never executed
call    4 never executed
    $$$$$: 1660-block 81
call    5 never executed
    #####: 1661:      break;
    #####: 1662:   case regex_constants::syntax_open_set:
        -: 1663:   {
    #####: 1664:      if(m_end == ++m_position)
    %%%%%: 1664-block 26
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1665:      {
    #####: 1666:         fail(regex_constants::error_collate, m_position - m_base);
    %%%%%: 1666-block 27
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1667:         return result;
    %%%%%: 1667-block 28
        -: 1668:      }
    #####: 1669:      if(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_dot)
    %%%%%: 1669-block 29
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1670:      {
    #####: 1671:         --m_position;
    #####: 1672:         result.first = *m_position;
    #####: 1673:         ++m_position;
    #####: 1674:         return result;
    %%%%%: 1674-block 31
        -: 1675:      }
    #####: 1676:      if(m_end == ++m_position)
    %%%%%: 1676-block 32
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1677:      {
    #####: 1678:         fail(regex_constants::error_collate, m_position - m_base);
    %%%%%: 1678-block 33
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1679:         return result;
    %%%%%: 1679-block 34
        -: 1680:      }
    #####: 1681:      const charT* name_first = m_position;
        -: 1682:      // skip at least one character, then find the matching ':]'
    #####: 1683:      if(m_end == ++m_position)
    %%%%%: 1683-block 35
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1684:      {
    #####: 1685:         fail(regex_constants::error_collate, name_first - m_base);
    %%%%%: 1685-block 36
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1686:         return result;
    %%%%%: 1686-block 37
        -: 1687:      }
    #####: 1688:      while((m_position != m_end) 
    %%%%%: 1688-block 38
    #####: 1689:         && (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_dot)) 
    %%%%%: 1689-block 40
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1689-block 41
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1689-block 43
    %%%%%: 1689-block 44
    %%%%%: 1689-block 45
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 1690:         ++m_position;
    %%%%%: 1690-block 39
    #####: 1691:      const charT* name_last = m_position;
    #####: 1692:      if(m_end == m_position)
    %%%%%: 1692-block 46
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1693:      {
    #####: 1694:         fail(regex_constants::error_collate, name_first - m_base);
    %%%%%: 1694-block 47
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1695:         return result;
    %%%%%: 1695-block 48
        -: 1696:      }
    #####: 1697:      if((m_end == ++m_position) 
    #####: 1698:         || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_set))
    %%%%%: 1698-block 49
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1698-block 50
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1698-block 52
    %%%%%: 1698-block 53
    %%%%%: 1698-block 54
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1699:      {
    #####: 1700:         fail(regex_constants::error_collate, name_first - m_base);
    %%%%%: 1700-block 55
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1701:         return result;
    %%%%%: 1701-block 56
        -: 1702:      }
    #####: 1703:      ++m_position;
    #####: 1704:      string_type s = this->m_traits.lookup_collatename(name_first, name_last);
    %%%%%: 1704-block 57
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1705:      if(s.empty() || (s.size() > 2))
    %%%%%: 1705-block 58
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1705-block 60
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1705-block 62
    %%%%%: 1705-block 63
    %%%%%: 1705-block 64
branch  6 never executed (fallthrough)
branch  7 never executed
        -: 1706:      {
    #####: 1707:         fail(regex_constants::error_collate, name_first - m_base);
    %%%%%: 1707-block 65
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1708:         return result;
    %%%%%: 1708-block 66
        -: 1709:      }
    #####: 1710:      result.first = s[0];
    %%%%%: 1710-block 67
call    0 never executed
    #####: 1711:      if(s.size() > 1)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1712:         result.second = s[1];
    %%%%%: 1712-block 70
call    0 never executed
        -: 1713:      else
    #####: 1714:         result.second = 0;
    %%%%%: 1714-block 72
    #####: 1715:      return result;
    %%%%%: 1715-block 73
    #####: 1716:   }
    %%%%%: 1716-block 74
call    0 never executed
    $$$$$: 1716-block 82
call    1 never executed
       12: 1717:   default:
       12: 1718:      result = *m_position++;
       12: 1718-block 76
call    0 returned 12
call    1 returned 12
        -: 1719:   }
       12: 1720:   return result;
       12: 1720-block 79
        -: 1721:}
        -: 1722:
        -: 1723://
        -: 1724:// does a value fit in the specified charT type?
        -: 1725://
        -: 1726:template <class charT>
function _ZN5boost13re_detail_50011valid_valueIcEEbT_lRKSt17integral_constantIbLb1EE called 0 returned 0% blocks executed 0%
    #####: 1727:bool valid_value(charT, std::intmax_t v, const std::integral_constant<bool, true>&)
        -: 1728:{
    #####: 1729:   return (v >> (sizeof(charT) * CHAR_BIT)) == 0;
    %%%%%: 1729-block 2
        -: 1730:}
        -: 1731:template <class charT>
        -: 1732:bool valid_value(charT, std::intmax_t, const std::integral_constant<bool, false>&)
        -: 1733:{
        -: 1734:   return true; // v will alsways fit in a charT
        -: 1735:}
        -: 1736:template <class charT>
function _ZN5boost13re_detail_50011valid_valueIcEEbT_l called 0 returned 0% blocks executed 0%
    #####: 1737:bool valid_value(charT c, std::intmax_t v)
        -: 1738:{
    #####: 1739:   return valid_value(c, v, std::integral_constant<bool, (sizeof(charT) < sizeof(std::intmax_t))>());
    %%%%%: 1739-block 2
call    0 never executed
        -: 1740:}
        -: 1741:
        -: 1742:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE18unescape_characterEv called 0 returned 0% blocks executed 0%
    #####: 1743:charT basic_regex_parser<charT, traits>::unescape_character()
        -: 1744:{
        -: 1745:#ifdef BOOST_REGEX_MSVC
        -: 1746:#pragma warning(push)
        -: 1747:#pragma warning(disable:4127)
        -: 1748:#endif
    #####: 1749:   charT result(0);
    #####: 1750:   if(m_position == m_end)
    %%%%%: 1750-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1751:   {
    #####: 1752:      fail(regex_constants::error_escape, m_position - m_base, "Escape sequence terminated prematurely.");
    %%%%%: 1752-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1752-block 6
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1752-block 7
call    6 never executed
    $$$$$: 1752-block 194
call    7 never executed
    $$$$$: 1752-block 198
    $$$$$: 1752-block 199
call    8 never executed
    #####: 1753:      return false;
    %%%%%: 1753-block 9
        -: 1754:   }
    #####: 1755:   switch(this->m_traits.escape_syntax_type(*m_position))
    %%%%%: 1755-block 10
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
        -: 1756:   {
    #####: 1757:   case regex_constants::escape_type_control_a:
    #####: 1758:      result = charT('\a');
    #####: 1759:      break;
    %%%%%: 1759-block 12
    #####: 1760:   case regex_constants::escape_type_e:
    #####: 1761:      result = charT(27);
    #####: 1762:      break;
    %%%%%: 1762-block 13
    #####: 1763:   case regex_constants::escape_type_control_f:
    #####: 1764:      result = charT('\f');
    #####: 1765:      break;
    %%%%%: 1765-block 14
    #####: 1766:   case regex_constants::escape_type_control_n:
    #####: 1767:      result = charT('\n');
    #####: 1768:      break;
    %%%%%: 1768-block 15
    #####: 1769:   case regex_constants::escape_type_control_r:
    #####: 1770:      result = charT('\r');
    #####: 1771:      break;
    %%%%%: 1771-block 16
    #####: 1772:   case regex_constants::escape_type_control_t:
    #####: 1773:      result = charT('\t');
    #####: 1774:      break;
    %%%%%: 1774-block 17
    #####: 1775:   case regex_constants::escape_type_control_v:
    #####: 1776:      result = charT('\v');
    #####: 1777:      break;
    %%%%%: 1777-block 18
    #####: 1778:   case regex_constants::escape_type_word_assert:
    #####: 1779:      result = charT('\b');
    #####: 1780:      break;
    %%%%%: 1780-block 19
    #####: 1781:   case regex_constants::escape_type_ascii_control:
    #####: 1782:      ++m_position;
    #####: 1783:      if(m_position == m_end)
    %%%%%: 1783-block 20
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1784:      {
        -: 1785:         // Rewind to start of escape:
    #####: 1786:         --m_position;
    #####: 1787:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1787-block 21
    %%%%%: 1787-block 22
    %%%%%: 1787-block 23
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1788:         fail(regex_constants::error_escape, m_position - m_base, "ASCII escape sequence terminated prematurely.");
    %%%%%: 1788-block 27
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1788-block 28
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1788-block 29
call    6 never executed
    $$$$$: 1788-block 200
call    7 never executed
    $$$$$: 1788-block 204
    $$$$$: 1788-block 205
call    8 never executed
    #####: 1789:         return result;
    %%%%%: 1789-block 31
        -: 1790:      }
    #####: 1791:      result = static_cast<charT>(*m_position % 32);
    #####: 1792:      break;
    %%%%%: 1792-block 32
    #####: 1793:   case regex_constants::escape_type_hex:
    #####: 1794:      ++m_position;
    #####: 1795:      if(m_position == m_end)
    %%%%%: 1795-block 33
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1796:      {
        -: 1797:         // Rewind to start of escape:
    #####: 1798:         --m_position;
    #####: 1799:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1799-block 34
    %%%%%: 1799-block 35
    %%%%%: 1799-block 36
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1800:         fail(regex_constants::error_escape, m_position - m_base, "Hexadecimal escape sequence terminated prematurely.");
    %%%%%: 1800-block 40
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1800-block 41
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1800-block 42
call    6 never executed
    $$$$$: 1800-block 206
call    7 never executed
    $$$$$: 1800-block 210
    $$$$$: 1800-block 211
call    8 never executed
    #####: 1801:         return result;
    %%%%%: 1801-block 44
        -: 1802:      }
        -: 1803:      // maybe have \x{ddd}
    #####: 1804:      if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_open_brace)
    %%%%%: 1804-block 45
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1805:      {
    #####: 1806:         ++m_position;
    #####: 1807:         if(m_position == m_end)
    %%%%%: 1807-block 47
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1808:         {
        -: 1809:            // Rewind to start of escape:
    #####: 1810:            --m_position;
    #####: 1811:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1811-block 48
    %%%%%: 1811-block 49
    %%%%%: 1811-block 50
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1812:            fail(regex_constants::error_escape, m_position - m_base, "Missing } in hexadecimal escape sequence.");
    %%%%%: 1812-block 54
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1812-block 55
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1812-block 56
call    6 never executed
    $$$$$: 1812-block 212
call    7 never executed
    $$$$$: 1812-block 216
    $$$$$: 1812-block 217
call    8 never executed
    #####: 1813:            return result;
    %%%%%: 1813-block 58
        -: 1814:         }
    #####: 1815:         std::intmax_t i = this->m_traits.toi(m_position, m_end, 16);
    %%%%%: 1815-block 59
call    0 never executed
    #####: 1816:         if((m_position == m_end)
    #####: 1817:            || (i < 0)
    %%%%%: 1817-block 61
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1818:            || ((std::numeric_limits<charT>::is_specialized) && (i > (std::intmax_t)(std::numeric_limits<charT>::max)()))
    %%%%%: 1818-block 62
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1819:            || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_brace))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1819-block 64
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1819-block 66
    %%%%%: 1819-block 67
    %%%%%: 1819-block 68
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1820:         {
        -: 1821:            // Rewind to start of escape:
    #####: 1822:            --m_position;
    #####: 1823:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1823-block 69
    %%%%%: 1823-block 70
    %%%%%: 1823-block 71
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1824:            fail(regex_constants::error_badbrace, m_position - m_base, "Hexadecimal escape sequence was invalid.");
    %%%%%: 1824-block 75
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1824-block 76
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1824-block 77
call    6 never executed
    $$$$$: 1824-block 218
call    7 never executed
    $$$$$: 1824-block 222
    $$$$$: 1824-block 223
call    8 never executed
    #####: 1825:            return result;
    %%%%%: 1825-block 79
        -: 1826:         }
    #####: 1827:         ++m_position;
    #####: 1828:         result = charT(i);
    %%%%%: 1828-block 80
        -: 1829:      }
        -: 1830:      else
        -: 1831:      {
    #####: 1832:         std::ptrdiff_t len = (std::min)(static_cast<std::ptrdiff_t>(2), static_cast<std::ptrdiff_t>(m_end - m_position));
    %%%%%: 1832-block 81
call    0 never executed
    #####: 1833:         std::intmax_t i = this->m_traits.toi(m_position, m_position + len, 16);
call    0 never executed
    #####: 1834:         if((i < 0)
    #####: 1835:            || !valid_value(charT(0), i))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1835-block 84
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1835-block 86
    %%%%%: 1835-block 87
    %%%%%: 1835-block 88
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1836:         {
        -: 1837:            // Rewind to start of escape:
    #####: 1838:            --m_position;
    #####: 1839:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1839-block 89
    %%%%%: 1839-block 90
    %%%%%: 1839-block 91
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1840:            fail(regex_constants::error_escape, m_position - m_base, "Escape sequence did not encode a valid character.");
    %%%%%: 1840-block 95
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1840-block 96
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1840-block 97
call    6 never executed
    $$$$$: 1840-block 224
call    7 never executed
    $$$$$: 1840-block 228
    $$$$$: 1840-block 229
call    8 never executed
    #####: 1841:            return result;
    %%%%%: 1841-block 99
        -: 1842:         }
    #####: 1843:         result = charT(i);
    %%%%%: 1843-block 100
        -: 1844:      }
    #####: 1845:      return result;
    %%%%%: 1845-block 101
    #####: 1846:   case regex_constants::syntax_digit:
        -: 1847:      {
        -: 1848:      // an octal escape sequence, the first character must be a zero
        -: 1849:      // followed by up to 3 octal digits:
    #####: 1850:      std::ptrdiff_t len = (std::min)(std::distance(m_position, m_end), static_cast<std::ptrdiff_t>(4));
    %%%%%: 1850-block 102
    %%%%%: 1850-block 108
call    0 never executed
    #####: 1851:      const charT* bp = m_position;
    #####: 1852:      std::intmax_t val = this->m_traits.toi(bp, bp + 1, 8);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1853:      if(val != 0)
    %%%%%: 1853-block 110
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1854:      {
        -: 1855:         // Rewind to start of escape:
    #####: 1856:         --m_position;
    #####: 1857:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1857-block 111
    %%%%%: 1857-block 112
    %%%%%: 1857-block 113
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 1858:         // Oops not an octal escape after all:
    #####: 1859:         fail(regex_constants::error_escape, m_position - m_base, "Invalid octal escape sequence.");
    %%%%%: 1859-block 117
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1859-block 118
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1859-block 119
call    6 never executed
    $$$$$: 1859-block 230
call    7 never executed
    $$$$$: 1859-block 234
    $$$$$: 1859-block 235
    #####: 1860:         return result;
    %%%%%: 1860-block 121
        -: 1861:      }
    #####: 1862:      val = this->m_traits.toi(m_position, m_position + len, 8);
    %%%%%: 1862-block 122
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1863:      if((val < 0) || (val > (std::intmax_t)(std::numeric_limits<charT>::max)()))
    %%%%%: 1863-block 123
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1863-block 124
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1863-block 126
    %%%%%: 1863-block 127
    %%%%%: 1863-block 128
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1864:      {
        -: 1865:         // Rewind to start of escape:
    #####: 1866:         --m_position;
    #####: 1867:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1867-block 129
    %%%%%: 1867-block 130
    %%%%%: 1867-block 131
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1868:         fail(regex_constants::error_escape, m_position - m_base, "Octal escape sequence is invalid.");
    %%%%%: 1868-block 135
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1868-block 136
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1868-block 137
call    6 never executed
    $$$$$: 1868-block 236
call    7 never executed
    $$$$$: 1868-block 240
    $$$$$: 1868-block 241
    #####: 1869:         return result;
    %%%%%: 1869-block 139
        -: 1870:      }
    #####: 1871:      return static_cast<charT>(val);
    %%%%%: 1871-block 140
        -: 1872:      }
    #####: 1873:   case regex_constants::escape_type_named_char:
        -: 1874:      {
    #####: 1875:         ++m_position;
    #####: 1876:         if(m_position == m_end)
    %%%%%: 1876-block 142
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1877:         {
        -: 1878:            // Rewind to start of escape:
    #####: 1879:            --m_position;
    #####: 1880:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1880-block 143
    %%%%%: 1880-block 144
    %%%%%: 1880-block 145
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1881:            fail(regex_constants::error_escape, m_position - m_base);
    %%%%%: 1881-block 147
call    0 never executed
    #####: 1882:            return false;
        -: 1883:         }
        -: 1884:         // maybe have \N{name}
    #####: 1885:         if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_open_brace)
    %%%%%: 1885-block 149
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1886:         {
    #####: 1887:            const charT* base = m_position;
        -: 1888:            // skip forward until we find enclosing brace:
    #####: 1889:            while((m_position != m_end) && (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_brace))
    %%%%%: 1889-block 151
    %%%%%: 1889-block 153
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1889-block 154
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1889-block 156
    %%%%%: 1889-block 157
    %%%%%: 1889-block 158
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 1890:               ++m_position;
    %%%%%: 1890-block 152
    #####: 1891:            if(m_position == m_end)
    %%%%%: 1891-block 159
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1892:            {
        -: 1893:               // Rewind to start of escape:
    #####: 1894:               --m_position;
    #####: 1895:               while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1895-block 160
    %%%%%: 1895-block 161
    %%%%%: 1895-block 162
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1896:               fail(regex_constants::error_escape, m_position - m_base);
    %%%%%: 1896-block 164
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1897:               return false;
    %%%%%: 1897-block 165
    %%%%%: 1897-block 184
        -: 1898:            }
    #####: 1899:            string_type s = this->m_traits.lookup_collatename(++base, m_position++);
    %%%%%: 1899-block 166
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1900:            if(s.empty())
    %%%%%: 1900-block 167
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1901:            {
        -: 1902:               // Rewind to start of escape:
    #####: 1903:               --m_position;
    #####: 1904:               while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1904-block 169
    %%%%%: 1904-block 170
    %%%%%: 1904-block 171
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1905:               fail(regex_constants::error_collate, m_position - m_base);
    %%%%%: 1905-block 173
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1906:               return false;
    %%%%%: 1906-block 174
        -: 1907:            }
    #####: 1908:            if(s.size() == 1)
    %%%%%: 1908-block 175
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1909:            {
    #####: 1910:               return s[0];
    %%%%%: 1910-block 177
call    0 never executed
        -: 1911:            }
    #####: 1912:         }
    %%%%%: 1912-block 179
    %%%%%: 1912-block 180
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 1912-block 243
call    3 never executed
        -: 1913:         // fall through is a failure:
        -: 1914:         // Rewind to start of escape:
    #####: 1915:         --m_position;
    #####: 1916:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1916-block 185
    %%%%%: 1916-block 186
    %%%%%: 1916-block 187
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1917:         fail(regex_constants::error_escape, m_position - m_base);
    %%%%%: 1917-block 189
call    0 never executed
    #####: 1918:         return false;
        -: 1919:      }
    #####: 1920:   default:
    #####: 1921:      result = *m_position;
    #####: 1922:      break;
    %%%%%: 1922-block 191
        -: 1923:   }
    #####: 1924:   ++m_position;
    #####: 1925:   return result;
    %%%%%: 1925-block 192
        -: 1926:#ifdef BOOST_REGEX_MSVC
        -: 1927:#pragma warning(pop)
        -: 1928:#endif
        -: 1929:}
        -: 1930:
        -: 1931:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE13parse_backrefEv called 0 returned 0% blocks executed 0%
    #####: 1932:bool basic_regex_parser<charT, traits>::parse_backref()
        -: 1933:{
    #####: 1934:   BOOST_REGEX_ASSERT(m_position != m_end);
    %%%%%: 1934-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1934-block 3
call    2 never executed
    #####: 1935:   const charT* pc = m_position;
    #####: 1936:   std::intmax_t i = this->m_traits.toi(pc, pc + 1, 10);
    %%%%%: 1936-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1937:   if((i == 0) || (((this->flags() & regbase::main_option_type) == regbase::perl_syntax_group) && (this->flags() & regbase::no_bk_refs)))
    %%%%%: 1937-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1937-block 6
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1937-block 8
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1937-block 10
    %%%%%: 1937-block 11
    %%%%%: 1937-block 12
branch  8 never executed (fallthrough)
branch  9 never executed
        -: 1938:   {
        -: 1939:      // not a backref at all but an octal escape sequence:
    #####: 1940:      charT c = unescape_character();
    %%%%%: 1940-block 13
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1941:      this->append_literal(c);
    %%%%%: 1941-block 14
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1942:   }
    #####: 1943:   else if((i > 0))
    %%%%%: 1943-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1944:   {
    #####: 1945:      m_position = pc;
    #####: 1946:      re_brace* pb = static_cast<re_brace*>(this->append_state(syntax_element_backref, sizeof(re_brace)));
    %%%%%: 1946-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1947:      pb->index = (int)i;
    #####: 1948:      pb->icase = this->flags() & regbase::icase;
    %%%%%: 1948-block 17
call    0 never executed
    #####: 1949:      if(i > m_max_backref)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1950:         m_max_backref = i;
    %%%%%: 1950-block 19
        -: 1951:   }
        -: 1952:   else
        -: 1953:   {
        -: 1954:      // Rewind to start of escape:
    #####: 1955:      --m_position;
    #####: 1956:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 1956-block 20
    %%%%%: 1956-block 21
    %%%%%: 1956-block 22
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1957:      fail(regex_constants::error_backref, m_position - m_base);
    %%%%%: 1957-block 24
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1958:      return false;
    %%%%%: 1958-block 25
        -: 1959:   }
    #####: 1960:   return true;
    %%%%%: 1960-block 26
        -: 1961:}
        -: 1962:
        -: 1963:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE8parse_QEEv called 0 returned 0% blocks executed 0%
    #####: 1964:bool basic_regex_parser<charT, traits>::parse_QE()
        -: 1965:{
        -: 1966:#ifdef BOOST_REGEX_MSVC
        -: 1967:#pragma warning(push)
        -: 1968:#pragma warning(disable:4127)
        -: 1969:#endif
        -: 1970:   //
        -: 1971:   // parse a \Q...\E sequence:
        -: 1972:   //
    #####: 1973:   ++m_position; // skip the Q
    #####: 1974:   const charT* start = m_position;
    %%%%%: 1974-block 2
        -: 1975:   const charT* end;
        -: 1976:   do
        -: 1977:   {
    #####: 1978:      while((m_position != m_end) 
    %%%%%: 1978-block 3
    %%%%%: 1978-block 24
    #####: 1979:         && (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape))
    %%%%%: 1979-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1979-block 6
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1979-block 8
    %%%%%: 1979-block 9
    %%%%%: 1979-block 10
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 1980:         ++m_position;
    %%%%%: 1980-block 4
    #####: 1981:      if(m_position == m_end)
    %%%%%: 1981-block 11
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1982:      {
        -: 1983:         //  a \Q...\E sequence may terminate with the end of the expression:
    #####: 1984:         end = m_position;
    #####: 1985:         break;  
    %%%%%: 1985-block 12
        -: 1986:      }
    #####: 1987:      if(++m_position == m_end) // skip the escape
    %%%%%: 1987-block 13
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1988:      {
    #####: 1989:         fail(regex_constants::error_escape, m_position - m_base, "Unterminated \\Q...\\E sequence.");
    %%%%%: 1989-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1989-block 17
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1989-block 18
call    6 never executed
    $$$$$: 1989-block 31
call    7 never executed
    $$$$$: 1989-block 35
    #####: 1990:         return false;
    %%%%%: 1990-block 20
        -: 1991:      }
        -: 1992:      // check to see if it's a \E:
    #####: 1993:      if(this->m_traits.escape_syntax_type(*m_position) == regex_constants::escape_type_E)
    %%%%%: 1993-block 21
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1994:      {
    #####: 1995:         ++m_position;
    #####: 1996:         end = m_position - 2;
    #####: 1997:         break;
    %%%%%: 1997-block 23
        -: 1998:      }
        -: 1999:      // otherwise go round again:
        -: 2000:   }while(true);
        -: 2001:   //
        -: 2002:   // now add all the character between the two escapes as literals:
        -: 2003:   //
    #####: 2004:   while(start != end)
    %%%%%: 2004-block 25
    %%%%%: 2004-block 28
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 2005:   {
    #####: 2006:      this->append_literal(*start);
    %%%%%: 2006-block 26
call    0 never executed
    #####: 2007:      ++start;
        -: 2008:   }
    #####: 2009:   return true;
    %%%%%: 2009-block 29
        -: 2010:#ifdef BOOST_REGEX_MSVC
        -: 2011:#pragma warning(pop)
        -: 2012:#endif
        -: 2013:}
        -: 2014:
        -: 2015:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE20parse_perl_extensionEv called 0 returned 0% blocks executed 0%
    #####: 2016:bool basic_regex_parser<charT, traits>::parse_perl_extension()
        -: 2017:{
    #####: 2018:   if(++m_position == m_end)
    %%%%%: 2018-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2019:   {
        -: 2020:      // Rewind to start of (? sequence:
    #####: 2021:      --m_position;
    #####: 2022:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2022-block 3
    %%%%%: 2022-block 4
    %%%%%: 2022-block 5
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2023:      fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2023-block 7
call    0 never executed
    #####: 2024:      return false;
        -: 2025:   }
        -: 2026:   //
        -: 2027:   // treat comments as a special case, as these
        -: 2028:   // are the only ones that don't start with a leading
        -: 2029:   // startmark state:
        -: 2030:   //
    #####: 2031:   if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_hash)
    %%%%%: 2031-block 9
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2032:   {
    #####: 2033:      while((m_position != m_end) 
    %%%%%: 2033-block 11
    #####: 2034:         && (this->m_traits.syntax_type(*m_position++) != regex_constants::syntax_close_mark))
    %%%%%: 2034-block 12
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2034-block 13
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2034-block 15
    %%%%%: 2034-block 16
    %%%%%: 2034-block 17
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 2035:      {}
    #####: 2036:      return true;
    %%%%%: 2036-block 18
        -: 2037:   }
        -: 2038:   //
        -: 2039:   // backup some state, and prepare the way:
        -: 2040:   //
    #####: 2041:   int markid = 0;
    #####: 2042:   std::ptrdiff_t jump_offset = 0;
    #####: 2043:   re_brace* pb = static_cast<re_brace*>(this->append_state(syntax_element_startmark, sizeof(re_brace)));
    %%%%%: 2043-block 19
call    0 never executed
    #####: 2044:   pb->icase = this->flags() & regbase::icase;
call    0 never executed
    #####: 2045:   std::ptrdiff_t last_paren_start = this->getoffset(pb);
call    0 never executed
        -: 2046:   // back up insertion point for alternations, and set new point:
    #####: 2047:   std::ptrdiff_t last_alt_point = m_alt_insert_point;
    #####: 2048:   this->m_pdata->m_data.align();
call    0 never executed
    #####: 2049:   m_alt_insert_point = this->m_pdata->m_data.size();
call    0 never executed
    #####: 2050:   std::ptrdiff_t expected_alt_point = m_alt_insert_point;
    #####: 2051:   bool restore_flags = true;
    #####: 2052:   regex_constants::syntax_option_type old_flags = this->flags();
call    0 never executed
    #####: 2053:   bool old_case_change = m_has_case_change;
    #####: 2054:   m_has_case_change = false;
        -: 2055:   charT name_delim;
    #####: 2056:   int mark_reset = m_mark_reset;
    #####: 2057:   int max_mark = m_max_mark;
    #####: 2058:   m_mark_reset = -1;
    #####: 2059:   m_max_mark = m_mark_count;
        -: 2060:   std::intmax_t v;
        -: 2061:   //
        -: 2062:   // select the actual extension used:
        -: 2063:   //
    #####: 2064:   switch(this->m_traits.syntax_type(*m_position))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
        -: 2065:   {
    #####: 2066:   case regex_constants::syntax_or:
    #####: 2067:      m_mark_reset = m_mark_count;
    %%%%%: 2067-block 27
        -: 2068:      BOOST_REGEX_FALLTHROUGH;
    #####: 2069:   case regex_constants::syntax_colon:
        -: 2070:      //
        -: 2071:      // a non-capturing mark:
        -: 2072:      //
    #####: 2073:      pb->index = markid = 0;
    #####: 2074:      ++m_position;
    #####: 2075:      break;
    %%%%%: 2075-block 28
    #####: 2076:   case regex_constants::syntax_digit:
        -: 2077:      {
        -: 2078:      //
        -: 2079:      // a recursive subexpression:
        -: 2080:      //
    #####: 2081:      v = this->m_traits.toi(m_position, m_end, 10);
    %%%%%: 2081-block 29
call    0 never executed
    #####: 2082:      if((v < 0) || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2082-block 31
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2082-block 33
    %%%%%: 2082-block 34
    %%%%%: 2082-block 35
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2083:      {
        -: 2084:         // Rewind to start of (? sequence:
    #####: 2085:         --m_position;
    #####: 2086:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2086-block 36
    %%%%%: 2086-block 37
    %%%%%: 2086-block 38
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2087:         fail(regex_constants::error_perl_extension, m_position - m_base, "The recursive sub-expression refers to an invalid marking group, or is unterminated.");
    %%%%%: 2087-block 42
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2087-block 43
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2087-block 44
call    6 never executed
    $$$$$: 2087-block 588
call    7 never executed
    $$$$$: 2087-block 592
    $$$$$: 2087-block 593
call    8 never executed
    #####: 2088:         return false;
    %%%%%: 2088-block 46
        -: 2089:      }
    #####: 2090:insert_recursion:
    %%%%%: 2090-block 47
    #####: 2091:      pb->index = markid = 0;
    #####: 2092:      re_recurse* pr = static_cast<re_recurse*>(this->append_state(syntax_element_recurse, sizeof(re_recurse)));
    %%%%%: 2092-block 48
call    0 never executed
    #####: 2093:      pr->alt.i = (std::ptrdiff_t)v;
    #####: 2094:      pr->state_id = 0;
        -: 2095:      static_cast<re_case*>(
    #####: 2096:            this->append_state(syntax_element_toggle_case, sizeof(re_case))
    #####: 2097:            )->icase = this->flags() & regbase::icase;
call    0 never executed
call    1 never executed
    #####: 2098:      break;
        -: 2099:      }
    #####: 2100:   case regex_constants::syntax_plus:
        -: 2101:      //
        -: 2102:      // A forward-relative recursive subexpression:
        -: 2103:      //
    #####: 2104:      ++m_position;
    #####: 2105:      v = this->m_traits.toi(m_position, m_end, 10);
    %%%%%: 2105-block 52
call    0 never executed
    #####: 2106:      if((v <= 0) || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2106-block 54
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2106-block 56
    %%%%%: 2106-block 57
    %%%%%: 2106-block 58
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2107:      {
        -: 2108:         // Rewind to start of (? sequence:
    #####: 2109:         --m_position;
    #####: 2110:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2110-block 59
    %%%%%: 2110-block 60
    %%%%%: 2110-block 61
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2111:         fail(regex_constants::error_perl_extension, m_position - m_base, "An invalid or unterminated recursive sub-expression.");
    %%%%%: 2111-block 65
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2111-block 66
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2111-block 67
call    6 never executed
    $$$$$: 2111-block 594
call    7 never executed
    $$$$$: 2111-block 598
    $$$$$: 2111-block 599
call    8 never executed
    #####: 2112:         return false;
    %%%%%: 2112-block 69
        -: 2113:      }
    #####: 2114:      if ((std::numeric_limits<std::intmax_t>::max)() - m_mark_count < v)
    %%%%%: 2114-block 70
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2115:      {
    #####: 2116:         fail(regex_constants::error_perl_extension, m_position - m_base, "An invalid or unterminated recursive sub-expression.");
    %%%%%: 2116-block 74
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2116-block 75
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2116-block 76
call    6 never executed
    $$$$$: 2116-block 600
call    7 never executed
    $$$$$: 2116-block 604
    $$$$$: 2116-block 605
call    8 never executed
    #####: 2117:         return false;
    %%%%%: 2117-block 78
        -: 2118:      }
    #####: 2119:      v += m_mark_count;
    #####: 2120:      goto insert_recursion;
    %%%%%: 2120-block 79
    #####: 2121:   case regex_constants::syntax_dash:
        -: 2122:      //
        -: 2123:      // Possibly a backward-relative recursive subexpression:
        -: 2124:      //
    #####: 2125:      ++m_position;
    #####: 2126:      v = this->m_traits.toi(m_position, m_end, 10);
    %%%%%: 2126-block 80
call    0 never executed
    #####: 2127:      if(v <= 0)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2128:      {
    #####: 2129:         --m_position;
        -: 2130:         // Oops not a relative recursion at all, but a (?-imsx) group:
    #####: 2131:         goto option_group_jump;
    %%%%%: 2131-block 82
        -: 2132:      }
    #####: 2133:      v = static_cast<std::intmax_t>(m_mark_count) + 1 - v;
    #####: 2134:      if(v <= 0)
    %%%%%: 2134-block 83
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2135:      {
        -: 2136:         // Rewind to start of (? sequence:
    #####: 2137:         --m_position;
    #####: 2138:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2138-block 84
    %%%%%: 2138-block 85
    %%%%%: 2138-block 86
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2139:         fail(regex_constants::error_perl_extension, m_position - m_base, "An invalid or unterminated recursive sub-expression.");
    %%%%%: 2139-block 90
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2139-block 91
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2139-block 92
call    6 never executed
    $$$$$: 2139-block 606
call    7 never executed
    $$$$$: 2139-block 610
    $$$$$: 2139-block 611
call    8 never executed
    #####: 2140:         return false;
    %%%%%: 2140-block 94
        -: 2141:      }
    #####: 2142:      goto insert_recursion;
    %%%%%: 2142-block 95
    #####: 2143:   case regex_constants::syntax_equal:
    #####: 2144:      pb->index = markid = -1;
    #####: 2145:      ++m_position;
    #####: 2146:      jump_offset = this->getoffset(this->append_state(syntax_element_jump, sizeof(re_jump)));
    %%%%%: 2146-block 96
call    0 never executed
call    1 never executed
    #####: 2147:      this->m_pdata->m_data.align();
call    0 never executed
    #####: 2148:      m_alt_insert_point = this->m_pdata->m_data.size();
call    0 never executed
    #####: 2149:      break;
    #####: 2150:   case regex_constants::syntax_not:
    #####: 2151:      pb->index = markid = -2;
    #####: 2152:      ++m_position;
    #####: 2153:      jump_offset = this->getoffset(this->append_state(syntax_element_jump, sizeof(re_jump)));
    %%%%%: 2153-block 101
call    0 never executed
call    1 never executed
    #####: 2154:      this->m_pdata->m_data.align();
call    0 never executed
    #####: 2155:      m_alt_insert_point = this->m_pdata->m_data.size();
call    0 never executed
    #####: 2156:      break;
    #####: 2157:   case regex_constants::escape_type_left_word:
        -: 2158:      {
        -: 2159:         // a lookbehind assertion:
    #####: 2160:         if(++m_position == m_end)
    %%%%%: 2160-block 106
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2161:         {
        -: 2162:            // Rewind to start of (? sequence:
    #####: 2163:            --m_position;
    #####: 2164:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2164-block 107
    %%%%%: 2164-block 108
    %%%%%: 2164-block 109
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2165:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2165-block 111
call    0 never executed
    #####: 2166:            return false;
        -: 2167:         }
    #####: 2168:         regex_constants::syntax_type t = this->m_traits.syntax_type(*m_position);
    %%%%%: 2168-block 113
call    0 never executed
    #####: 2169:         if(t == regex_constants::syntax_not)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2170:            pb->index = markid = -2;
    %%%%%: 2170-block 115
    #####: 2171:         else if(t == regex_constants::syntax_equal)
    %%%%%: 2171-block 116
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2172:            pb->index = markid = -1;
    %%%%%: 2172-block 117
        -: 2173:         else
        -: 2174:         {
        -: 2175:            // Probably a named capture which also starts (?< :
    #####: 2176:            name_delim = '>';
    #####: 2177:            --m_position;
    #####: 2178:            goto named_capture_jump;
    %%%%%: 2178-block 118
        -: 2179:         }
    #####: 2180:         ++m_position;
    #####: 2181:         jump_offset = this->getoffset(this->append_state(syntax_element_jump, sizeof(re_jump)));
    %%%%%: 2181-block 119
call    0 never executed
call    1 never executed
    #####: 2182:         this->append_state(syntax_element_backstep, sizeof(re_brace));
call    0 never executed
    #####: 2183:         this->m_pdata->m_data.align();
call    0 never executed
    #####: 2184:         m_alt_insert_point = this->m_pdata->m_data.size();
call    0 never executed
    #####: 2185:         break;
        -: 2186:      }
    #####: 2187:   case regex_constants::escape_type_right_word:
        -: 2188:      //
        -: 2189:      // an independent sub-expression:
        -: 2190:      //
    #####: 2191:      pb->index = markid = -3;
    #####: 2192:      ++m_position;
    #####: 2193:      jump_offset = this->getoffset(this->append_state(syntax_element_jump, sizeof(re_jump)));
    %%%%%: 2193-block 125
call    0 never executed
call    1 never executed
    #####: 2194:      this->m_pdata->m_data.align();
call    0 never executed
    #####: 2195:      m_alt_insert_point = this->m_pdata->m_data.size();
call    0 never executed
    #####: 2196:      break;
    #####: 2197:   case regex_constants::syntax_open_mark:
        -: 2198:      {
        -: 2199:      // a conditional expression:
    #####: 2200:      pb->index = markid = -4;
    #####: 2201:      if(++m_position == m_end)
    %%%%%: 2201-block 130
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2202:      {
        -: 2203:         // Rewind to start of (? sequence:
    #####: 2204:         --m_position;
    #####: 2205:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2205-block 131
    %%%%%: 2205-block 132
    %%%%%: 2205-block 133
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2206:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2206-block 135
call    0 never executed
    #####: 2207:         return false;
        -: 2208:      }
    #####: 2209:      v = this->m_traits.toi(m_position, m_end, 10);
    %%%%%: 2209-block 137
call    0 never executed
    #####: 2210:      if(m_position == m_end)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2211:      {
        -: 2212:         // Rewind to start of (? sequence:
    #####: 2213:         --m_position;
    #####: 2214:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2214-block 139
    %%%%%: 2214-block 140
    %%%%%: 2214-block 141
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2215:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2215-block 143
call    0 never executed
    #####: 2216:         return false;
        -: 2217:      }
    #####: 2218:      if(*m_position == charT('R'))
    %%%%%: 2218-block 145
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2219:      {
    #####: 2220:         if(++m_position == m_end)
    %%%%%: 2220-block 146
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2221:         {
        -: 2222:            // Rewind to start of (? sequence:
    #####: 2223:            --m_position;
    #####: 2224:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2224-block 147
    %%%%%: 2224-block 148
    %%%%%: 2224-block 149
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2225:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2225-block 151
call    0 never executed
    #####: 2226:            return false;
        -: 2227:         }
    #####: 2228:         if(*m_position == charT('&'))
    %%%%%: 2228-block 153
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2229:         {
    #####: 2230:            const charT* base = ++m_position;
    #####: 2231:            while((m_position != m_end) && (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark))
    %%%%%: 2231-block 154
    %%%%%: 2231-block 156
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2231-block 157
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2231-block 159
    %%%%%: 2231-block 160
    %%%%%: 2231-block 161
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 2232:               ++m_position;
    %%%%%: 2232-block 155
    #####: 2233:            if(m_position == m_end)
    %%%%%: 2233-block 162
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2234:            {
        -: 2235:               // Rewind to start of (? sequence:
    #####: 2236:               --m_position;
    #####: 2237:               while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2237-block 163
    %%%%%: 2237-block 164
    %%%%%: 2237-block 165
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2238:               fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2238-block 167
call    0 never executed
    #####: 2239:               return false;
        -: 2240:            }
    #####: 2241:            v = -static_cast<int>(hash_value_from_capture_name(base, m_position));
    %%%%%: 2241-block 169
call    0 never executed
        -: 2242:         }
        -: 2243:         else
        -: 2244:         {
    #####: 2245:            v = -this->m_traits.toi(m_position, m_end, 10);
    %%%%%: 2245-block 171
call    0 never executed
        -: 2246:         }
    #####: 2247:         re_brace* br = static_cast<re_brace*>(this->append_state(syntax_element_assert_backref, sizeof(re_brace)));
    %%%%%: 2247-block 173
call    0 never executed
    #####: 2248:         br->index = v < 0 ? (int)(v - 1) : 0;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2248-block 175
    %%%%%: 2248-block 176
    #####: 2249:         if(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark)
    %%%%%: 2249-block 177
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2250:         {
        -: 2251:            // Rewind to start of (? sequence:
    #####: 2252:            --m_position;
    #####: 2253:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2253-block 179
    %%%%%: 2253-block 180
    %%%%%: 2253-block 181
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2254:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2254-block 183
call    0 never executed
    #####: 2255:            return false;
        -: 2256:         }
    #####: 2257:         if(++m_position == m_end)
    %%%%%: 2257-block 185
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2258:         {
        -: 2259:            // Rewind to start of (? sequence:
    #####: 2260:            --m_position;
    #####: 2261:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2261-block 186
    %%%%%: 2261-block 187
    %%%%%: 2261-block 188
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2262:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2262-block 190
call    0 never executed
    #####: 2263:            return false;
        -: 2264:         }
        -: 2265:      }
    #####: 2266:      else if((*m_position == charT('\'')) || (*m_position == charT('<')))
    %%%%%: 2266-block 192
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2266-block 193
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2267:      {
    #####: 2268:         const charT* base = ++m_position;
    #####: 2269:         while((m_position != m_end) && (*m_position != charT('>')) && (*m_position != charT('\'')))
    %%%%%: 2269-block 194
    %%%%%: 2269-block 196
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2269-block 197
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2269-block 198
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 2270:            ++m_position;
    %%%%%: 2270-block 195
    #####: 2271:         if(m_position == m_end)
    %%%%%: 2271-block 199
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2272:         {
        -: 2273:            // Rewind to start of (? sequence:
    #####: 2274:            --m_position;
    #####: 2275:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2275-block 200
    %%%%%: 2275-block 201
    %%%%%: 2275-block 202
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2276:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2276-block 204
call    0 never executed
    #####: 2277:            return false;
        -: 2278:         }
    #####: 2279:         v = static_cast<int>(hash_value_from_capture_name(base, m_position));
    %%%%%: 2279-block 206
call    0 never executed
    #####: 2280:         re_brace* br = static_cast<re_brace*>(this->append_state(syntax_element_assert_backref, sizeof(re_brace)));
call    0 never executed
    #####: 2281:         br->index = (int)v;
    #####: 2282:         if(((*m_position != charT('>')) && (*m_position != charT('\''))) || (++m_position == m_end))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2282-block 209
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2282-block 210
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 2282-block 211
    %%%%%: 2282-block 212
    %%%%%: 2282-block 213
branch  6 never executed (fallthrough)
branch  7 never executed
        -: 2283:         {
        -: 2284:            // Rewind to start of (? sequence:
    #####: 2285:            --m_position;
    #####: 2286:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2286-block 214
    %%%%%: 2286-block 215
    %%%%%: 2286-block 216
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2287:            fail(regex_constants::error_perl_extension, m_position - m_base, "Unterminated named capture.");
    %%%%%: 2287-block 220
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2287-block 221
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2287-block 222
call    6 never executed
    $$$$$: 2287-block 612
call    7 never executed
    $$$$$: 2287-block 616
    $$$$$: 2287-block 617
call    8 never executed
    #####: 2288:            return false;
    %%%%%: 2288-block 224
        -: 2289:         }
    #####: 2290:         if(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark)
    %%%%%: 2290-block 225
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2291:         {
        -: 2292:            // Rewind to start of (? sequence:
    #####: 2293:            --m_position;
    #####: 2294:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2294-block 227
    %%%%%: 2294-block 228
    %%%%%: 2294-block 229
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2295:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2295-block 231
call    0 never executed
    #####: 2296:            return false;
        -: 2297:         }
    #####: 2298:         if(++m_position == m_end)
    %%%%%: 2298-block 233
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2299:         {
        -: 2300:            // Rewind to start of (? sequence:
    #####: 2301:            --m_position;
    #####: 2302:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2302-block 234
    %%%%%: 2302-block 235
    %%%%%: 2302-block 236
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2303:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2303-block 238
call    0 never executed
    #####: 2304:            return false;
        -: 2305:         }
    #####: 2306:      }
    %%%%%: 2306-block 240
    #####: 2307:      else if(*m_position == charT('D'))
    %%%%%: 2307-block 241
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2308:      {
    #####: 2309:         const char* def = "DEFINE";
    #####: 2310:         while(*def && (m_position != m_end) && (*m_position == charT(*def)))
    %%%%%: 2310-block 242
    %%%%%: 2310-block 244
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2310-block 245
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2310-block 246
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 2311:            ++m_position, ++def;
    %%%%%: 2311-block 243
    #####: 2312:         if((m_position == m_end) || *def)
    %%%%%: 2312-block 247
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2312-block 248
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2313:         {
        -: 2314:            // Rewind to start of (? sequence:
    #####: 2315:            --m_position;
    #####: 2316:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2316-block 249
    %%%%%: 2316-block 250
    %%%%%: 2316-block 251
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2317:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2317-block 253
call    0 never executed
    #####: 2318:            return false;
        -: 2319:         }
    #####: 2320:         re_brace* br = static_cast<re_brace*>(this->append_state(syntax_element_assert_backref, sizeof(re_brace)));
    %%%%%: 2320-block 255
call    0 never executed
    #####: 2321:         br->index = 9999; // special magic value!
    #####: 2322:         if(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2323:         {
        -: 2324:            // Rewind to start of (? sequence:
    #####: 2325:            --m_position;
    #####: 2326:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2326-block 258
    %%%%%: 2326-block 259
    %%%%%: 2326-block 260
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2327:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2327-block 262
call    0 never executed
    #####: 2328:            return false;
        -: 2329:         }
    #####: 2330:         if(++m_position == m_end)
    %%%%%: 2330-block 264
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2331:         {
        -: 2332:            // Rewind to start of (? sequence:
    #####: 2333:            --m_position;
    #####: 2334:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2334-block 265
    %%%%%: 2334-block 266
    %%%%%: 2334-block 267
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2335:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2335-block 269
call    0 never executed
    #####: 2336:            return false;
        -: 2337:         }
        -: 2338:      }
    #####: 2339:      else if(v > 0)
    %%%%%: 2339-block 271
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2340:      {
    #####: 2341:         re_brace* br = static_cast<re_brace*>(this->append_state(syntax_element_assert_backref, sizeof(re_brace)));
    %%%%%: 2341-block 272
call    0 never executed
    #####: 2342:         br->index = (int)v;
    #####: 2343:         if(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2344:         {
        -: 2345:            // Rewind to start of (? sequence:
    #####: 2346:            --m_position;
    #####: 2347:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2347-block 275
    %%%%%: 2347-block 276
    %%%%%: 2347-block 277
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2348:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2348-block 279
call    0 never executed
    #####: 2349:            return false;
        -: 2350:         }
    #####: 2351:         if(++m_position == m_end)
    %%%%%: 2351-block 281
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2352:         {
        -: 2353:            // Rewind to start of (? sequence:
    #####: 2354:            --m_position;
    #####: 2355:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2355-block 282
    %%%%%: 2355-block 283
    %%%%%: 2355-block 284
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2356:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2356-block 286
call    0 never executed
    #####: 2357:            return false;
        -: 2358:         }
        -: 2359:      }
        -: 2360:      else
        -: 2361:      {
        -: 2362:         // verify that we have a lookahead or lookbehind assert:
    #####: 2363:         if(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_question)
    %%%%%: 2363-block 288
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2364:         {
        -: 2365:            // Rewind to start of (? sequence:
    #####: 2366:            --m_position;
    #####: 2367:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2367-block 290
    %%%%%: 2367-block 291
    %%%%%: 2367-block 292
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2368:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2368-block 294
call    0 never executed
    #####: 2369:            return false;
        -: 2370:         }
    #####: 2371:         if(++m_position == m_end)
    %%%%%: 2371-block 296
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2372:         {
        -: 2373:            // Rewind to start of (? sequence:
    #####: 2374:            --m_position;
    #####: 2375:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2375-block 297
    %%%%%: 2375-block 298
    %%%%%: 2375-block 299
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2376:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2376-block 301
call    0 never executed
    #####: 2377:            return false;
        -: 2378:         }
    #####: 2379:         if(this->m_traits.syntax_type(*m_position) == regex_constants::escape_type_left_word)
    %%%%%: 2379-block 303
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2380:         {
    #####: 2381:            if(++m_position == m_end)
    %%%%%: 2381-block 305
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2382:            {
        -: 2383:               // Rewind to start of (? sequence:
    #####: 2384:               --m_position;
    #####: 2385:               while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2385-block 306
    %%%%%: 2385-block 307
    %%%%%: 2385-block 308
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2386:               fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2386-block 310
call    0 never executed
    #####: 2387:               return false;
        -: 2388:            }
    #####: 2389:            if((this->m_traits.syntax_type(*m_position) != regex_constants::syntax_equal)
    %%%%%: 2389-block 312
call    0 never executed
    #####: 2390:               && (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_not))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2390-block 314
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2390-block 316
    %%%%%: 2390-block 317
    %%%%%: 2390-block 318
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2391:            {
        -: 2392:               // Rewind to start of (? sequence:
    #####: 2393:               --m_position;
    #####: 2394:               while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2394-block 319
    %%%%%: 2394-block 320
    %%%%%: 2394-block 321
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2395:               fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2395-block 323
call    0 never executed
    #####: 2396:               return false;
        -: 2397:            }
    #####: 2398:            m_position -= 3;
    %%%%%: 2398-block 325
        -: 2399:         }
        -: 2400:         else
        -: 2401:         {
    #####: 2402:            if((this->m_traits.syntax_type(*m_position) != regex_constants::syntax_equal)
    %%%%%: 2402-block 326
call    0 never executed
    #####: 2403:               && (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_not))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2403-block 328
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2403-block 330
    %%%%%: 2403-block 331
    %%%%%: 2403-block 332
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2404:            {
        -: 2405:               // Rewind to start of (? sequence:
    #####: 2406:               --m_position;
    #####: 2407:               while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2407-block 333
    %%%%%: 2407-block 334
    %%%%%: 2407-block 335
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2408:               fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2408-block 337
call    0 never executed
    #####: 2409:               return false;
        -: 2410:            }
    #####: 2411:            m_position -= 2;
    %%%%%: 2411-block 339
        -: 2412:         }
        -: 2413:      }
    #####: 2414:      break;
    %%%%%: 2414-block 340
        -: 2415:      }
    #####: 2416:   case regex_constants::syntax_close_mark:
        -: 2417:      // Rewind to start of (? sequence:
    #####: 2418:      --m_position;
    #####: 2419:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2419-block 341
    %%%%%: 2419-block 342
    %%%%%: 2419-block 343
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2420:      fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2420-block 345
call    0 never executed
    #####: 2421:      return false;
    #####: 2422:   case regex_constants::escape_type_end_buffer:
        -: 2423:      {
    #####: 2424:      name_delim = *m_position;
    %%%%%: 2424-block 347
    #####: 2425:named_capture_jump:
    #####: 2426:      markid = 0;
    #####: 2427:      if(0 == (this->flags() & regbase::nosubs))
    %%%%%: 2427-block 348
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2428:      {
    #####: 2429:         markid = ++m_mark_count;
    #####: 2430:         if(this->flags() & regbase::save_subexpression_location)
    %%%%%: 2430-block 350
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2431:            this->m_pdata->m_subs.push_back(std::pair<std::size_t, std::size_t>(std::distance(m_base, m_position) - 2, 0));
    %%%%%: 2431-block 352
    %%%%%: 2431-block 358
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2431-block 360
    $$$$$: 2431-block 618
    $$$$$: 2431-block 619
    $$$$$: 2431-block 620
call    4 never executed
        -: 2432:      }
    #####: 2433:      pb->index = markid;
    #####: 2434:      const charT* base = ++m_position;
    #####: 2435:      if(m_position == m_end)
    %%%%%: 2435-block 361
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2436:      {
        -: 2437:         // Rewind to start of (? sequence:
    #####: 2438:         --m_position;
    #####: 2439:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2439-block 362
    %%%%%: 2439-block 363
    %%%%%: 2439-block 364
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2440:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2440-block 366
call    0 never executed
    #####: 2441:         return false;
        -: 2442:      }
    #####: 2443:      while((m_position != m_end) && (*m_position != name_delim))
    %%%%%: 2443-block 368
    %%%%%: 2443-block 370
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2443-block 371
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 2444:         ++m_position;
    %%%%%: 2444-block 369
    #####: 2445:      if(m_position == m_end)
    %%%%%: 2445-block 372
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2446:      {
        -: 2447:         // Rewind to start of (? sequence:
    #####: 2448:         --m_position;
    #####: 2449:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2449-block 373
    %%%%%: 2449-block 374
    %%%%%: 2449-block 375
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2450:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2450-block 377
call    0 never executed
    #####: 2451:         return false;
        -: 2452:      }
    #####: 2453:      this->m_pdata->set_name(base, m_position, markid);
    %%%%%: 2453-block 379
call    0 never executed
    #####: 2454:      ++m_position;
    #####: 2455:      break;
        -: 2456:      }
    #####: 2457:   default:
    #####: 2458:      if(*m_position == charT('R'))
    %%%%%: 2458-block 381
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2459:      {
    #####: 2460:         ++m_position;
    #####: 2461:         v = 0;
    #####: 2462:         if(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark)
    %%%%%: 2462-block 382
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2463:         {
        -: 2464:            // Rewind to start of (? sequence:
    #####: 2465:            --m_position;
    #####: 2466:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2466-block 384
    %%%%%: 2466-block 385
    %%%%%: 2466-block 386
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2467:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2467-block 388
call    0 never executed
    #####: 2468:            return false;
        -: 2469:         }
    #####: 2470:         goto insert_recursion;
    %%%%%: 2470-block 390
        -: 2471:      }
    #####: 2472:      if(*m_position == charT('&'))
    %%%%%: 2472-block 391
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2473:      {
    #####: 2474:         ++m_position;
    #####: 2475:         const charT* base = m_position;
    #####: 2476:         while((m_position != m_end) && (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark))
    %%%%%: 2476-block 392
    %%%%%: 2476-block 394
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2476-block 395
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2476-block 397
    %%%%%: 2476-block 398
    %%%%%: 2476-block 399
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 2477:            ++m_position;
    %%%%%: 2477-block 393
    #####: 2478:         if(m_position == m_end)
    %%%%%: 2478-block 400
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2479:         {
        -: 2480:            // Rewind to start of (? sequence:
    #####: 2481:            --m_position;
    #####: 2482:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2482-block 401
    %%%%%: 2482-block 402
    %%%%%: 2482-block 403
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2483:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2483-block 405
call    0 never executed
    #####: 2484:            return false;
        -: 2485:         }
    #####: 2486:         v = static_cast<int>(hash_value_from_capture_name(base, m_position));
    %%%%%: 2486-block 407
call    0 never executed
    #####: 2487:         goto insert_recursion;
        -: 2488:      }
    #####: 2489:      if(*m_position == charT('P'))
    %%%%%: 2489-block 409
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2490:      {
    #####: 2491:         ++m_position;
    #####: 2492:         if(m_position == m_end)
    %%%%%: 2492-block 410
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2493:         {
        -: 2494:            // Rewind to start of (? sequence:
    #####: 2495:            --m_position;
    #####: 2496:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2496-block 411
    %%%%%: 2496-block 412
    %%%%%: 2496-block 413
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2497:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2497-block 415
call    0 never executed
    #####: 2498:            return false;
        -: 2499:         }
    #####: 2500:         if(*m_position == charT('>'))
    %%%%%: 2500-block 417
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2501:         {
    #####: 2502:            ++m_position;
    #####: 2503:            const charT* base = m_position;
    #####: 2504:            while((m_position != m_end) && (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark))
    %%%%%: 2504-block 418
    %%%%%: 2504-block 420
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2504-block 421
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2504-block 423
    %%%%%: 2504-block 424
    %%%%%: 2504-block 425
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 2505:               ++m_position;
    %%%%%: 2505-block 419
    #####: 2506:            if(m_position == m_end)
    %%%%%: 2506-block 426
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2507:            {
        -: 2508:               // Rewind to start of (? sequence:
    #####: 2509:               --m_position;
    #####: 2510:               while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2510-block 427
    %%%%%: 2510-block 428
    %%%%%: 2510-block 429
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2511:               fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2511-block 431
call    0 never executed
    #####: 2512:               return false;
        -: 2513:            }
    #####: 2514:            v = static_cast<int>(hash_value_from_capture_name(base, m_position));
    %%%%%: 2514-block 433
call    0 never executed
    #####: 2515:            goto insert_recursion;
        -: 2516:         }
        -: 2517:      }
        -: 2518:      //
        -: 2519:      // lets assume that we have a (?imsx) group and try and parse it:
        -: 2520:      //
    #####: 2521:option_group_jump:
    %%%%%: 2521-block 435
    #####: 2522:      regex_constants::syntax_option_type opts = parse_options();
    %%%%%: 2522-block 436
call    0 never executed
    #####: 2523:      if(m_position == m_end)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2524:      {
        -: 2525:         // Rewind to start of (? sequence:
    #####: 2526:         --m_position;
    #####: 2527:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2527-block 438
    %%%%%: 2527-block 439
    %%%%%: 2527-block 440
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2528:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2528-block 442
call    0 never executed
    #####: 2529:         return false;
        -: 2530:      }
        -: 2531:      // make a note of whether we have a case change:
    #####: 2532:      m_has_case_change = ((opts & regbase::icase) != (this->flags() & regbase::icase));
    %%%%%: 2532-block 444
call    0 never executed
    #####: 2533:      pb->index = markid = 0;
    #####: 2534:      if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_close_mark)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2535:      {
        -: 2536:         // update flags and carry on as normal:
    #####: 2537:         this->flags(opts);
    %%%%%: 2537-block 447
call    0 never executed
    #####: 2538:         restore_flags = false;
    #####: 2539:         old_case_change |= m_has_case_change; // defer end of scope by one ')'
        -: 2540:      }
    #####: 2541:      else if(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_colon)
    %%%%%: 2541-block 449
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2542:      {
        -: 2543:         // update flags and carry on until the matching ')' is found:
    #####: 2544:         this->flags(opts);
    %%%%%: 2544-block 451
call    0 never executed
    #####: 2545:         ++m_position;
        -: 2546:      }
        -: 2547:      else
        -: 2548:      {
        -: 2549:         // Rewind to start of (? sequence:
    #####: 2550:         --m_position;
    #####: 2551:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2551-block 453
    %%%%%: 2551-block 454
    %%%%%: 2551-block 455
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2552:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2552-block 457
call    0 never executed
    #####: 2553:         return false;
        -: 2554:      }
        -: 2555:
        -: 2556:      // finally append a case change state if we need it:
    #####: 2557:      if(m_has_case_change)
    %%%%%: 2557-block 459
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2558:      {
        -: 2559:         static_cast<re_case*>(
    #####: 2560:            this->append_state(syntax_element_toggle_case, sizeof(re_case))
    #####: 2561:            )->icase = opts & regbase::icase;
    %%%%%: 2561-block 460
call    0 never executed
        -: 2562:      }
        -: 2563:
        -: 2564:   }
        -: 2565:   //
        -: 2566:   // now recursively add more states, this will terminate when we get to a
        -: 2567:   // matching ')' :
        -: 2568:   //
    #####: 2569:   parse_all();
    %%%%%: 2569-block 462
call    0 never executed
        -: 2570:   //
        -: 2571:   // Unwind alternatives:
        -: 2572:   //
    #####: 2573:   if(0 == unwind_alts(last_paren_start))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2574:   {
        -: 2575:      // Rewind to start of (? sequence:
    #####: 2576:      --m_position;
    #####: 2577:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2577-block 465
    %%%%%: 2577-block 466
    %%%%%: 2577-block 467
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2578:      fail(regex_constants::error_perl_extension, m_position - m_base, "Invalid alternation operators within (?...) block.");
    %%%%%: 2578-block 471
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2578-block 472
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2578-block 473
call    6 never executed
    $$$$$: 2578-block 621
call    7 never executed
    $$$$$: 2578-block 625
    $$$$$: 2578-block 626
call    8 never executed
    #####: 2579:      return false;
    %%%%%: 2579-block 475
        -: 2580:   }
        -: 2581:   //
        -: 2582:   // we either have a ')' or we have run out of characters prematurely:
        -: 2583:   //
    #####: 2584:   if(m_position == m_end)
    %%%%%: 2584-block 476
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2585:   {
        -: 2586:      // Rewind to start of (? sequence:
    #####: 2587:      --m_position;
    #####: 2588:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2588-block 477
    %%%%%: 2588-block 478
    %%%%%: 2588-block 479
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2589:      this->fail(regex_constants::error_paren, std::distance(m_base, m_end));
    %%%%%: 2589-block 481
    %%%%%: 2589-block 487
call    0 never executed
    #####: 2590:      return false;
        -: 2591:   }
    #####: 2592:   BOOST_REGEX_ASSERT(this->m_traits.syntax_type(*m_position) == regex_constants::syntax_close_mark);
    %%%%%: 2592-block 489
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2592-block 491
call    3 never executed
    #####: 2593:   ++m_position;
        -: 2594:   //
        -: 2595:   // restore the flags:
        -: 2596:   //
    #####: 2597:   if(restore_flags)
    %%%%%: 2597-block 492
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2598:   {
        -: 2599:      // append a case change state if we need it:
    #####: 2600:      if(m_has_case_change)
    %%%%%: 2600-block 493
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2601:      {
        -: 2602:         static_cast<re_case*>(
    #####: 2603:            this->append_state(syntax_element_toggle_case, sizeof(re_case))
    #####: 2604:            )->icase = old_flags & regbase::icase;
    %%%%%: 2604-block 494
call    0 never executed
        -: 2605:      }
    #####: 2606:      this->flags(old_flags);
    %%%%%: 2606-block 496
call    0 never executed
        -: 2607:   }
        -: 2608:   //
        -: 2609:   // set up the jump pointer if we have one:
        -: 2610:   //
    #####: 2611:   if(jump_offset)
    %%%%%: 2611-block 497
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2612:   {
    #####: 2613:      this->m_pdata->m_data.align();
    %%%%%: 2613-block 498
call    0 never executed
    #####: 2614:      re_jump* jmp = static_cast<re_jump*>(this->getaddress(jump_offset));
call    0 never executed
    #####: 2615:      jmp->alt.i = this->m_pdata->m_data.size() - this->getoffset(jmp);
call    0 never executed
call    1 never executed
    #####: 2616:      if((this->m_last_state == jmp) && (markid != -2))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2616-block 503
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2617:      {
        -: 2618:         // Oops... we didn't have anything inside the assertion.
        -: 2619:         // Note we don't get here for negated forward lookahead as (?!)
        -: 2620:         // does have some uses.
        -: 2621:         // Rewind to start of (? sequence:
    #####: 2622:         --m_position;
    #####: 2623:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2623-block 504
    %%%%%: 2623-block 505
    %%%%%: 2623-block 506
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2624:         fail(regex_constants::error_perl_extension, m_position - m_base, "Invalid or empty zero width assertion.");
    %%%%%: 2624-block 510
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2624-block 511
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2624-block 512
call    6 never executed
    $$$$$: 2624-block 627
call    7 never executed
    $$$$$: 2624-block 631
    $$$$$: 2624-block 632
call    8 never executed
    #####: 2625:         return false;
    %%%%%: 2625-block 514
        -: 2626:      }
        -: 2627:   }
        -: 2628:   //
        -: 2629:   // verify that if this is conditional expression, that we do have
        -: 2630:   // an alternative, if not add one:
        -: 2631:   //
    #####: 2632:   if(markid == -4)
    %%%%%: 2632-block 515
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2633:   {
    #####: 2634:      re_syntax_base* b = this->getaddress(expected_alt_point);
    %%%%%: 2634-block 516
call    0 never executed
        -: 2635:      // Make sure we have exactly one alternative following this state:
    #####: 2636:      if(b->type != syntax_element_alt)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2637:      {
    #####: 2638:         re_alt* alt = static_cast<re_alt*>(this->insert_state(expected_alt_point, syntax_element_alt, sizeof(re_alt)));
    %%%%%: 2638-block 518
call    0 never executed
    #####: 2639:         alt->alt.i = this->m_pdata->m_data.size() - this->getoffset(alt);
call    0 never executed
call    1 never executed
        -: 2640:      }
    #####: 2641:      else if(((std::ptrdiff_t)this->m_pdata->m_data.size() > (static_cast<re_alt*>(b)->alt.i + this->getoffset(b))) && (static_cast<re_alt*>(b)->alt.i > 0) && this->getaddress(static_cast<re_alt*>(b)->alt.i, b)->type == syntax_element_alt)
    %%%%%: 2641-block 522
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2641-block 525
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 2641-block 526
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed
    %%%%%: 2641-block 528
    %%%%%: 2641-block 529
    %%%%%: 2641-block 530
branch  9 never executed (fallthrough)
branch 10 never executed
        -: 2642:      {
        -: 2643:         // Can't have seen more than one alternative:
        -: 2644:         // Rewind to start of (? sequence:
    #####: 2645:         --m_position;
    #####: 2646:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2646-block 531
    %%%%%: 2646-block 532
    %%%%%: 2646-block 533
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2647:         fail(regex_constants::error_bad_pattern, m_position - m_base, "More than one alternation operator | was encountered inside a conditional expression.");
    %%%%%: 2647-block 537
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2647-block 538
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2647-block 539
call    6 never executed
    $$$$$: 2647-block 633
call    7 never executed
    $$$$$: 2647-block 637
    $$$$$: 2647-block 638
call    8 never executed
    #####: 2648:         return false;
    %%%%%: 2648-block 541
        -: 2649:      }
        -: 2650:      else
        -: 2651:      {
        -: 2652:         // We must *not* have seen an alternative inside a (DEFINE) block:
    #####: 2653:         b = this->getaddress(b->next.i, b);
    %%%%%: 2653-block 542
call    0 never executed
    #####: 2654:         if((b->type == syntax_element_assert_backref) && (static_cast<re_brace*>(b)->index == 9999))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2654-block 544
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2655:         {
        -: 2656:            // Rewind to start of (? sequence:
    #####: 2657:            --m_position;
    #####: 2658:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2658-block 545
    %%%%%: 2658-block 546
    %%%%%: 2658-block 547
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2659:            fail(regex_constants::error_bad_pattern, m_position - m_base, "Alternation operators are not allowed inside a DEFINE block.");
    %%%%%: 2659-block 551
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2659-block 552
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2659-block 553
call    6 never executed
    $$$$$: 2659-block 639
call    7 never executed
    $$$$$: 2659-block 643
    $$$$$: 2659-block 644
call    8 never executed
    #####: 2660:            return false;
    %%%%%: 2660-block 555
        -: 2661:         }
        -: 2662:      }
        -: 2663:      // check for invalid repetition of next state:
    #####: 2664:      b = this->getaddress(expected_alt_point);
    %%%%%: 2664-block 556
call    0 never executed
    #####: 2665:      b = this->getaddress(static_cast<re_alt*>(b)->next.i, b);
call    0 never executed
    #####: 2666:      if((b->type != syntax_element_assert_backref)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2667:         && (b->type != syntax_element_startmark))
    %%%%%: 2667-block 559
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2668:      {
        -: 2669:         // Rewind to start of (? sequence:
    #####: 2670:         --m_position;
    #####: 2671:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2671-block 560
    %%%%%: 2671-block 561
    %%%%%: 2671-block 562
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2672:         fail(regex_constants::error_badrepeat, m_position - m_base, "A repetition operator cannot be applied to a zero-width assertion.");
    %%%%%: 2672-block 566
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2672-block 567
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2672-block 568
call    6 never executed
    $$$$$: 2672-block 645
call    7 never executed
    $$$$$: 2672-block 649
    #####: 2673:         return false;
    %%%%%: 2673-block 570
        -: 2674:      }
        -: 2675:   }
        -: 2676:   //
        -: 2677:   // append closing parenthesis state:
        -: 2678:   //
    #####: 2679:   pb = static_cast<re_brace*>(this->append_state(syntax_element_endmark, sizeof(re_brace)));
    %%%%%: 2679-block 571
call    0 never executed
    #####: 2680:   pb->index = markid;
    #####: 2681:   pb->icase = this->flags() & regbase::icase;
call    0 never executed
    #####: 2682:   this->m_paren_start = last_paren_start;
        -: 2683:   //
        -: 2684:   // restore the alternate insertion point:
        -: 2685:   //
    #####: 2686:   this->m_alt_insert_point = last_alt_point;
        -: 2687:   //
        -: 2688:   // and the case change data:
        -: 2689:   //
    #####: 2690:   m_has_case_change = old_case_change;
        -: 2691:   //
        -: 2692:   // And the mark_reset data:
        -: 2693:   //
    #####: 2694:   if(m_max_mark > m_mark_count)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2695:   {
    #####: 2696:      m_mark_count = m_max_mark;
    %%%%%: 2696-block 574
        -: 2697:   }
    #####: 2698:   m_mark_reset = mark_reset;
    #####: 2699:   m_max_mark = max_mark;
        -: 2700:
        -: 2701:
    #####: 2702:   if(markid > 0)
    %%%%%: 2702-block 575
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2703:   {
    #####: 2704:      if(this->flags() & regbase::save_subexpression_location)
    %%%%%: 2704-block 576
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2705:         this->m_pdata->m_subs.at((std::size_t)markid - 1).second = std::distance(m_base, m_position) - 1;
    %%%%%: 2705-block 578
    %%%%%: 2705-block 584
call    0 never executed
        -: 2706:   }
    #####: 2707:   return true;
    %%%%%: 2707-block 586
        -: 2708:}
        -: 2709:
        -: 2710:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE10match_verbEPKc called 0 returned 0% blocks executed 0%
    #####: 2711:bool basic_regex_parser<charT, traits>::match_verb(const char* verb)
        -: 2712:{
    #####: 2713:   while(*verb)
    %%%%%: 2713-block 2
    %%%%%: 2713-block 18
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 2714:   {
    #####: 2715:      if(static_cast<charT>(*verb) != *m_position)
    %%%%%: 2715-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2716:      {
    #####: 2717:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2717-block 4
    %%%%%: 2717-block 5
    %%%%%: 2717-block 6
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2718:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2718-block 8
call    0 never executed
    #####: 2719:         return false;
        -: 2720:      }
    #####: 2721:      if(++m_position == m_end)
    %%%%%: 2721-block 10
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2722:      {
    #####: 2723:         --m_position;
    #####: 2724:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2724-block 11
    %%%%%: 2724-block 12
    %%%%%: 2724-block 13
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2725:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2725-block 15
call    0 never executed
    #####: 2726:         return false;
        -: 2727:      }
    #####: 2728:      ++verb;
    %%%%%: 2728-block 17
        -: 2729:   }
    #####: 2730:   return true;
    %%%%%: 2730-block 19
        -: 2731:}
        -: 2732:
        -: 2733:#ifdef BOOST_REGEX_MSVC
        -: 2734:#  pragma warning(push)
        -: 2735:#if BOOST_REGEX_MSVC >= 1800
        -: 2736:#pragma warning(disable:26812)
        -: 2737:#endif
        -: 2738:#endif
        -: 2739:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE15parse_perl_verbEv called 0 returned 0% blocks executed 0%
    #####: 2740:bool basic_regex_parser<charT, traits>::parse_perl_verb()
        -: 2741:{
    #####: 2742:   if(++m_position == m_end)
    %%%%%: 2742-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2743:   {
        -: 2744:      // Rewind to start of (* sequence:
    #####: 2745:      --m_position;
    #####: 2746:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2746-block 3
    %%%%%: 2746-block 4
    %%%%%: 2746-block 5
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2747:      fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2747-block 7
call    0 never executed
    #####: 2748:      return false;
        -: 2749:   }
    #####: 2750:   switch(*m_position)
    %%%%%: 2750-block 9
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -: 2751:   {
    #####: 2752:   case 'F':
    #####: 2753:      if(++m_position == m_end)
    %%%%%: 2753-block 10
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2754:      {
        -: 2755:         // Rewind to start of (* sequence:
    #####: 2756:         --m_position;
    #####: 2757:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2757-block 11
    %%%%%: 2757-block 12
    %%%%%: 2757-block 13
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2758:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2758-block 15
call    0 never executed
    #####: 2759:         return false;
        -: 2760:      }
    #####: 2761:      if((this->m_traits.syntax_type(*m_position) == regex_constants::syntax_close_mark) || match_verb("AIL"))
    %%%%%: 2761-block 17
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2761-block 19
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 2761-block 21
    %%%%%: 2761-block 22
    %%%%%: 2761-block 23
branch  6 never executed (fallthrough)
branch  7 never executed
        -: 2762:      {
    #####: 2763:         if((m_position == m_end) || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark))
    %%%%%: 2763-block 24
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2763-block 25
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2763-block 27
    %%%%%: 2763-block 28
    %%%%%: 2763-block 29
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2764:         {
        -: 2765:            // Rewind to start of (* sequence:
    #####: 2766:            --m_position;
    #####: 2767:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2767-block 30
    %%%%%: 2767-block 31
    %%%%%: 2767-block 32
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2768:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2768-block 34
call    0 never executed
    #####: 2769:            return false;
        -: 2770:         }
    #####: 2771:         ++m_position;
    #####: 2772:         this->append_state(syntax_element_fail);
    %%%%%: 2772-block 36
call    0 never executed
    #####: 2773:         return true;
        -: 2774:      }
    #####: 2775:      break;
    %%%%%: 2775-block 38
    #####: 2776:   case 'A':
    #####: 2777:      if(++m_position == m_end)
    %%%%%: 2777-block 39
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2778:      {
        -: 2779:         // Rewind to start of (* sequence:
    #####: 2780:         --m_position;
    #####: 2781:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2781-block 40
    %%%%%: 2781-block 41
    %%%%%: 2781-block 42
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2782:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2782-block 44
call    0 never executed
    #####: 2783:         return false;
        -: 2784:      }
    #####: 2785:      if(match_verb("CCEPT"))
    %%%%%: 2785-block 46
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2786:      {
    #####: 2787:         if((m_position == m_end) || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark))
    %%%%%: 2787-block 48
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2787-block 49
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2787-block 51
    %%%%%: 2787-block 52
    %%%%%: 2787-block 53
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2788:         {
        -: 2789:            // Rewind to start of (* sequence:
    #####: 2790:            --m_position;
    #####: 2791:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2791-block 54
    %%%%%: 2791-block 55
    %%%%%: 2791-block 56
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2792:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2792-block 58
call    0 never executed
    #####: 2793:            return false;
        -: 2794:         }
    #####: 2795:         ++m_position;
    #####: 2796:         this->append_state(syntax_element_accept);
    %%%%%: 2796-block 60
call    0 never executed
    #####: 2797:         return true;
        -: 2798:      }
    #####: 2799:      break;
    %%%%%: 2799-block 62
    #####: 2800:   case 'C':
    #####: 2801:      if(++m_position == m_end)
    %%%%%: 2801-block 63
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2802:      {
        -: 2803:         // Rewind to start of (* sequence:
    #####: 2804:         --m_position;
    #####: 2805:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2805-block 64
    %%%%%: 2805-block 65
    %%%%%: 2805-block 66
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2806:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2806-block 68
call    0 never executed
    #####: 2807:         return false;
        -: 2808:      }
    #####: 2809:      if(match_verb("OMMIT"))
    %%%%%: 2809-block 70
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2810:      {
    #####: 2811:         if((m_position == m_end) || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark))
    %%%%%: 2811-block 72
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2811-block 73
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2811-block 75
    %%%%%: 2811-block 76
    %%%%%: 2811-block 77
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2812:         {
        -: 2813:            // Rewind to start of (* sequence:
    #####: 2814:            --m_position;
    #####: 2815:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2815-block 78
    %%%%%: 2815-block 79
    %%%%%: 2815-block 80
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2816:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2816-block 82
call    0 never executed
    #####: 2817:            return false;
        -: 2818:         }
    #####: 2819:         ++m_position;
    #####: 2820:         static_cast<re_commit*>(this->append_state(syntax_element_commit, sizeof(re_commit)))->action = commit_commit;
    %%%%%: 2820-block 84
call    0 never executed
    #####: 2821:         this->m_pdata->m_disable_match_any = true;
    #####: 2822:         return true;
        -: 2823:      }
    #####: 2824:      break;
    %%%%%: 2824-block 86
    #####: 2825:   case 'P':
    #####: 2826:      if(++m_position == m_end)
    %%%%%: 2826-block 87
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2827:      {
        -: 2828:         // Rewind to start of (* sequence:
    #####: 2829:         --m_position;
    #####: 2830:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2830-block 88
    %%%%%: 2830-block 89
    %%%%%: 2830-block 90
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2831:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2831-block 92
call    0 never executed
    #####: 2832:         return false;
        -: 2833:      }
    #####: 2834:      if(match_verb("RUNE"))
    %%%%%: 2834-block 94
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2835:      {
    #####: 2836:         if((m_position == m_end) || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark))
    %%%%%: 2836-block 96
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2836-block 97
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2836-block 99
    %%%%%: 2836-block 100
    %%%%%: 2836-block 101
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2837:         {
        -: 2838:            // Rewind to start of (* sequence:
    #####: 2839:            --m_position;
    #####: 2840:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2840-block 102
    %%%%%: 2840-block 103
    %%%%%: 2840-block 104
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2841:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2841-block 106
call    0 never executed
    #####: 2842:            return false;
        -: 2843:         }
    #####: 2844:         ++m_position;
    #####: 2845:         static_cast<re_commit*>(this->append_state(syntax_element_commit, sizeof(re_commit)))->action = commit_prune;
    %%%%%: 2845-block 108
call    0 never executed
    #####: 2846:         this->m_pdata->m_disable_match_any = true;
    #####: 2847:         return true;
        -: 2848:      }
    #####: 2849:      break;
    %%%%%: 2849-block 110
    #####: 2850:   case 'S':
    #####: 2851:      if(++m_position == m_end)
    %%%%%: 2851-block 111
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2852:      {
        -: 2853:         // Rewind to start of (* sequence:
    #####: 2854:         --m_position;
    #####: 2855:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2855-block 112
    %%%%%: 2855-block 113
    %%%%%: 2855-block 114
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2856:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2856-block 116
call    0 never executed
    #####: 2857:         return false;
        -: 2858:      }
    #####: 2859:      if(match_verb("KIP"))
    %%%%%: 2859-block 118
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2860:      {
    #####: 2861:         if((m_position == m_end) || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark))
    %%%%%: 2861-block 120
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2861-block 121
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2861-block 123
    %%%%%: 2861-block 124
    %%%%%: 2861-block 125
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2862:         {
        -: 2863:            // Rewind to start of (* sequence:
    #####: 2864:            --m_position;
    #####: 2865:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2865-block 126
    %%%%%: 2865-block 127
    %%%%%: 2865-block 128
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2866:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2866-block 130
call    0 never executed
    #####: 2867:            return false;
        -: 2868:         }
    #####: 2869:         ++m_position;
    #####: 2870:         static_cast<re_commit*>(this->append_state(syntax_element_commit, sizeof(re_commit)))->action = commit_skip;
    %%%%%: 2870-block 132
call    0 never executed
    #####: 2871:         this->m_pdata->m_disable_match_any = true;
    #####: 2872:         return true;
        -: 2873:      }
    #####: 2874:      break;
    %%%%%: 2874-block 134
    #####: 2875:   case 'T':
    #####: 2876:      if(++m_position == m_end)
    %%%%%: 2876-block 135
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2877:      {
        -: 2878:         // Rewind to start of (* sequence:
    #####: 2879:         --m_position;
    #####: 2880:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2880-block 136
    %%%%%: 2880-block 137
    %%%%%: 2880-block 138
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2881:         fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2881-block 140
call    0 never executed
    #####: 2882:         return false;
        -: 2883:      }
    #####: 2884:      if(match_verb("HEN"))
    %%%%%: 2884-block 142
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2885:      {
    #####: 2886:         if((m_position == m_end) || (this->m_traits.syntax_type(*m_position) != regex_constants::syntax_close_mark))
    %%%%%: 2886-block 144
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2886-block 145
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2886-block 147
    %%%%%: 2886-block 148
    %%%%%: 2886-block 149
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2887:         {
        -: 2888:            // Rewind to start of (* sequence:
    #####: 2889:            --m_position;
    #####: 2890:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2890-block 150
    %%%%%: 2890-block 151
    %%%%%: 2890-block 152
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2891:            fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2891-block 154
call    0 never executed
    #####: 2892:            return false;
        -: 2893:         }
    #####: 2894:         ++m_position;
    #####: 2895:         this->append_state(syntax_element_then);
    %%%%%: 2895-block 156
call    0 never executed
    #####: 2896:         this->m_pdata->m_disable_match_any = true;
    #####: 2897:         return true;
        -: 2898:      }
    #####: 2899:      break;
    %%%%%: 2899-block 158
        -: 2900:   }
        -: 2901:   // Rewind to start of (* sequence:
    #####: 2902:   --m_position;
    #####: 2903:   while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 2903-block 159
    %%%%%: 2903-block 160
    %%%%%: 2903-block 161
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2904:   fail(regex_constants::error_perl_extension, m_position - m_base);
    %%%%%: 2904-block 163
call    0 never executed
    #####: 2905:   return false;
        -: 2906:}
        -: 2907:#ifdef BOOST_REGEX_MSVC
        -: 2908:#  pragma warning(pop)
        -: 2909:#endif
        -: 2910:
        -: 2911:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE14add_emacs_codeEb called 0 returned 0% blocks executed 0%
    #####: 2912:bool basic_regex_parser<charT, traits>::add_emacs_code(bool negate)
        -: 2913:{
        -: 2914:   //
        -: 2915:   // parses an emacs style \sx or \Sx construct.
        -: 2916:   //
    #####: 2917:   if(++m_position == m_end)
    %%%%%: 2917-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2918:   {
        -: 2919:      // Rewind to start of sequence:
    #####: 2920:      --m_position;
    #####: 2921:      while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_escape) --m_position;
    %%%%%: 2921-block 3
    %%%%%: 2921-block 4
    %%%%%: 2921-block 5
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2922:      fail(regex_constants::error_escape, m_position - m_base);
    %%%%%: 2922-block 7
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2923:      return false;
    %%%%%: 2923-block 8
        -: 2924:   }
    #####: 2925:   basic_char_set<charT, traits> char_set;
    %%%%%: 2925-block 9
call    0 never executed
    #####: 2926:   if(negate)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2927:      char_set.negate();
    %%%%%: 2927-block 11
call    0 never executed
        -: 2928:
        -: 2929:   static const charT s_punct[5] = { 'p', 'u', 'n', 'c', 't', };
        -: 2930:
    #####: 2931:   switch(*m_position)
    %%%%%: 2931-block 12
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 2932:   {
    #####: 2933:   case 's':
        -: 2934:   case ' ':
    #####: 2935:      char_set.add_class(this->m_mask_space);
    %%%%%: 2935-block 13
call    0 never executed
    #####: 2936:      break;
    #####: 2937:   case 'w':
    #####: 2938:      char_set.add_class(this->m_word_mask);
    %%%%%: 2938-block 14
call    0 never executed
    #####: 2939:      break;
    #####: 2940:   case '_':
    #####: 2941:      char_set.add_single(digraph<charT>(charT('$'))); 
    %%%%%: 2941-block 16
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2941-block 83
    #####: 2942:      char_set.add_single(digraph<charT>(charT('&'))); 
    %%%%%: 2942-block 18
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2942-block 84
    #####: 2943:      char_set.add_single(digraph<charT>(charT('*'))); 
    %%%%%: 2943-block 20
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2943-block 85
    #####: 2944:      char_set.add_single(digraph<charT>(charT('+'))); 
    %%%%%: 2944-block 22
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2944-block 86
    #####: 2945:      char_set.add_single(digraph<charT>(charT('-'))); 
    %%%%%: 2945-block 24
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2945-block 87
    #####: 2946:      char_set.add_single(digraph<charT>(charT('_'))); 
    %%%%%: 2946-block 26
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2946-block 88
    #####: 2947:      char_set.add_single(digraph<charT>(charT('<'))); 
    %%%%%: 2947-block 28
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2947-block 89
    #####: 2948:      char_set.add_single(digraph<charT>(charT('>'))); 
    %%%%%: 2948-block 30
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2948-block 90
    #####: 2949:      break;
    %%%%%: 2949-block 32
    #####: 2950:   case '.':
    #####: 2951:      char_set.add_class(this->m_traits.lookup_classname(s_punct, s_punct+5));
    %%%%%: 2951-block 33
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2951-block 34
call    3 never executed
    #####: 2952:      break;
    #####: 2953:   case '(':
    #####: 2954:      char_set.add_single(digraph<charT>(charT('('))); 
    %%%%%: 2954-block 36
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2954-block 91
    #####: 2955:      char_set.add_single(digraph<charT>(charT('['))); 
    %%%%%: 2955-block 38
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2955-block 92
    #####: 2956:      char_set.add_single(digraph<charT>(charT('{'))); 
    %%%%%: 2956-block 40
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2956-block 93
    #####: 2957:      break;
    %%%%%: 2957-block 42
    #####: 2958:   case ')':
    #####: 2959:      char_set.add_single(digraph<charT>(charT(')'))); 
    %%%%%: 2959-block 43
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2959-block 94
    #####: 2960:      char_set.add_single(digraph<charT>(charT(']'))); 
    %%%%%: 2960-block 45
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2960-block 95
    #####: 2961:      char_set.add_single(digraph<charT>(charT('}'))); 
    %%%%%: 2961-block 47
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2961-block 96
    #####: 2962:      break;
    %%%%%: 2962-block 49
    #####: 2963:   case '"':
    #####: 2964:      char_set.add_single(digraph<charT>(charT('"'))); 
    %%%%%: 2964-block 50
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2964-block 97
    #####: 2965:      char_set.add_single(digraph<charT>(charT('\''))); 
    %%%%%: 2965-block 52
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2965-block 98
    #####: 2966:      char_set.add_single(digraph<charT>(charT('`'))); 
    %%%%%: 2966-block 54
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2966-block 99
    #####: 2967:      break;
    %%%%%: 2967-block 56
    #####: 2968:   case '\'':
    #####: 2969:      char_set.add_single(digraph<charT>(charT('\''))); 
    %%%%%: 2969-block 57
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2969-block 100
    #####: 2970:      char_set.add_single(digraph<charT>(charT(','))); 
    %%%%%: 2970-block 59
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2970-block 101
    #####: 2971:      char_set.add_single(digraph<charT>(charT('#'))); 
    %%%%%: 2971-block 61
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2971-block 102
    #####: 2972:      break;
    %%%%%: 2972-block 63
    #####: 2973:   case '<':
    #####: 2974:      char_set.add_single(digraph<charT>(charT(';'))); 
    %%%%%: 2974-block 64
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2974-block 103
    #####: 2975:      break;
    %%%%%: 2975-block 66
    #####: 2976:   case '>':
    #####: 2977:      char_set.add_single(digraph<charT>(charT('\n'))); 
    %%%%%: 2977-block 67
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2977-block 104
    #####: 2978:      char_set.add_single(digraph<charT>(charT('\f'))); 
    %%%%%: 2978-block 69
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 2978-block 105
    #####: 2979:      break;
    %%%%%: 2979-block 71
    #####: 2980:   default:
    #####: 2981:      fail(regex_constants::error_ctype, m_position - m_base);
    %%%%%: 2981-block 72
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2982:      return false;
    %%%%%: 2982-block 73
        -: 2983:   }
    #####: 2984:   if(0 == this->append_set(char_set))
    %%%%%: 2984-block 75
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2984-block 76
branch  3 never executed (fallthrough)
branch  4 never executed
        -: 2985:   {
    #####: 2986:      fail(regex_constants::error_ctype, m_position - m_base);
    %%%%%: 2986-block 77
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2987:      return false;
    %%%%%: 2987-block 78
        -: 2988:   }
    #####: 2989:   ++m_position;
    #####: 2990:   return true;
    %%%%%: 2990-block 79
    #####: 2991:}
    %%%%%: 2991-block 80
call    0 never executed
    $$$$$: 2991-block 106
call    1 never executed
        -: 2992:
        -: 2993:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE13parse_optionsEv called 0 returned 0% blocks executed 0%
    #####: 2994:regex_constants::syntax_option_type basic_regex_parser<charT, traits>::parse_options()
        -: 2995:{
        -: 2996:   // we have a (?imsx-imsx) group, convert it into a set of flags:
    #####: 2997:   regex_constants::syntax_option_type f = this->flags();
    %%%%%: 2997-block 2
call    0 never executed
    #####: 2998:   bool breakout = false;
        -: 2999:   do
        -: 3000:   {
    #####: 3001:      switch(*m_position)
    %%%%%: 3001-block 4
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 3002:      {
    #####: 3003:      case 's':
    #####: 3004:         f |= regex_constants::mod_s;
    #####: 3005:         f &= ~regex_constants::no_mod_s;
    #####: 3006:         break;
    %%%%%: 3006-block 5
    #####: 3007:      case 'm':
    #####: 3008:         f &= ~regex_constants::no_mod_m;
    #####: 3009:         break;
    %%%%%: 3009-block 6
    #####: 3010:      case 'i':
    #####: 3011:         f |= regex_constants::icase;
    #####: 3012:         break;
    %%%%%: 3012-block 7
    #####: 3013:      case 'x':
    #####: 3014:         f |= regex_constants::mod_x;
    #####: 3015:         break;
    %%%%%: 3015-block 8
    #####: 3016:      default:
    #####: 3017:         breakout = true;
    #####: 3018:         continue;
    %%%%%: 3018-block 9
        -: 3019:      }
    #####: 3020:      if(++m_position == m_end)
    %%%%%: 3020-block 10
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 3021:      {
        -: 3022:         // Rewind to start of (? sequence:
    #####: 3023:         --m_position;
    #####: 3024:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 3024-block 11
    %%%%%: 3024-block 12
    %%%%%: 3024-block 13
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3025:         fail(regex_constants::error_paren, m_position - m_base);
    %%%%%: 3025-block 15
call    0 never executed
    #####: 3026:         return false;
        -: 3027:      }
        -: 3028:   }
    #####: 3029:   while(!breakout);
    %%%%%: 3029-block 17
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 3030:   
    #####: 3031:   breakout = false;
        -: 3032:
    #####: 3033:   if(*m_position == static_cast<charT>('-'))
    %%%%%: 3033-block 18
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 3034:   {
    #####: 3035:      if(++m_position == m_end)
    %%%%%: 3035-block 19
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 3036:      {
        -: 3037:         // Rewind to start of (? sequence:
    #####: 3038:         --m_position;
    #####: 3039:         while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 3039-block 20
    %%%%%: 3039-block 21
    %%%%%: 3039-block 22
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3040:         fail(regex_constants::error_paren, m_position - m_base);
    %%%%%: 3040-block 24
call    0 never executed
    #####: 3041:         return false;
        -: 3042:      }
        -: 3043:      do
        -: 3044:      {
    #####: 3045:         switch(*m_position)
    %%%%%: 3045-block 26
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 3046:         {
    #####: 3047:         case 's':
    #####: 3048:            f &= ~regex_constants::mod_s;
    #####: 3049:            f |= regex_constants::no_mod_s;
    #####: 3050:            break;
    %%%%%: 3050-block 27
    #####: 3051:         case 'm':
    #####: 3052:            f |= regex_constants::no_mod_m;
    #####: 3053:            break;
    %%%%%: 3053-block 28
    #####: 3054:         case 'i':
    #####: 3055:            f &= ~regex_constants::icase;
    #####: 3056:            break;
    %%%%%: 3056-block 29
    #####: 3057:         case 'x':
    #####: 3058:            f &= ~regex_constants::mod_x;
    #####: 3059:            break;
    %%%%%: 3059-block 30
    #####: 3060:         default:
    #####: 3061:            breakout = true;
    #####: 3062:            continue;
    %%%%%: 3062-block 31
        -: 3063:         }
    #####: 3064:         if(++m_position == m_end)
    %%%%%: 3064-block 32
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 3065:         {
        -: 3066:            // Rewind to start of (? sequence:
    #####: 3067:            --m_position;
    #####: 3068:            while(this->m_traits.syntax_type(*m_position) != regex_constants::syntax_open_mark) --m_position;
    %%%%%: 3068-block 33
    %%%%%: 3068-block 34
    %%%%%: 3068-block 35
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3069:            fail(regex_constants::error_paren, m_position - m_base);
    %%%%%: 3069-block 37
call    0 never executed
    #####: 3070:            return false;
        -: 3071:         }
        -: 3072:      }
    #####: 3073:      while(!breakout);
    %%%%%: 3073-block 39
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 3074:   }
    #####: 3075:   return f;
    %%%%%: 3075-block 40
        -: 3076:}
        -: 3077:
        -: 3078:template <class charT, class traits>
function _ZN5boost13re_detail_50018basic_regex_parserIcNS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE11unwind_altsEl called 1 returned 100% blocks executed 21%
        1: 3079:bool basic_regex_parser<charT, traits>::unwind_alts(std::ptrdiff_t last_paren_start)
        -: 3080:{
        -: 3081:   //
        -: 3082:   // If we didn't actually add any states after the last 
        -: 3083:   // alternative then that's an error:
        -: 3084:   //
        1: 3085:   if((this->m_alt_insert_point == static_cast<std::ptrdiff_t>(this->m_pdata->m_data.size()))
        1: 3085-block 2
call    0 returned 1
    #####: 3086:      && (!m_alt_jumps.empty()) && (m_alt_jumps.back() > last_paren_start)
    %%%%%: 3086-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3086-block 6
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
       1*: 3087:      &&
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3087-block 12
        1: 3087-block 13
        1: 3087-block 14
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -: 3088:      !(
    #####: 3089:         ((this->flags() & regbase::main_option_type) == regbase::perl_syntax_group)
    %%%%%: 3089-block 8
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3090:           &&
    #####: 3091:         ((this->flags() & regbase::no_empty_expressions) == 0)
    %%%%%: 3091-block 10
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 3092:        )
        -: 3093:      )
        -: 3094:   {
    #####: 3095:      fail(regex_constants::error_empty, this->m_position - this->m_base, "Can't terminate a sub-expression with an alternation operator |.");
    %%%%%: 3095-block 17
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3095-block 18
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3095-block 19
call    6 never executed
    $$$$$: 3095-block 46
call    7 never executed
    $$$$$: 3095-block 50
    $$$$$: 3095-block 51
call    8 never executed
    #####: 3096:      return false;
    %%%%%: 3096-block 21
        -: 3097:   }
        -: 3098:   // 
        -: 3099:   // Fix up our alternatives:
        -: 3100:   //
       1*: 3101:   while((!m_alt_jumps.empty()) && (m_alt_jumps.back() > last_paren_start))
        1: 3101-block 22
        1: 3101-block 37
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 3101-block 39
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3101-block 41
        1: 3101-block 42
        1: 3101-block 43
branch  6 taken 0
branch  7 taken 1 (fallthrough)
        -: 3102:   {
        -: 3103:      //
        -: 3104:      // fix up the jump to point to the end of the states
        -: 3105:      // that we've just added:
        -: 3106:      //
    #####: 3107:      std::ptrdiff_t jump_offset = m_alt_jumps.back();
    %%%%%: 3107-block 23
call    0 never executed
    #####: 3108:      m_alt_jumps.pop_back();
call    0 never executed
    #####: 3109:      this->m_pdata->m_data.align();
call    0 never executed
    #####: 3110:      re_jump* jmp = static_cast<re_jump*>(this->getaddress(jump_offset));
call    0 never executed
    #####: 3111:      if (jmp->type != syntax_element_jump)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 3112:      {
        -: 3113:         // Something really bad happened, this used to be an assert, 
        -: 3114:         // but we'll make it an error just in case we should ever get here.
    #####: 3115:         fail(regex_constants::error_unknown, this->m_position - this->m_base, "Internal logic failed while compiling the expression, probably you added a repeat to something non-repeatable!");
    %%%%%: 3115-block 30
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3115-block 31
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3115-block 32
call    6 never executed
    $$$$$: 3115-block 52
call    7 never executed
    $$$$$: 3115-block 56
    #####: 3116:         return false;
    %%%%%: 3116-block 34
        -: 3117:      }
    #####: 3118:      jmp->alt.i = this->m_pdata->m_data.size() - jump_offset;
    %%%%%: 3118-block 35
call    0 never executed
        -: 3119:   }
        1: 3120:   return true;
        1: 3120-block 44
        -: 3121:}
        -: 3122:
        -: 3123:#ifdef BOOST_REGEX_MSVC
        -: 3124:#pragma warning(pop)
        -: 3125:#endif
        -: 3126:
        -: 3127:} // namespace BOOST_REGEX_DETAIL_NS
        -: 3128:} // namespace boost
        -: 3129:
        -: 3130:#endif
