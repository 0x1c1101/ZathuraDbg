        -:    0:Source:/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/vendor/regex/include/boost/regex/v5/perl_matcher_common.hpp
        -:    0:Graph:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcno
        -:    0:Data:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: *
        -:    3: * Copyright (c) 2002
        -:    4: * John Maddock
        -:    5: *
        -:    6: * Use, modification and distribution are subject to the 
        -:    7: * Boost Software License, Version 1.0. (See accompanying file 
        -:    8: * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9: *
        -:   10: */
        -:   11:
        -:   12: /*
        -:   13:  *   LOCATION:    see http://www.boost.org for most recent version.
        -:   14:  *   FILE         perl_matcher_common.cpp
        -:   15:  *   VERSION      see <boost/version.hpp>
        -:   16:  *   DESCRIPTION: Definitions of perl_matcher member functions that are 
        -:   17:  *                common to both the recursive and non-recursive versions.
        -:   18:  */
        -:   19:
        -:   20:#ifndef BOOST_REGEX_V5_PERL_MATCHER_COMMON_HPP
        -:   21:#define BOOST_REGEX_V5_PERL_MATCHER_COMMON_HPP
        -:   22:
        -:   23:#ifdef BOOST_REGEX_MSVC
        -:   24:#  pragma warning(push)
        -:   25:#pragma warning(disable:4459)
        -:   26:#if BOOST_REGEX_MSVC < 1910
        -:   27:#pragma warning(disable:4800)
        -:   28:#endif
        -:   29:#endif
        -:   30:
        -:   31:namespace boost{
        -:   32:namespace BOOST_REGEX_DETAIL_NS{
        -:   33:
        -:   34:#ifdef BOOST_REGEX_MSVC
        -:   35:#  pragma warning(push)
        -:   36:#pragma warning(disable:26812)
        -:   37:#endif
        -:   38:   template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE14construct_initERKNS_11basic_regexIcSA_EENS_15regex_constants12_match_flagsE called 0 returned 0% blocks executed 0%
    #####:   39:void perl_matcher<BidiIterator, Allocator, traits>::construct_init(const basic_regex<char_type, traits>& e, match_flag_type f)
        -:   40:{ 
        -:   41:   typedef typename std::iterator_traits<BidiIterator>::iterator_category category;
        -:   42:   typedef typename basic_regex<char_type, traits>::flag_type expression_flag_type;
        -:   43:   
    #####:   44:   if(e.empty())
    %%%%%:   44-block 2
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:   45:   {
        -:   46:      // precondition failure: e is not a valid regex.
    #####:   47:      std::invalid_argument ex("Invalid regular expression object");
    %%%%%:   47-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   48:#ifndef BOOST_REGEX_STANDALONE
        -:   49:      boost::throw_exception(ex);
        -:   50:#else
    #####:   51:      throw e;
    %%%%%:   51-block 5
call    0 never executed
call    1 never executed
call    2 never executed
        -:   52:#endif
    =====:   53:   }
    $$$$$:   53-block 40
call    0 never executed
    #####:   54:   pstate = 0;
    #####:   55:   m_match_flags = f;
    #####:   56:   estimate_max_state_count(static_cast<category*>(0));
    %%%%%:   56-block 8
call    0 never executed
    #####:   57:   expression_flag_type re_f = re.flags();
call    0 never executed
    #####:   58:   icase = re_f & regex_constants::icase;
    #####:   59:   if(!(m_match_flags & (match_perl|match_posix)))
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -:   60:   {
    #####:   61:      if((re_f & (regbase::main_option_type|regbase::no_perl_ex)) == 0)
    %%%%%:   61-block 13
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   62:         m_match_flags |= match_perl;
    %%%%%:   62-block 14
call    0 never executed
    #####:   63:      else if((re_f & (regbase::main_option_type|regbase::emacs_ex)) == (regbase::basic_syntax_group|regbase::emacs_ex))
    %%%%%:   63-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   64:         m_match_flags |= match_perl;
    %%%%%:   64-block 16
call    0 never executed
    #####:   65:      else if((re_f & (regbase::main_option_type|regbase::literal)) == (regbase::literal))
    %%%%%:   65-block 17
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   66:         m_match_flags |= match_perl;
    %%%%%:   66-block 18
call    0 never executed
        -:   67:      else
    #####:   68:         m_match_flags |= match_posix;
    %%%%%:   68-block 19
call    0 never executed
        -:   69:   }
    #####:   70:   if(m_match_flags & match_posix)
    %%%%%:   70-block 20
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:   71:   {
    #####:   72:      m_temp_match.reset(new match_results<BidiIterator, Allocator>());
    %%%%%:   72-block 22
call    0 never executed
    %%%%%:   72-block 25
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   72-block 26
call    4 never executed
    $$$$$:   72-block 45
    $$$$$:   72-block 46
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$:   72-block 47
call    7 never executed
    #####:   73:      m_presult = m_temp_match.get();
    %%%%%:   73-block 28
call    0 never executed
        -:   74:   }
        -:   75:   else
    #####:   76:      m_presult = &m_result;
    %%%%%:   76-block 30
    #####:   77:   m_stack_base = 0;
    #####:   78:   m_backup_state = 0;
        -:   79:   // find the value to use for matching word boundaries:
    #####:   80:   m_word_mask = re.get_data().m_word_mask; 
    %%%%%:   80-block 31
call    0 never executed
        -:   81:   // find bitmask to use for matching '.':
    #####:   82:   match_any_mask = static_cast<unsigned char>((f & match_not_dot_newline) ? BOOST_REGEX_DETAIL_NS::test_not_newline : BOOST_REGEX_DETAIL_NS::test_newline);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:   82-block 34
    %%%%%:   82-block 35
        -:   83:   // Disable match_any if requested in the state machine:
    #####:   84:   if(e.get_data().m_disable_match_any)
    %%%%%:   84-block 36
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   85:      m_match_flags &= regex_constants::match_not_any;
    %%%%%:   85-block 38
call    0 never executed
    #####:   86:}
    %%%%%:   86-block 39
        -:   87:#ifdef BOOST_REGEX_MSVC
        -:   88:#  pragma warning(pop)
        -:   89:#endif
        -:   90:
        -:   91:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE24estimate_max_state_countEPSt26random_access_iterator_tag called 0 returned 0% blocks executed 0%
    #####:   92:void perl_matcher<BidiIterator, Allocator, traits>::estimate_max_state_count(std::random_access_iterator_tag*)
        -:   93:{
        -:   94:   //
        -:   95:   // How many states should we allow our machine to visit before giving up?
        -:   96:   // This is a heuristic: it takes the greater of O(N^2) and O(NS^2)
        -:   97:   // where N is the length of the string, and S is the number of states
        -:   98:   // in the machine.  It's tempting to up this to O(N^2S) or even O(N^2S^2)
        -:   99:   // but these take unreasonably amounts of time to bale out in pathological
        -:  100:   // cases.
        -:  101:   //
        -:  102:   // Calculate NS^2 first:
        -:  103:   //
        -:  104:   static const std::ptrdiff_t k = 100000;
    #####:  105:   std::ptrdiff_t dist = std::distance(base, last);
    %%%%%:  105-block 2
    #####:  106:   if(dist == 0)
    %%%%%:  106-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  107:      dist = 1;
    %%%%%:  107-block 9
    #####:  108:   std::ptrdiff_t states = re.size();
    %%%%%:  108-block 10
call    0 never executed
    #####:  109:   if(states == 0)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  110:      states = 1;
    %%%%%:  110-block 12
    #####:  111:   if ((std::numeric_limits<std::ptrdiff_t>::max)() / states < states)
    %%%%%:  111-block 13
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  112:   {
    #####:  113:      max_state_count = (std::min)((std::ptrdiff_t)BOOST_REGEX_MAX_STATE_COUNT, (std::numeric_limits<std::ptrdiff_t>::max)() - 2);
    %%%%%:  113-block 15
call    0 never executed
call    1 never executed
    #####:  114:      return;
        -:  115:   }
    #####:  116:   states *= states;
    #####:  117:   if((std::numeric_limits<std::ptrdiff_t>::max)() / dist < states)
    %%%%%:  117-block 18
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  118:   {
    #####:  119:      max_state_count = (std::min)((std::ptrdiff_t)BOOST_REGEX_MAX_STATE_COUNT, (std::numeric_limits<std::ptrdiff_t>::max)() - 2);
    %%%%%:  119-block 20
call    0 never executed
call    1 never executed
    #####:  120:      return;
        -:  121:   }
    #####:  122:   states *= dist;
    #####:  123:   if((std::numeric_limits<std::ptrdiff_t>::max)() - k < states)
    %%%%%:  123-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  124:   {
    #####:  125:      max_state_count = (std::min)((std::ptrdiff_t)BOOST_REGEX_MAX_STATE_COUNT, (std::numeric_limits<std::ptrdiff_t>::max)() - 2);
    %%%%%:  125-block 25
call    0 never executed
call    1 never executed
    #####:  126:      return;
        -:  127:   }
    #####:  128:   states += k;
        -:  129:
    #####:  130:   max_state_count = states;
        -:  131:
        -:  132:   //
        -:  133:   // Now calculate N^2:
        -:  134:   //
    #####:  135:   states = dist;
    #####:  136:   if((std::numeric_limits<std::ptrdiff_t>::max)() / dist < states)
    %%%%%:  136-block 28
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  137:   {
    #####:  138:      max_state_count = (std::min)((std::ptrdiff_t)BOOST_REGEX_MAX_STATE_COUNT, (std::numeric_limits<std::ptrdiff_t>::max)() - 2);
    %%%%%:  138-block 30
call    0 never executed
call    1 never executed
    #####:  139:      return;
        -:  140:   }
    #####:  141:   states *= dist;
    #####:  142:   if((std::numeric_limits<std::ptrdiff_t>::max)() - k < states)
    %%%%%:  142-block 33
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  143:   {
    #####:  144:      max_state_count = (std::min)((std::ptrdiff_t)BOOST_REGEX_MAX_STATE_COUNT, (std::numeric_limits<std::ptrdiff_t>::max)() - 2);
    %%%%%:  144-block 35
call    0 never executed
call    1 never executed
    #####:  145:      return;
        -:  146:   }
    #####:  147:   states += k;
        -:  148:   //
        -:  149:   // N^2 can be a very large number indeed, to prevent things getting out
        -:  150:   // of control, cap the max states:
        -:  151:   //
    #####:  152:   if(states > BOOST_REGEX_MAX_STATE_COUNT)
    %%%%%:  152-block 38
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  153:      states = BOOST_REGEX_MAX_STATE_COUNT;
    %%%%%:  153-block 39
        -:  154:   //
        -:  155:   // If (the possibly capped) N^2 is larger than our first estimate,
        -:  156:   // use this instead:
        -:  157:   //
    #####:  158:   if(states > max_state_count)
    %%%%%:  158-block 40
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  159:      max_state_count = states;
    %%%%%:  159-block 41
        -:  160:}
        -:  161:
        -:  162:template <class BidiIterator, class Allocator, class traits>
        -:  163:inline void perl_matcher<BidiIterator, Allocator, traits>::estimate_max_state_count(void*)
        -:  164:{
        -:  165:   // we don't know how long the sequence is:
        -:  166:   max_state_count = BOOST_REGEX_MAX_STATE_COUNT;
        -:  167:}
        -:  168:
        -:  169:template <class BidiIterator, class Allocator, class traits>
        -:  170:inline bool perl_matcher<BidiIterator, Allocator, traits>::match()
        -:  171:{
        -:  172:   return match_imp();
        -:  173:}
        -:  174:
        -:  175:template <class BidiIterator, class Allocator, class traits>
        -:  176:bool perl_matcher<BidiIterator, Allocator, traits>::match_imp()
        -:  177:{
        -:  178:   // initialise our stack if we are non-recursive:
        -:  179:   save_state_init init(&m_stack_base, &m_backup_state);
        -:  180:   used_block_count = BOOST_REGEX_MAX_BLOCKS;
        -:  181:#if !defined(BOOST_NO_EXCEPTIONS)
        -:  182:   try{
        -:  183:#endif
        -:  184:
        -:  185:   // reset our state machine:
        -:  186:   position = base;
        -:  187:   search_base = base;
        -:  188:   state_count = 0;
        -:  189:   m_match_flags |= regex_constants::match_all;
        -:  190:   m_presult->set_size((m_match_flags & match_nosubs) ? 1u : static_cast<typename results_type::size_type>(1u + re.mark_count()), search_base, last);
        -:  191:   m_presult->set_base(base);
        -:  192:   m_presult->set_named_subs(this->re.get_named_subs());
        -:  193:   if(m_match_flags & match_posix)
        -:  194:      m_result = *m_presult;
        -:  195:   verify_options(re.flags(), m_match_flags);
        -:  196:   if(0 == match_prefix())
        -:  197:      return false;
        -:  198:   return (m_result[0].second == last) && (m_result[0].first == base);
        -:  199:
        -:  200:#if !defined(BOOST_NO_EXCEPTIONS)
        -:  201:   }
        -:  202:   catch(...)
        -:  203:   {
        -:  204:      // unwind all pushed states, apart from anything else this
        -:  205:      // ensures that all the states are correctly destructed
        -:  206:      // not just the memory freed.
        -:  207:      while(unwind(true)){}
        -:  208:      throw;
        -:  209:   }
        -:  210:#endif
        -:  211:}
        -:  212:
        -:  213:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE4findEv called 0 returned 0% blocks executed 0%
    #####:  214:inline bool perl_matcher<BidiIterator, Allocator, traits>::find()
        -:  215:{
    #####:  216:   return find_imp();
    %%%%%:  216-block 2
call    0 never executed
        -:  217:}
        -:  218:
        -:  219:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE8find_impEv called 0 returned 0% blocks executed 0%
    #####:  220:bool perl_matcher<BidiIterator, Allocator, traits>::find_imp()
        -:  221:{
        -:  222:   static matcher_proc_type const s_find_vtable[7] = 
        -:  223:   {
        -:  224:      &perl_matcher<BidiIterator, Allocator, traits>::find_restart_any,
        -:  225:      &perl_matcher<BidiIterator, Allocator, traits>::find_restart_word,
        -:  226:      &perl_matcher<BidiIterator, Allocator, traits>::find_restart_line,
        -:  227:      &perl_matcher<BidiIterator, Allocator, traits>::find_restart_buf,
        -:  228:      &perl_matcher<BidiIterator, Allocator, traits>::match_prefix,
        -:  229:      &perl_matcher<BidiIterator, Allocator, traits>::find_restart_lit,
        -:  230:      &perl_matcher<BidiIterator, Allocator, traits>::find_restart_lit,
        -:  231:   };
        -:  232:
        -:  233:   // initialise our stack if we are non-recursive:
    #####:  234:   save_state_init init(&m_stack_base, &m_backup_state);
    %%%%%:  234-block 2
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  235:   used_block_count = BOOST_REGEX_MAX_BLOCKS;
        -:  236:#if !defined(BOOST_NO_EXCEPTIONS)
        -:  237:   try{
        -:  238:#endif
        -:  239:
    #####:  240:   state_count = 0;
    #####:  241:   if((m_match_flags & regex_constants::match_init) == 0)
    %%%%%:  241-block 3
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  242:   {
        -:  243:      // reset our state machine:
    #####:  244:      search_base = position = base;
    #####:  245:      pstate = re.get_first_state();
    %%%%%:  245-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  246:      m_presult->set_size((m_match_flags & match_nosubs) ? 1u : static_cast<typename results_type::size_type>(1u + re.mark_count()), base, last);
    %%%%%:  246-block 6
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  246-block 8
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  246-block 9
    %%%%%:  246-block 10
    %%%%%:  246-block 11
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####:  247:      m_presult->set_base(base);
    %%%%%:  247-block 12
call    0 never executed
    #####:  248:      m_presult->set_named_subs(this->re.get_named_subs());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  249:      m_match_flags |= regex_constants::match_init;
call    0 never executed
        -:  250:   }
        -:  251:   else
        -:  252:   {
        -:  253:      // start again:
    #####:  254:      search_base = position = m_result[0].second;
    %%%%%:  254-block 17
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  255:      // If last match was null and match_not_null was not set then increment
        -:  256:      // our start position, otherwise we go into an infinite loop:
    #####:  257:      if(((m_match_flags & match_not_null) == 0) && (m_result.length() == 0))
    %%%%%:  257-block 18
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  257-block 20
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  257-block 21
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  257-block 22
    %%%%%:  257-block 23
    %%%%%:  257-block 24
branch  8 never executed (fallthrough)
branch  9 never executed
        -:  258:      {
    #####:  259:         if(position == last)
    %%%%%:  259-block 25
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  260:            return false;
    %%%%%:  260-block 26
        -:  261:         else 
    #####:  262:            ++position;
    %%%%%:  262-block 27
        -:  263:      }
        -:  264:      // reset $` start:
    #####:  265:      m_presult->set_size((m_match_flags & match_nosubs) ? 1u : static_cast<typename results_type::size_type>(1u + re.mark_count()), search_base, last);
    %%%%%:  265-block 28
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  265-block 30
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  265-block 31
    %%%%%:  265-block 32
    %%%%%:  265-block 33
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -:  266:      //if((base != search_base) && (base == backstop))
        -:  267:      //   m_match_flags |= match_prev_avail;
        -:  268:   }
    #####:  269:   if(m_match_flags & match_posix)
    %%%%%:  269-block 34
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  270:   {
    #####:  271:      m_result.set_size(static_cast<typename results_type::size_type>(1u + re.mark_count()), base, last);
    %%%%%:  271-block 36
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  271-block 37
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:  272:      m_result.set_base(base);
    %%%%%:  272-block 38
call    0 never executed
        -:  273:   }
        -:  274:
    #####:  275:   verify_options(re.flags(), m_match_flags);
    %%%%%:  275-block 39
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  275-block 40
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  276:   // find out what kind of expression we have:
    #####:  277:   unsigned type = (m_match_flags & match_continuous) ? 
    %%%%%:  277-block 41
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  277-block 45
        -:  278:      static_cast<unsigned int>(regbase::restart_continue) 
    #####:  279:         : static_cast<unsigned int>(re.get_restart_type());
    %%%%%:  279-block 43
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  279-block 44
        -:  280:
        -:  281:   // call the appropriate search routine:
    #####:  282:   matcher_proc_type proc = s_find_vtable[type];
    #####:  283:   return (this->*proc)();
    %%%%%:  283-block 46
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  283-block 47
    %%%%%:  283-block 48
    %%%%%:  283-block 49
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  283-block 50
        -:  284:
        -:  285:#if !defined(BOOST_NO_EXCEPTIONS)
        -:  286:   }
    =====:  287:   catch(...)
    $$$$$:  287-block 55
    $$$$$:  287-block 56
call    0 never executed
    $$$$$:  287-block 61
call    1 never executed
        -:  288:   {
        -:  289:      // unwind all pushed states, apart from anything else this
        -:  290:      // ensures that all the states are correctly destructed
        -:  291:      // not just the memory freed.
    =====:  292:      while(unwind(true)){}
    $$$$$:  292-block 58
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  292-block 59
branch  3 never executed
branch  4 never executed (fallthrough)
    =====:  293:      throw;
    $$$$$:  293-block 60
call    0 never executed
        -:  294:   }
        -:  295:#endif
    #####:  296:}
    %%%%%:  296-block 51
call    0 never executed
    $$$$$:  296-block 63
call    1 never executed
        -:  297:
        -:  298:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE12match_prefixEv called 0 returned 0% blocks executed 0%
    #####:  299:bool perl_matcher<BidiIterator, Allocator, traits>::match_prefix()
        -:  300:{
    #####:  301:   m_has_partial_match = false;
    #####:  302:   m_has_found_match = false;
    #####:  303:   pstate = re.get_first_state();
    %%%%%:  303-block 2
call    0 never executed
    #####:  304:   m_presult->set_first(position);
call    0 never executed
    #####:  305:   restart = position;
    #####:  306:   match_all_states();
call    0 never executed
    #####:  307:   if(!m_has_found_match && m_has_partial_match && (m_match_flags & match_partial))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  307-block 6
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  307-block 7
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  307-block 9
    %%%%%:  307-block 10
    %%%%%:  307-block 11
branch  7 never executed (fallthrough)
branch  8 never executed
        -:  308:   {
    #####:  309:      m_has_found_match = true;
    #####:  310:      m_presult->set_second(last, 0, false);
    %%%%%:  310-block 12
call    0 never executed
    #####:  311:      position = last;
    #####:  312:      if((m_match_flags & match_posix) == match_posix)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  313:      {
    #####:  314:         m_result.maybe_assign(*m_presult);
    %%%%%:  314-block 15
call    0 never executed
        -:  315:      }
        -:  316:   }
        -:  317:#ifdef BOOST_REGEX_MATCH_EXTRA
        -:  318:   if(m_has_found_match && (match_extra & m_match_flags))
        -:  319:   {
        -:  320:      //
        -:  321:      // we have a match, reverse the capture information:
        -:  322:      //
        -:  323:      for(unsigned i = 0; i < m_presult->size(); ++i)
        -:  324:      {
        -:  325:         typename sub_match<BidiIterator>::capture_sequence_type & seq = ((*m_presult)[i]).get_captures();
        -:  326:         std::reverse(seq.begin(), seq.end());
        -:  327:      }
        -:  328:   }
        -:  329:#endif
    #####:  330:   if(!m_has_found_match)
    %%%%%:  330-block 16
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  331:      position = restart; // reset search postion
    %%%%%:  331-block 17
    #####:  332:   return m_has_found_match;
    %%%%%:  332-block 18
        -:  333:}
        -:  334:
        -:  335:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE13match_literalEv called 0 returned 0% blocks executed 0%
    #####:  336:bool perl_matcher<BidiIterator, Allocator, traits>::match_literal()
        -:  337:{
    #####:  338:   unsigned int len = static_cast<const re_literal*>(pstate)->length;
    #####:  339:   const char_type* what = reinterpret_cast<const char_type*>(static_cast<const re_literal*>(pstate) + 1);
        -:  340:   //
        -:  341:   // compare string with what we stored in
        -:  342:   // our records:
    #####:  343:   for(unsigned int i = 0; i < len; ++i, ++position)
    %%%%%:  343-block 2
    %%%%%:  343-block 10
    %%%%%:  343-block 11
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  344:   {
    #####:  345:      if((position == last) || (traits_inst.translate(*position, icase) != what[i]))
    %%%%%:  345-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  345-block 4
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  345-block 6
    %%%%%:  345-block 7
    %%%%%:  345-block 8
branch  5 never executed (fallthrough)
branch  6 never executed
    #####:  346:         return false;
    %%%%%:  346-block 9
        -:  347:   }
    #####:  348:   pstate = pstate->next.p;
    #####:  349:   return true;
    %%%%%:  349-block 12
        -:  350:}
        -:  351:
        -:  352:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16match_start_lineEv called 0 returned 0% blocks executed 0%
    #####:  353:bool perl_matcher<BidiIterator, Allocator, traits>::match_start_line()
        -:  354:{
    #####:  355:   if(position == backstop)
    %%%%%:  355-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  356:   {
    #####:  357:      if((m_match_flags & match_prev_avail) == 0)
    %%%%%:  357-block 3
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  358:      {
    #####:  359:         if((m_match_flags & match_not_bol) == 0)
    %%%%%:  359-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  360:         {
    #####:  361:            pstate = pstate->next.p;
    #####:  362:            return true;
    %%%%%:  362-block 7
        -:  363:         }
    #####:  364:         return false;
    %%%%%:  364-block 8
        -:  365:      }
        -:  366:   }
    #####:  367:   else if(m_match_flags & match_single_line)
    %%%%%:  367-block 9
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  368:      return false;
    %%%%%:  368-block 11
        -:  369:
        -:  370:   // check the previous value character:
    #####:  371:   BidiIterator t(position);
    #####:  372:   --t;
    #####:  373:   if(position != last)
    %%%%%:  373-block 12
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  374:   {
    #####:  375:      if(is_separator(*t) && !((*t == static_cast<char_type>('\r')) && (*position == static_cast<char_type>('\n'))) )
    %%%%%:  375-block 13
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  375-block 15
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  375-block 16
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  375-block 17
    %%%%%:  375-block 18
    %%%%%:  375-block 19
branch  7 never executed (fallthrough)
branch  8 never executed
        -:  376:      {
    #####:  377:         pstate = pstate->next.p;
    #####:  378:         return true;
    %%%%%:  378-block 20
        -:  379:      }
        -:  380:   }
    #####:  381:   else if(is_separator(*t))
    %%%%%:  381-block 21
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  382:   {
    #####:  383:      pstate = pstate->next.p;
    #####:  384:      return true;
    %%%%%:  384-block 23
        -:  385:   }
    #####:  386:   return false;
    %%%%%:  386-block 24
        -:  387:}
        -:  388:
        -:  389:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE14match_end_lineEv called 0 returned 0% blocks executed 0%
    #####:  390:bool perl_matcher<BidiIterator, Allocator, traits>::match_end_line()
        -:  391:{
    #####:  392:   if(position != last)
    %%%%%:  392-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  393:   {
    #####:  394:      if(m_match_flags & match_single_line)
    %%%%%:  394-block 3
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  395:         return false;
    %%%%%:  395-block 5
        -:  396:      // we're not yet at the end so *first is always valid:
    #####:  397:      if(is_separator(*position))
    %%%%%:  397-block 6
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  398:      {
    #####:  399:         if((position != backstop) || (m_match_flags & match_prev_avail))
    %%%%%:  399-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  399-block 9
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  399-block 11
    %%%%%:  399-block 12
    %%%%%:  399-block 13
branch  5 never executed (fallthrough)
branch  6 never executed
        -:  400:         {
        -:  401:            // check that we're not in the middle of \r\n sequence
    #####:  402:            BidiIterator t(position);
    #####:  403:            --t;
    #####:  404:            if((*t == static_cast<char_type>('\r')) && (*position == static_cast<char_type>('\n')))
    %%%%%:  404-block 14
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  404-block 15
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  405:            {
    #####:  406:               return false;
    %%%%%:  406-block 16
        -:  407:            }
        -:  408:         }
    #####:  409:         pstate = pstate->next.p;
    #####:  410:         return true;
    %%%%%:  410-block 17
        -:  411:      }
        -:  412:   }
    #####:  413:   else if((m_match_flags & match_not_eol) == 0)
    %%%%%:  413-block 18
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  414:   {
    #####:  415:      pstate = pstate->next.p;
    #####:  416:      return true;
    %%%%%:  416-block 20
        -:  417:   }
    #####:  418:   return false;
    %%%%%:  418-block 21
        -:  419:}
        -:  420:
        -:  421:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE10match_wildEv called 0 returned 0% blocks executed 0%
    #####:  422:bool perl_matcher<BidiIterator, Allocator, traits>::match_wild()
        -:  423:{
    #####:  424:   if(position == last) 
    %%%%%:  424-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  425:      return false;
    %%%%%:  425-block 3
    #####:  426:   if(is_separator(*position) && ((match_any_mask & static_cast<const re_dot*>(pstate)->mask) == 0))
    %%%%%:  426-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  426-block 6
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  426-block 7
    %%%%%:  426-block 8
    %%%%%:  426-block 9
branch  5 never executed (fallthrough)
branch  6 never executed
    #####:  427:      return false;
    %%%%%:  427-block 10
    #####:  428:   if((*position == char_type(0)) && (m_match_flags & match_not_dot_null))
    %%%%%:  428-block 11
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  428-block 12
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  428-block 14
    %%%%%:  428-block 15
    %%%%%:  428-block 16
branch  5 never executed (fallthrough)
branch  6 never executed
    #####:  429:      return false;
    %%%%%:  429-block 17
    #####:  430:   pstate = pstate->next.p;
    #####:  431:   ++position;
    #####:  432:   return true;
    %%%%%:  432-block 18
        -:  433:}
        -:  434:
        -:  435:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE19match_word_boundaryEv called 0 returned 0% blocks executed 0%
    #####:  436:bool perl_matcher<BidiIterator, Allocator, traits>::match_word_boundary()
        -:  437:{
        -:  438:   bool b; // indcates whether next character is a word character
    #####:  439:   if(position != last)
    %%%%%:  439-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  440:   {
        -:  441:      // prev and this character must be opposites:
    #####:  442:      b = traits_inst.isctype(*position, m_word_mask);
    %%%%%:  442-block 3
call    0 never executed
        -:  443:   }
        -:  444:   else
        -:  445:   {
    #####:  446:      if (m_match_flags & match_not_eow)
    %%%%%:  446-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  447:         return false;
    %%%%%:  447-block 7
    #####:  448:      b = false;
    %%%%%:  448-block 8
        -:  449:   }
    #####:  450:   if((position == backstop) && ((m_match_flags & match_prev_avail) == 0))
    %%%%%:  450-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  450-block 10
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  450-block 12
    %%%%%:  450-block 13
    %%%%%:  450-block 14
branch  5 never executed (fallthrough)
branch  6 never executed
        -:  451:   {
    #####:  452:      if(m_match_flags & match_not_bow)
    %%%%%:  452-block 15
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  453:         return false;
    %%%%%:  453-block 17
        -:  454:      else
    #####:  455:         b ^= false;
    %%%%%:  455-block 18
        -:  456:   }
        -:  457:   else
        -:  458:   {
    #####:  459:      --position;
    #####:  460:      b ^= traits_inst.isctype(*position, m_word_mask);
    %%%%%:  460-block 19
call    0 never executed
    #####:  461:      ++position;
        -:  462:   }
    #####:  463:   if(b)
    %%%%%:  463-block 21
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  464:   {
    #####:  465:      pstate = pstate->next.p;
    #####:  466:      return true;
    %%%%%:  466-block 22
        -:  467:   }
    #####:  468:   return false; // no match if we get to here...
    %%%%%:  468-block 23
        -:  469:}
        -:  470:
        -:  471:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE17match_within_wordEv called 0 returned 0% blocks executed 0%
    #####:  472:bool perl_matcher<BidiIterator, Allocator, traits>::match_within_word()
        -:  473:{
    #####:  474:   bool b = !match_word_boundary();
    %%%%%:  474-block 2
call    0 never executed
    #####:  475:   if(b)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  476:      pstate = pstate->next.p;
    %%%%%:  476-block 4
    #####:  477:   return b;
    %%%%%:  477-block 5
        -:  478:   /*
        -:  479:   if(position == last)
        -:  480:      return false;
        -:  481:   // both prev and this character must be m_word_mask:
        -:  482:   bool prev = traits_inst.isctype(*position, m_word_mask);
        -:  483:   {
        -:  484:      bool b;
        -:  485:      if((position == backstop) && ((m_match_flags & match_prev_avail) == 0)) 
        -:  486:         return false;
        -:  487:      else
        -:  488:      {
        -:  489:         --position;
        -:  490:         b = traits_inst.isctype(*position, m_word_mask);
        -:  491:         ++position;
        -:  492:      }
        -:  493:      if(b == prev)
        -:  494:      {
        -:  495:         pstate = pstate->next.p;
        -:  496:         return true;
        -:  497:      }
        -:  498:   }
        -:  499:   return false;
        -:  500:   */
        -:  501:}
        -:  502:
        -:  503:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16match_word_startEv called 0 returned 0% blocks executed 0%
    #####:  504:bool perl_matcher<BidiIterator, Allocator, traits>::match_word_start()
        -:  505:{
    #####:  506:   if(position == last)
    %%%%%:  506-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  507:      return false; // can't be starting a word if we're already at the end of input
    %%%%%:  507-block 3
    #####:  508:   if(!traits_inst.isctype(*position, m_word_mask))
    %%%%%:  508-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  509:      return false; // next character isn't a word character
    %%%%%:  509-block 6
    #####:  510:   if((position == backstop) && ((m_match_flags & match_prev_avail) == 0))
    %%%%%:  510-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  510-block 8
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  510-block 10
    %%%%%:  510-block 11
    %%%%%:  510-block 12
branch  5 never executed (fallthrough)
branch  6 never executed
        -:  511:   {
    #####:  512:      if(m_match_flags & match_not_bow)
    %%%%%:  512-block 13
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  513:         return false; // no previous input
    %%%%%:  513-block 15
        -:  514:   }
        -:  515:   else
        -:  516:   {
        -:  517:      // otherwise inside buffer:
    #####:  518:      BidiIterator t(position);
    #####:  519:      --t;
    #####:  520:      if(traits_inst.isctype(*t, m_word_mask))
    %%%%%:  520-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  521:         return false; // previous character not non-word
    %%%%%:  521-block 18
        -:  522:   }
        -:  523:   // OK we have a match:
    #####:  524:   pstate = pstate->next.p;
    #####:  525:   return true;
    %%%%%:  525-block 19
        -:  526:}
        -:  527:
        -:  528:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE14match_word_endEv called 0 returned 0% blocks executed 0%
    #####:  529:bool perl_matcher<BidiIterator, Allocator, traits>::match_word_end()
        -:  530:{
    #####:  531:   if((position == backstop) && ((m_match_flags & match_prev_avail) == 0))
    %%%%%:  531-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  531-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  531-block 5
    %%%%%:  531-block 6
    %%%%%:  531-block 7
branch  5 never executed (fallthrough)
branch  6 never executed
    #####:  532:      return false;  // start of buffer can't be end of word
    %%%%%:  532-block 8
    #####:  533:   BidiIterator t(position);
    #####:  534:   --t;
    #####:  535:   if(traits_inst.isctype(*t, m_word_mask) == false)
    %%%%%:  535-block 9
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  536:      return false;  // previous character wasn't a word character
    %%%%%:  536-block 11
        -:  537:
    #####:  538:   if(position == last)
    %%%%%:  538-block 12
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  539:   {
    #####:  540:      if(m_match_flags & match_not_eow)
    %%%%%:  540-block 13
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  541:         return false; // end of buffer but not end of word
    %%%%%:  541-block 15
        -:  542:   }
        -:  543:   else
        -:  544:   {
        -:  545:      // otherwise inside buffer:
    #####:  546:      if(traits_inst.isctype(*position, m_word_mask))
    %%%%%:  546-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  547:         return false; // next character is a word character
    %%%%%:  547-block 18
        -:  548:   }
    #####:  549:   pstate = pstate->next.p;
    #####:  550:   return true;      // if we fall through to here then we've succeeded
    %%%%%:  550-block 19
        -:  551:}
        -:  552:
        -:  553:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE18match_buffer_startEv called 0 returned 0% blocks executed 0%
    #####:  554:bool perl_matcher<BidiIterator, Allocator, traits>::match_buffer_start()
        -:  555:{
    #####:  556:   if((position != backstop) || (m_match_flags & match_not_bob))
    %%%%%:  556-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  556-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  556-block 5
    %%%%%:  556-block 6
    %%%%%:  556-block 7
branch  5 never executed (fallthrough)
branch  6 never executed
    #####:  557:      return false;
    %%%%%:  557-block 8
        -:  558:   // OK match:
    #####:  559:   pstate = pstate->next.p;
    #####:  560:   return true;
    %%%%%:  560-block 9
        -:  561:}
        -:  562:
        -:  563:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16match_buffer_endEv called 0 returned 0% blocks executed 0%
    #####:  564:bool perl_matcher<BidiIterator, Allocator, traits>::match_buffer_end()
        -:  565:{
    #####:  566:   if((position != last) || (m_match_flags & match_not_eob))
    %%%%%:  566-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  566-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  566-block 5
    %%%%%:  566-block 6
    %%%%%:  566-block 7
branch  5 never executed (fallthrough)
branch  6 never executed
    #####:  567:      return false;
    %%%%%:  567-block 8
        -:  568:   // OK match:
    #####:  569:   pstate = pstate->next.p;
    #####:  570:   return true;
    %%%%%:  570-block 9
        -:  571:}
        -:  572:
        -:  573:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE13match_backrefEv called 0 returned 0% blocks executed 0%
    #####:  574:bool perl_matcher<BidiIterator, Allocator, traits>::match_backref()
        -:  575:{
        -:  576:   //
        -:  577:   // Compare with what we previously matched.
        -:  578:   // Note that this succeeds if the backref did not partisipate
        -:  579:   // in the match, this is in line with ECMAScript, but not Perl
        -:  580:   // or PCRE.
        -:  581:   //
    #####:  582:   int index = static_cast<const re_brace*>(pstate)->index;
    #####:  583:   if(index >= hash_value_mask)
    %%%%%:  583-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  584:   {
    #####:  585:      named_subexpressions::range_type r = re.get_data().equal_range(index);
    %%%%%:  585-block 3
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  585-block 4
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:  586:      BOOST_REGEX_ASSERT(r.first != r.second);
    %%%%%:  586-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  586-block 7
call    3 never executed
        -:  587:      do
        -:  588:      {
    #####:  589:         index = r.first->index;
    %%%%%:  589-block 8
call    0 never executed
    #####:  590:         ++r.first;
call    0 never executed
    #####:  591:      }while((r.first != r.second) && ((*m_presult)[index].matched != true));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  591-block 12
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  591-block 13
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  591-block 14
    %%%%%:  591-block 15
    %%%%%:  591-block 16
branch  8 never executed
branch  9 never executed (fallthrough)
        -:  592:   }
        -:  593:
    #####:  594:   if((m_match_flags & match_perl) && !(*m_presult)[index].matched)
    %%%%%:  594-block 18
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  594-block 20
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  594-block 22
    %%%%%:  594-block 23
    %%%%%:  594-block 24
branch  6 never executed (fallthrough)
branch  7 never executed
    #####:  595:      return false;
    %%%%%:  595-block 25
        -:  596:
    #####:  597:   BidiIterator i = (*m_presult)[index].first;
    %%%%%:  597-block 26
call    0 never executed
    #####:  598:   BidiIterator j = (*m_presult)[index].second;
call    0 never executed
    #####:  599:   while(i != j)
    %%%%%:  599-block 38
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  600:   {
    #####:  601:      if((position == last) || (traits_inst.translate(*position, icase) != traits_inst.translate(*i, icase)))
    %%%%%:  601-block 29
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  601-block 30
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  601-block 33
    %%%%%:  601-block 34
    %%%%%:  601-block 35
branch  6 never executed (fallthrough)
branch  7 never executed
    #####:  602:         return false;
    %%%%%:  602-block 36
    #####:  603:      ++i;
    #####:  604:      ++position;
    %%%%%:  604-block 37
        -:  605:   }
    #####:  606:   pstate = pstate->next.p;
    #####:  607:   return true;
    %%%%%:  607-block 39
        -:  608:}
        -:  609:
        -:  610:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE14match_long_setEv called 0 returned 0% blocks executed 0%
    #####:  611:bool perl_matcher<BidiIterator, Allocator, traits>::match_long_set()
        -:  612:{
        -:  613:   typedef typename traits::char_class_type char_class_type;
        -:  614:   // let the traits class do the work:
    #####:  615:   if(position == last)
    %%%%%:  615-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  616:      return false;
    %%%%%:  616-block 3
    #####:  617:   BidiIterator t = re_is_set_member(position, last, static_cast<const re_set_long<char_class_type>*>(pstate), re.get_data(), icase);
    %%%%%:  617-block 4
call    0 never executed
call    1 never executed
    #####:  618:   if(t != position)
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  619:   {
    #####:  620:      pstate = pstate->next.p;
    #####:  621:      position = t;
    #####:  622:      return true;
    %%%%%:  622-block 7
        -:  623:   }
    #####:  624:   return false;
    %%%%%:  624-block 8
        -:  625:}
        -:  626:
        -:  627:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_setEv called 0 returned 0% blocks executed 0%
    #####:  628:bool perl_matcher<BidiIterator, Allocator, traits>::match_set()
        -:  629:{
    #####:  630:   if(position == last)
    %%%%%:  630-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  631:      return false;
    %%%%%:  631-block 3
    #####:  632:   if(static_cast<const re_set*>(pstate)->_map[static_cast<unsigned char>(traits_inst.translate(*position, icase))])
    %%%%%:  632-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  633:   {
    #####:  634:      pstate = pstate->next.p;
    #####:  635:      ++position;
    #####:  636:      return true;
    %%%%%:  636-block 6
        -:  637:   }
    #####:  638:   return false;
    %%%%%:  638-block 7
        -:  639:}
        -:  640:
        -:  641:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE10match_jumpEv called 0 returned 0% blocks executed 0%
    #####:  642:bool perl_matcher<BidiIterator, Allocator, traits>::match_jump()
        -:  643:{
    #####:  644:   pstate = static_cast<const re_jump*>(pstate)->alt.p;
    #####:  645:   return true;
    %%%%%:  645-block 2
        -:  646:}
        -:  647:
        -:  648:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE15match_combiningEv called 0 returned 0% blocks executed 0%
    #####:  649:bool perl_matcher<BidiIterator, Allocator, traits>::match_combining()
        -:  650:{
    #####:  651:   if(position == last)
    %%%%%:  651-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  652:      return false;
    %%%%%:  652-block 3
    #####:  653:   if(is_combining(traits_inst.translate(*position, icase)))
    %%%%%:  653-block 4
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  654:      return false;
    %%%%%:  654-block 7
    #####:  655:   ++position;
    #####:  656:   while((position != last) && is_combining(traits_inst.translate(*position, icase)))
    %%%%%:  656-block 8
    %%%%%:  656-block 10
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  656-block 11
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  656-block 14
    %%%%%:  656-block 15
    %%%%%:  656-block 16
branch  6 never executed
branch  7 never executed (fallthrough)
    #####:  657:      ++position;
    %%%%%:  657-block 9
    #####:  658:   pstate = pstate->next.p;
    #####:  659:   return true;
    %%%%%:  659-block 17
        -:  660:}
        -:  661:
        -:  662:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE21match_soft_buffer_endEv called 0 returned 0% blocks executed 0%
    #####:  663:bool perl_matcher<BidiIterator, Allocator, traits>::match_soft_buffer_end()
        -:  664:{
    #####:  665:   if(m_match_flags & match_not_eob)
    %%%%%:  665-block 2
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  666:      return false;
    %%%%%:  666-block 4
    #####:  667:   BidiIterator p(position);
    #####:  668:   while((p != last) && is_separator(traits_inst.translate(*p, icase)))++p;
    %%%%%:  668-block 5
    %%%%%:  668-block 6
    %%%%%:  668-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  668-block 8
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  668-block 11
    %%%%%:  668-block 12
    %%%%%:  668-block 13
branch  6 never executed
branch  7 never executed (fallthrough)
    #####:  669:   if(p != last)
    %%%%%:  669-block 14
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  670:      return false;
    %%%%%:  670-block 15
    #####:  671:   pstate = pstate->next.p;
    #####:  672:   return true;
    %%%%%:  672-block 16
        -:  673:}
        -:  674:
        -:  675:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE22match_restart_continueEv called 0 returned 0% blocks executed 0%
    #####:  676:bool perl_matcher<BidiIterator, Allocator, traits>::match_restart_continue()
        -:  677:{
    #####:  678:   if(position == search_base)
    %%%%%:  678-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  679:   {
    #####:  680:      pstate = pstate->next.p;
    #####:  681:      return true;
    %%%%%:  681-block 3
        -:  682:   }
    #####:  683:   return false;
    %%%%%:  683-block 4
        -:  684:}
        -:  685:
        -:  686:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE14match_backstepEv called 0 returned 0% blocks executed 0%
    #####:  687:bool perl_matcher<BidiIterator, Allocator, traits>::match_backstep()
    %%%%%:  687-block 2
        -:  688:{
        -:  689:#ifdef BOOST_REGEX_MSVC
        -:  690:#pragma warning(push)
        -:  691:#pragma warning(disable:4127)
        -:  692:#endif
        -:  693:   if( ::boost::is_random_access_iterator<BidiIterator>::value)
        -:  694:   {
    #####:  695:      std::ptrdiff_t maxlen = std::distance(backstop, position);
    %%%%%:  695-block 3
    #####:  696:      if(maxlen < static_cast<const re_brace*>(pstate)->index)
    %%%%%:  696-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  697:         return false;
    %%%%%:  697-block 10
    #####:  698:      std::advance(position, -static_cast<const re_brace*>(pstate)->index);
    %%%%%:  698-block 11
        -:  699:   }
        -:  700:   else
        -:  701:   {
        -:  702:      int c = static_cast<const re_brace*>(pstate)->index;
        -:  703:      while(c--)
        -:  704:      {
        -:  705:         if(position == backstop)
        -:  706:            return false;
        -:  707:         --position;
        -:  708:      }
        -:  709:   }
    #####:  710:   pstate = pstate->next.p;
    #####:  711:   return true;
    %%%%%:  711-block 16
        -:  712:#ifdef BOOST_REGEX_MSVC
        -:  713:#pragma warning(pop)
        -:  714:#endif
        -:  715:}
        -:  716:
        -:  717:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE20match_assert_backrefEv called 0 returned 0% blocks executed 0%
    #####:  718:inline bool perl_matcher<BidiIterator, Allocator, traits>::match_assert_backref()
        -:  719:{
        -:  720:   // return true if marked sub-expression N has been matched:
    #####:  721:   int index = static_cast<const re_brace*>(pstate)->index;
    #####:  722:   bool result = false;
    #####:  723:   if(index == 9999)
    %%%%%:  723-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  724:   {
        -:  725:      // Magic value for a (DEFINE) block:
    #####:  726:      return false;
    %%%%%:  726-block 3
        -:  727:   }
    #####:  728:   else if(index > 0)
    %%%%%:  728-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  729:   {
        -:  730:      // Have we matched subexpression "index"?
        -:  731:      // Check if index is a hash value:
    #####:  732:      if(index >= hash_value_mask)
    %%%%%:  732-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  733:      {
    #####:  734:         named_subexpressions::range_type r = re.get_data().equal_range(index);
    %%%%%:  734-block 6
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  734-block 7
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:  735:         while(r.first != r.second)
    %%%%%:  735-block 8
    %%%%%:  735-block 14
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:  736:         {
    #####:  737:            if((*m_presult)[r.first->index].matched)
    %%%%%:  737-block 9
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  737-block 11
branch  4 never executed (fallthrough)
branch  5 never executed
        -:  738:            {
    #####:  739:               result = true;
    #####:  740:               break;
    %%%%%:  740-block 12
        -:  741:            }
    #####:  742:            ++r.first;
    %%%%%:  742-block 13
call    0 never executed
        -:  743:         }
        -:  744:      }
        -:  745:      else
        -:  746:      {
    #####:  747:         result = (*m_presult)[index].matched;
    %%%%%:  747-block 17
call    0 never executed
        -:  748:      }
    #####:  749:      pstate = pstate->next.p;
    %%%%%:  749-block 19
        -:  750:   }
        -:  751:   else
        -:  752:   {
        -:  753:      // Have we recursed into subexpression "index"?
        -:  754:      // If index == 0 then check for any recursion at all, otherwise for recursion to -index-1.
    #####:  755:      int idx = -(index+1);
    #####:  756:      if(idx >= hash_value_mask)
    %%%%%:  756-block 20
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  757:      {
    #####:  758:         named_subexpressions::range_type r = re.get_data().equal_range(idx);
    %%%%%:  758-block 21
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  758-block 22
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:  759:         int stack_index = recursion_stack.empty() ? -1 : recursion_stack.back().idx;
    %%%%%:  759-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  759-block 25
    %%%%%:  759-block 26
call    3 never executed
    #####:  760:         while(r.first != r.second)
    %%%%%:  760-block 28
    %%%%%:  760-block 33
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:  761:         {
    #####:  762:            result |= (stack_index == r.first->index);
    %%%%%:  762-block 29
call    0 never executed
    #####:  763:            if(result)break;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  763-block 31
    #####:  764:            ++r.first;
    %%%%%:  764-block 32
call    0 never executed
        -:  765:         }
        -:  766:      }
        -:  767:      else
        -:  768:      {
    #####:  769:         result = !recursion_stack.empty() && ((recursion_stack.back().idx == idx) || (index == 0));
    %%%%%:  769-block 36
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  769-block 38
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  769-block 40
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  769-block 41
    %%%%%:  769-block 42
    %%%%%:  769-block 43
        -:  770:      }
    #####:  771:      pstate = pstate->next.p;
    %%%%%:  771-block 44
        -:  772:   }
    #####:  773:   return result;
    %%%%%:  773-block 45
        -:  774:}
        -:  775:
        -:  776:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE10match_failEv called 0 returned 0% blocks executed 0%
    #####:  777:bool perl_matcher<BidiIterator, Allocator, traits>::match_fail()
        -:  778:{
        -:  779:   // Just force a backtrack:
    #####:  780:   return false;
    %%%%%:  780-block 2
        -:  781:}
        -:  782:
        -:  783:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE12match_acceptEv called 0 returned 0% blocks executed 0%
    #####:  784:bool perl_matcher<BidiIterator, Allocator, traits>::match_accept()
        -:  785:{
    #####:  786:   if(!recursion_stack.empty())
    %%%%%:  786-block 2
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  787:   {
    #####:  788:      return skip_until_paren(recursion_stack.back().idx);
    %%%%%:  788-block 4
call    0 never executed
call    1 never executed
        -:  789:   }
        -:  790:   else
        -:  791:   {
    #####:  792:      return skip_until_paren(INT_MAX);
    %%%%%:  792-block 7
call    0 never executed
        -:  793:   }
        -:  794:}
        -:  795:
        -:  796:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16find_restart_anyEv called 0 returned 0% blocks executed 0%
    #####:  797:bool perl_matcher<BidiIterator, Allocator, traits>::find_restart_any()
        -:  798:{
        -:  799:#ifdef BOOST_REGEX_MSVC
        -:  800:#pragma warning(push)
        -:  801:#pragma warning(disable:4127)
        -:  802:#endif
    #####:  803:   const unsigned char* _map = re.get_map();
    %%%%%:  803-block 2
call    0 never executed
        -:  804:   while(true)
        -:  805:   {
        -:  806:      // skip everything we can't match:
    #####:  807:      while((position != last) && !can_start(*position, _map, (unsigned char)mask_any) )
    %%%%%:  807-block 4
    %%%%%:  807-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  807-block 7
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  807-block 9
    %%%%%:  807-block 10
    %%%%%:  807-block 11
branch  5 never executed
branch  6 never executed (fallthrough)
    #####:  808:         ++position;
    %%%%%:  808-block 5
    #####:  809:      if(position == last)
    %%%%%:  809-block 12
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  810:      {
        -:  811:         // run out of characters, try a null match if possible:
    #####:  812:         if(re.can_be_null())
    %%%%%:  812-block 13
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  813:            return match_prefix();
    %%%%%:  813-block 15
call    0 never executed
    #####:  814:         break;
    %%%%%:  814-block 17
        -:  815:      }
        -:  816:      // now try and obtain a match:
    #####:  817:      if(match_prefix())
    %%%%%:  817-block 18
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  818:         return true;
    %%%%%:  818-block 20
    #####:  819:      if(position == last)
    %%%%%:  819-block 21
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  820:         return false;
    %%%%%:  820-block 22
    #####:  821:      ++position;
    %%%%%:  821-block 23
        -:  822:   }
    #####:  823:   return false;
    %%%%%:  823-block 24
        -:  824:#ifdef BOOST_REGEX_MSVC
        -:  825:#pragma warning(pop)
        -:  826:#endif
        -:  827:}
        -:  828:
        -:  829:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE17find_restart_wordEv called 0 returned 0% blocks executed 0%
    #####:  830:bool perl_matcher<BidiIterator, Allocator, traits>::find_restart_word()
        -:  831:{
        -:  832:#ifdef BOOST_REGEX_MSVC
        -:  833:#pragma warning(push)
        -:  834:#pragma warning(disable:4127)
        -:  835:#endif
        -:  836:   // do search optimised for word starts:
    #####:  837:   const unsigned char* _map = re.get_map();
    %%%%%:  837-block 2
call    0 never executed
    #####:  838:   if((m_match_flags & match_prev_avail) || (position != base))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  838-block 5
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  838-block 6
    %%%%%:  838-block 7
    %%%%%:  838-block 8
branch  5 never executed (fallthrough)
branch  6 never executed
    #####:  839:      --position;
    %%%%%:  839-block 9
    #####:  840:   else if(match_prefix())
    %%%%%:  840-block 10
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  841:      return true;
    %%%%%:  841-block 12
        -:  842:   do
        -:  843:   {
    #####:  844:      while((position != last) && traits_inst.isctype(*position, m_word_mask))
    %%%%%:  844-block 13
    %%%%%:  844-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  844-block 16
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  844-block 18
    %%%%%:  844-block 19
    %%%%%:  844-block 20
branch  5 never executed
branch  6 never executed (fallthrough)
    %%%%%:  844-block 38
    #####:  845:         ++position;
    %%%%%:  845-block 14
    #####:  846:      while((position != last) && !traits_inst.isctype(*position, m_word_mask))
    %%%%%:  846-block 21
    %%%%%:  846-block 23
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  846-block 24
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  846-block 26
    %%%%%:  846-block 27
    %%%%%:  846-block 28
branch  5 never executed
branch  6 never executed (fallthrough)
    #####:  847:         ++position;
    %%%%%:  847-block 22
    #####:  848:      if(position == last)
    %%%%%:  848-block 29
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  849:         break;
    %%%%%:  849-block 30
        -:  850:
    #####:  851:      if(can_start(*position, _map, (unsigned char)mask_any) )
    %%%%%:  851-block 31
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  852:      {
    #####:  853:         if(match_prefix())
    %%%%%:  853-block 33
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  854:            return true;
    %%%%%:  854-block 35
        -:  855:      }
    #####:  856:      if(position == last)
    %%%%%:  856-block 36
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  857:         break;
    %%%%%:  857-block 37
        -:  858:   } while(true);
    #####:  859:   return false;
    %%%%%:  859-block 39
        -:  860:#ifdef BOOST_REGEX_MSVC
        -:  861:#pragma warning(pop)
        -:  862:#endif
        -:  863:}
        -:  864:
        -:  865:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE17find_restart_lineEv called 0 returned 0% blocks executed 0%
    #####:  866:bool perl_matcher<BidiIterator, Allocator, traits>::find_restart_line()
        -:  867:{
        -:  868:   // do search optimised for line starts:
    #####:  869:   const unsigned char* _map = re.get_map();
    %%%%%:  869-block 2
call    0 never executed
    #####:  870:   if(match_prefix())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  871:      return true;
    %%%%%:  871-block 5
    #####:  872:   while(position != last)
    %%%%%:  872-block 6
    %%%%%:  872-block 34
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  873:   {
    #####:  874:      while((position != last) && !is_separator(*position))
    %%%%%:  874-block 7
    %%%%%:  874-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  874-block 10
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  874-block 12
    %%%%%:  874-block 13
    %%%%%:  874-block 14
branch  5 never executed
branch  6 never executed (fallthrough)
    #####:  875:         ++position;
    %%%%%:  875-block 8
    #####:  876:      if(position == last)
    %%%%%:  876-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  877:         return false;
    %%%%%:  877-block 16
    #####:  878:      ++position;
    #####:  879:      if(position == last)
    %%%%%:  879-block 17
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  880:      {
    #####:  881:         if(re.can_be_null() && match_prefix())
    %%%%%:  881-block 18
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  881-block 20
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  881-block 22
    %%%%%:  881-block 23
    %%%%%:  881-block 24
branch  6 never executed (fallthrough)
branch  7 never executed
    #####:  882:            return true;
    %%%%%:  882-block 25
    #####:  883:         return false;
    %%%%%:  883-block 26
        -:  884:      }
        -:  885:
    #####:  886:      if( can_start(*position, _map, (unsigned char)mask_any) )
    %%%%%:  886-block 27
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  887:      {
    #####:  888:         if(match_prefix())
    %%%%%:  888-block 29
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  889:            return true;
    %%%%%:  889-block 31
        -:  890:      }
    #####:  891:      if(position == last)
    %%%%%:  891-block 32
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  892:         return false;
    %%%%%:  892-block 33
        -:  893:      //++position;
        -:  894:   }
    #####:  895:   return false;
    %%%%%:  895-block 35
        -:  896:}
        -:  897:
        -:  898:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16find_restart_bufEv called 0 returned 0% blocks executed 0%
    #####:  899:bool perl_matcher<BidiIterator, Allocator, traits>::find_restart_buf()
        -:  900:{
    #####:  901:   if((position == base) && ((m_match_flags & match_not_bob) == 0))
    %%%%%:  901-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  901-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  901-block 5
    %%%%%:  901-block 6
    %%%%%:  901-block 7
branch  5 never executed (fallthrough)
branch  6 never executed
    #####:  902:      return match_prefix();
    %%%%%:  902-block 8
call    0 never executed
    #####:  903:   return false;
    %%%%%:  903-block 10
        -:  904:}
        -:  905:
        -:  906:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16find_restart_litEv called 0 returned 0% blocks executed 0%
    #####:  907:bool perl_matcher<BidiIterator, Allocator, traits>::find_restart_lit()
        -:  908:{
    #####:  909:   return false;
    %%%%%:  909-block 2
        -:  910:}
        -:  911:
        -:  912:} // namespace BOOST_REGEX_DETAIL_NS
        -:  913:
        -:  914:} // namespace boost
        -:  915:
        -:  916:#ifdef BOOST_REGEX_MSVC
        -:  917:#  pragma warning(pop)
        -:  918:#endif
        -:  919:
        -:  920:#endif
        -:  921:
