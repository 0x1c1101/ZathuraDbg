        -:    0:Source:/home/rc/ZathuraDbg/vendor/tinyexpr/tinyexpr.c
        -:    0:Graph:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/tinyexpr/tinyexpr.c.gcno
        -:    0:Data:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/tinyexpr/tinyexpr.c.gcda
        -:    0:Runs:1
        -:    1:// SPDX-License-Identifier: Zlib
        -:    2:/*
        -:    3: * TINYEXPR - Tiny recursive descent parser and evaluation engine in C
        -:    4: *
        -:    5: * Copyright (c) 2015-2020 Lewis Van Winkle
        -:    6: *
        -:    7: * http://CodePlea.com
        -:    8: *
        -:    9: * This software is provided 'as-is', without any express or implied
        -:   10: * warranty. In no event will the authors be held liable for any damages
        -:   11: * arising from the use of this software.
        -:   12: *
        -:   13: * Permission is granted to anyone to use this software for any purpose,
        -:   14: * including commercial applications, and to alter it and redistribute it
        -:   15: * freely, subject to the following restrictions:
        -:   16: *
        -:   17: * 1. The origin of this software must not be misrepresented; you must not
        -:   18: * claim that you wrote the original software. If you use this software
        -:   19: * in a product, an acknowledgement in the product documentation would be
        -:   20: * appreciated but is not required.
        -:   21: * 2. Altered source versions must be plainly marked as such, and must not be
        -:   22: * misrepresented as being the original software.
        -:   23: * 3. This notice may not be removed or altered from any source distribution.
        -:   24: */
        -:   25:
        -:   26:/* COMPILE TIME OPTIONS */
        -:   27:
        -:   28:/* Exponentiation associativity:
        -:   29:For a^b^c = (a^b)^c and -a^b = (-a)^b do nothing.
        -:   30:For a^b^c = a^(b^c) and -a^b = -(a^b) uncomment the next line.*/
        -:   31:/* #define TE_POW_FROM_RIGHT */
        -:   32:
        -:   33:/* Logarithms
        -:   34:For log = base 10 log do nothing
        -:   35:For log = natural log uncomment the next line. */
        -:   36:/* #define TE_NAT_LOG */
        -:   37:
        -:   38:#include "tinyexpr.h"
        -:   39:#include <stdlib.h>
        -:   40:#include <math.h>
        -:   41:#include <string.h>
        -:   42:#include <stdio.h>
        -:   43:#include <ctype.h>
        -:   44:#include <limits.h>
        -:   45:
        -:   46:#ifndef NAN
        -:   47:#define NAN (0.0/0.0)
        -:   48:#endif
        -:   49:
        -:   50:#ifndef INFINITY
        -:   51:#define INFINITY (1.0/0.0)
        -:   52:#endif
        -:   53:
        -:   54:
        -:   55:typedef double (*te_fun2)(double, double);
        -:   56:
        -:   57:enum {
        -:   58:    TOK_NULL = TE_CLOSURE7+1, TOK_ERROR, TOK_END, TOK_SEP,
        -:   59:    TOK_OPEN, TOK_CLOSE, TOK_NUMBER, TOK_VARIABLE, TOK_INFIX
        -:   60:};
        -:   61:
        -:   62:
        -:   63:enum {TE_CONSTANT = 1};
        -:   64:
        -:   65:
        -:   66:typedef struct state {
        -:   67:    const char *start;
        -:   68:    const char *next;
        -:   69:    int type;
        -:   70:    union {double value; const double *bound; const void *function;};
        -:   71:    void *context;
        -:   72:
        -:   73:    const te_variable *lookup;
        -:   74:    int lookup_len;
        -:   75:} state;
        -:   76:
        -:   77:
        -:   78:#define TYPE_MASK(TYPE) ((TYPE)&0x0000001F)
        -:   79:
        -:   80:#define IS_PURE(TYPE) (((TYPE) & TE_FLAG_PURE) != 0)
        -:   81:#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
        -:   82:#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
        -:   83:#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
        -:   84:#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})
        -:   85:#define CHECK_NULL(ptr, ...) if ((ptr) == NULL) { __VA_ARGS__; return NULL; }
        -:   86:
function new_expr called 0 returned 0% blocks executed 0%
    #####:   87:static te_expr *new_expr(const int type, const te_expr *parameters[]) {
    #####:   88:    const int arity = ARITY(type);
    %%%%%:   88-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   88-block 3
    %%%%%:   88-block 4
    #####:   89:    const int psize = sizeof(void*) * arity;
    #####:   90:    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    #####:   91:    te_expr *ret = malloc(size);
    #####:   92:    CHECK_NULL(ret);
    %%%%%:   92-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   92-block 6
        -:   93:
    #####:   94:    memset(ret, 0, size);
    #####:   95:    if (arity && parameters) {
    %%%%%:   95-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   95-block 8
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:   96:        memcpy(ret->parameters, parameters, psize);
    %%%%%:   96-block 9
        -:   97:    }
    #####:   98:    ret->type = type;
    #####:   99:    ret->bound = 0;
    #####:  100:    return ret;
    %%%%%:  100-block 10
        -:  101:}
        -:  102:
        -:  103:
function te_free_parameters called 0 returned 0% blocks executed 0%
    #####:  104:void te_free_parameters(te_expr *n) {
    #####:  105:    if (!n) return;
    %%%%%:  105-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  105-block 3
    #####:  106:    switch (TYPE_MASK(n->type)) {
    %%%%%:  106-block 4
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  107:        case TE_FUNCTION7: case TE_CLOSURE7: te_free(n->parameters[6]);     /* Falls through. */
    %%%%%:  107-block 5
call    0 never executed
    #####:  108:        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
    %%%%%:  108-block 6
call    0 never executed
    #####:  109:        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
    %%%%%:  109-block 7
call    0 never executed
    #####:  110:        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
    %%%%%:  110-block 8
call    0 never executed
    #####:  111:        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
    %%%%%:  111-block 9
call    0 never executed
    #####:  112:        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
    %%%%%:  112-block 10
call    0 never executed
    #####:  113:        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
    %%%%%:  113-block 11
call    0 never executed
        -:  114:    }
        -:  115:}
        -:  116:
        -:  117:
function te_free called 0 returned 0% blocks executed 0%
    #####:  118:void te_free(te_expr *n) {
    #####:  119:    if (!n) return;
    %%%%%:  119-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  119-block 3
    #####:  120:    te_free_parameters(n);
    %%%%%:  120-block 4
call    0 never executed
    #####:  121:    free(n);
        -:  122:}
        -:  123:
        -:  124:
function pi called 0 returned 0% blocks executed 0%
    #####:  125:static double pi(void) {return 3.14159265358979323846;}
    %%%%%:  125-block 2
function e called 0 returned 0% blocks executed 0%
    #####:  126:static double e(void) {return 2.71828182845904523536;}
    %%%%%:  126-block 2
function fac called 0 returned 0% blocks executed 0%
    #####:  127:static double fac(double a) {/* simplest version of fac */
    #####:  128:    if (a < 0.0)
    %%%%%:  128-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  129:        return NAN;
    %%%%%:  129-block 3
    #####:  130:    if (a > UINT_MAX)
    %%%%%:  130-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  131:        return INFINITY;
    %%%%%:  131-block 5
    #####:  132:    unsigned int ua = (unsigned int)(a);
    #####:  133:    unsigned long int result = 1, i;
    #####:  134:    for (i = 1; i <= ua; i++) {
    %%%%%:  134-block 6
    %%%%%:  134-block 10
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  135:        if (i > ULONG_MAX / result)
    %%%%%:  135-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  136:            return INFINITY;
    %%%%%:  136-block 8
    #####:  137:        result *= i;
    %%%%%:  137-block 9
        -:  138:    }
    #####:  139:    return (double)result;
    %%%%%:  139-block 11
        -:  140:}
function ncr called 0 returned 0% blocks executed 0%
    #####:  141:static double ncr(double n, double r) {
    #####:  142:    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    %%%%%:  142-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  142-block 3
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  142-block 4
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  142-block 5
    #####:  143:    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    %%%%%:  143-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  143-block 7
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  143-block 8
    #####:  144:    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    #####:  145:    unsigned long int result = 1;
    #####:  146:    if (ur > un / 2) ur = un - ur;
    %%%%%:  146-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  146-block 10
    #####:  147:    for (i = 1; i <= ur; i++) {
    %%%%%:  147-block 11
    %%%%%:  147-block 15
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  148:        if (result > ULONG_MAX / (un - ur + i))
    %%%%%:  148-block 12
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  149:            return INFINITY;
    %%%%%:  149-block 13
    #####:  150:        result *= un - ur + i;
    #####:  151:        result /= i;
    %%%%%:  151-block 14
        -:  152:    }
    #####:  153:    return result;
    %%%%%:  153-block 16
        -:  154:}
function npr called 0 returned 0% blocks executed 0%
    #####:  155:static double npr(double n, double r) {return ncr(n, r) * fac(r);}
    %%%%%:  155-block 2
call    0 never executed
call    1 never executed
        -:  156:
        -:  157:#ifdef _MSC_VER
        -:  158:#pragma function (ceil)
        -:  159:#pragma function (floor)
        -:  160:#endif
        -:  161:
        -:  162:static const te_variable functions[] = {
        -:  163:    /* must be in alphabetical order */
        -:  164:    {"abs", fabs,     TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  165:    {"acos", acos,    TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  166:    {"asin", asin,    TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  167:    {"atan", atan,    TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  168:    {"atan2", atan2,  TE_FUNCTION2 | TE_FLAG_PURE, 0},
        -:  169:    {"ceil", ceil,    TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  170:    {"cos", cos,      TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  171:    {"cosh", cosh,    TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  172:    {"e", e,          TE_FUNCTION0 | TE_FLAG_PURE, 0},
        -:  173:    {"exp", exp,      TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  174:    {"fac", fac,      TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  175:    {"floor", floor,  TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  176:    {"ln", log,       TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  177:#ifdef TE_NAT_LOG
        -:  178:    {"log", log,      TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  179:#else
        -:  180:    {"log", log10,    TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  181:#endif
        -:  182:    {"log10", log10,  TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  183:    {"ncr", ncr,      TE_FUNCTION2 | TE_FLAG_PURE, 0},
        -:  184:    {"npr", npr,      TE_FUNCTION2 | TE_FLAG_PURE, 0},
        -:  185:    {"pi", pi,        TE_FUNCTION0 | TE_FLAG_PURE, 0},
        -:  186:    {"pow", pow,      TE_FUNCTION2 | TE_FLAG_PURE, 0},
        -:  187:    {"sin", sin,      TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  188:    {"sinh", sinh,    TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  189:    {"sqrt", sqrt,    TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  190:    {"tan", tan,      TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  191:    {"tanh", tanh,    TE_FUNCTION1 | TE_FLAG_PURE, 0},
        -:  192:    {0, 0, 0, 0}
        -:  193:};
        -:  194:
function find_builtin called 0 returned 0% blocks executed 0%
    #####:  195:static const te_variable *find_builtin(const char *name, int len) {
    #####:  196:    int imin = 0;
    #####:  197:    int imax = sizeof(functions) / sizeof(te_variable) - 2;
        -:  198:
        -:  199:    /*Binary search.*/
    #####:  200:    while (imax >= imin) {
    %%%%%:  200-block 2
    %%%%%:  200-block 10
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  201:        const int i = (imin + ((imax-imin)/2));
    #####:  202:        int c = strncmp(name, functions[i].name, len);
    #####:  203:        if (!c) c = '\0' - functions[i].name[len];
    %%%%%:  203-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  203-block 4
    #####:  204:        if (c == 0) {
    %%%%%:  204-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  205:            return functions + i;
    %%%%%:  205-block 6
    #####:  206:        } else if (c > 0) {
    %%%%%:  206-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  207:            imin = i + 1;
    %%%%%:  207-block 8
        -:  208:        } else {
    #####:  209:            imax = i - 1;
    %%%%%:  209-block 9
        -:  210:        }
        -:  211:    }
        -:  212:
    #####:  213:    return 0;
    %%%%%:  213-block 11
        -:  214:}
        -:  215:
function find_lookup called 0 returned 0% blocks executed 0%
    #####:  216:static const te_variable *find_lookup(const state *s, const char *name, int len) {
        -:  217:    int iters;
        -:  218:    const te_variable *var;
    #####:  219:    if (!s->lookup) return 0;
    %%%%%:  219-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  219-block 3
        -:  220:
    #####:  221:    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
    %%%%%:  221-block 4
    %%%%%:  221-block 8
    %%%%%:  221-block 9
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  222:        if (strncmp(name, var->name, len) == 0 && var->name[len] == '\0') {
    %%%%%:  222-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  222-block 6
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  223:            return var;
    %%%%%:  223-block 7
        -:  224:        }
        -:  225:    }
    #####:  226:    return 0;
    %%%%%:  226-block 10
        -:  227:}
        -:  228:
        -:  229:
        -:  230:
function add called 0 returned 0% blocks executed 0%
    #####:  231:static double add(double a, double b) {return a + b;}
    %%%%%:  231-block 2
function sub called 0 returned 0% blocks executed 0%
    #####:  232:static double sub(double a, double b) {return a - b;}
    %%%%%:  232-block 2
function mul called 0 returned 0% blocks executed 0%
    #####:  233:static double mul(double a, double b) {return a * b;}
    %%%%%:  233-block 2
function divide called 0 returned 0% blocks executed 0%
    #####:  234:static double divide(double a, double b) {return a / b;}
    %%%%%:  234-block 2
function negate called 0 returned 0% blocks executed 0%
    #####:  235:static double negate(double a) {return -a;}
    %%%%%:  235-block 2
function comma called 0 returned 0% blocks executed 0%
    #####:  236:static double comma(double a, double b) {(void)a; return b;}
    %%%%%:  236-block 2
        -:  237:
        -:  238:
function next_token called 0 returned 0% blocks executed 0%
    #####:  239:void next_token(state *s) {
    #####:  240:    s->type = TOK_NULL;
    %%%%%:  240-block 2
        -:  241:
        -:  242:    do {
        -:  243:
    #####:  244:        if (!*s->next){
    %%%%%:  244-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  245:            s->type = TOK_END;
    #####:  246:            return;
    %%%%%:  246-block 4
        -:  247:        }
        -:  248:
        -:  249:        /* Try reading a number. */
    #####:  250:        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
    %%%%%:  250-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  250-block 6
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  250-block 7
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:  251:            s->value = strtod(s->next, (char**)&s->next);
    %%%%%:  251-block 8
call    0 never executed
    #####:  252:            s->type = TOK_NUMBER;
        -:  253:        } else {
        -:  254:            /* Look for a variable or builtin function call. */
    #####:  255:            if (isalpha(s->next[0])) {
    %%%%%:  255-block 10
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  256:                const char *start;
    #####:  257:                start = s->next;
    #####:  258:                while (isalpha(s->next[0]) || isdigit(s->next[0]) || (s->next[0] == '_')) s->next++;
    %%%%%:  258-block 11
    %%%%%:  258-block 12
    %%%%%:  258-block 13
branch  0 never executed
branch  1 never executed (fallthrough)
    %%%%%:  258-block 14
branch  2 never executed
branch  3 never executed (fallthrough)
    %%%%%:  258-block 15
branch  4 never executed
branch  5 never executed (fallthrough)
        -:  259:                
    #####:  260:                const te_variable *var = find_lookup(s, start, s->next - start);
    %%%%%:  260-block 16
call    0 never executed
    #####:  261:                if (!var) var = find_builtin(start, s->next - start);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  261-block 18
call    2 never executed
        -:  262:
    #####:  263:                if (!var) {
    %%%%%:  263-block 19
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  264:                    s->type = TOK_ERROR;
    %%%%%:  264-block 20
        -:  265:                } else {
    #####:  266:                    switch(TYPE_MASK(var->type))
    %%%%%:  266-block 21
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  267:                    {
    #####:  268:                        case TE_VARIABLE:
    #####:  269:                            s->type = TOK_VARIABLE;
    #####:  270:                            s->bound = var->address;
    #####:  271:                            break;
    %%%%%:  271-block 22
        -:  272:
    #####:  273:                        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:         /* Falls through. */
        -:  274:                        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:         /* Falls through. */
    #####:  275:                            s->context = var->context;                                                  /* Falls through. */
    %%%%%:  275-block 23
        -:  276:
    #####:  277:                        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:     /* Falls through. */
        -:  278:                        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:     /* Falls through. */
    #####:  279:                            s->type = var->type;
    #####:  280:                            s->function = var->address;
    #####:  281:                            break;
    %%%%%:  281-block 24
        -:  282:                    }
        -:  283:                }
        -:  284:
        -:  285:            } else {
        -:  286:                /* Look for an operator or special character. */
    #####:  287:                switch (s->next++[0]) {
    %%%%%:  287-block 26
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  288:                    case '+': s->type = TOK_INFIX; s->function = add; break;
    %%%%%:  288-block 27
    #####:  289:                    case '-': s->type = TOK_INFIX; s->function = sub; break;
    %%%%%:  289-block 28
    #####:  290:                    case '*': s->type = TOK_INFIX; s->function = mul; break;
    %%%%%:  290-block 29
    #####:  291:                    case '/': s->type = TOK_INFIX; s->function = divide; break;
    %%%%%:  291-block 30
    #####:  292:                    case '^': s->type = TOK_INFIX; s->function = pow; break;
    %%%%%:  292-block 31
    #####:  293:                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
    %%%%%:  293-block 32
    #####:  294:                    case '(': s->type = TOK_OPEN; break;
    %%%%%:  294-block 33
    #####:  295:                    case ')': s->type = TOK_CLOSE; break;
    %%%%%:  295-block 34
    #####:  296:                    case ',': s->type = TOK_SEP; break;
    %%%%%:  296-block 35
    #####:  297:                    case ' ': case '\t': case '\n': case '\r': break;
    %%%%%:  297-block 36
    #####:  298:                    default: s->type = TOK_ERROR; break;
    %%%%%:  298-block 37
        -:  299:                }
        -:  300:            }
        -:  301:        }
    #####:  302:    } while (s->type == TOK_NULL);
    %%%%%:  302-block 38
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  303:}
        -:  304:
        -:  305:
        -:  306:static te_expr *list(state *s);
        -:  307:static te_expr *expr(state *s);
        -:  308:static te_expr *power(state *s);
        -:  309:
function base called 0 returned 0% blocks executed 0%
    #####:  310:static te_expr *base(state *s) {
        -:  311:    /* <base>      =    <constant> | <variable> | <function-0> {"(" ")"} | <function-1> <power> | <function-X> "(" <expr> {"," <expr>} ")" | "(" <list> ")" */
        -:  312:    te_expr *ret;
        -:  313:    int arity;
        -:  314:
    #####:  315:    switch (TYPE_MASK(s->type)) {
    %%%%%:  315-block 2
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  316:        case TOK_NUMBER:
    #####:  317:            ret = new_expr(TE_CONSTANT, 0);
    %%%%%:  317-block 3
call    0 never executed
    #####:  318:            CHECK_NULL(ret);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  318-block 5
        -:  319:
    #####:  320:            ret->value = s->value;
    #####:  321:            next_token(s);
    %%%%%:  321-block 6
call    0 never executed
    #####:  322:            break;
        -:  323:
    #####:  324:        case TOK_VARIABLE:
    #####:  325:            ret = new_expr(TE_VARIABLE, 0);
    %%%%%:  325-block 8
call    0 never executed
    #####:  326:            CHECK_NULL(ret);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  326-block 10
        -:  327:
    #####:  328:            ret->bound = s->bound;
    #####:  329:            next_token(s);
    %%%%%:  329-block 11
call    0 never executed
    #####:  330:            break;
        -:  331:
    #####:  332:        case TE_FUNCTION0:
        -:  333:        case TE_CLOSURE0:
    #####:  334:            ret = new_expr(s->type, 0);
    %%%%%:  334-block 13
call    0 never executed
    #####:  335:            CHECK_NULL(ret);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  335-block 15
        -:  336:
    #####:  337:            ret->function = s->function;
    #####:  338:            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
    %%%%%:  338-block 16
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  338-block 17
    #####:  339:            next_token(s);
    %%%%%:  339-block 18
call    0 never executed
    #####:  340:            if (s->type == TOK_OPEN) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  341:                next_token(s);
    %%%%%:  341-block 20
call    0 never executed
    #####:  342:                if (s->type != TOK_CLOSE) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  343:                    s->type = TOK_ERROR;
    %%%%%:  343-block 22
        -:  344:                } else {
    #####:  345:                    next_token(s);
    %%%%%:  345-block 23
call    0 never executed
        -:  346:                }
        -:  347:            }
    #####:  348:            break;
    %%%%%:  348-block 24
        -:  349:
    #####:  350:        case TE_FUNCTION1:
        -:  351:        case TE_CLOSURE1:
    #####:  352:            ret = new_expr(s->type, 0);
    %%%%%:  352-block 25
call    0 never executed
    #####:  353:            CHECK_NULL(ret);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  353-block 27
        -:  354:
    #####:  355:            ret->function = s->function;
    #####:  356:            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
    %%%%%:  356-block 28
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  356-block 29
    #####:  357:            next_token(s);
    %%%%%:  357-block 30
call    0 never executed
    #####:  358:            ret->parameters[0] = power(s);
call    0 never executed
    #####:  359:            CHECK_NULL(ret->parameters[0], te_free(ret));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  359-block 33
call    2 never executed
    #####:  360:            break;
    %%%%%:  360-block 35
        -:  361:
    #####:  362:        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        -:  363:        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        -:  364:        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        -:  365:        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
    #####:  366:            arity = ARITY(s->type);
    %%%%%:  366-block 36
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  366-block 37
    %%%%%:  366-block 38
        -:  367:
    #####:  368:            ret = new_expr(s->type, 0);
    %%%%%:  368-block 39
call    0 never executed
    #####:  369:            CHECK_NULL(ret);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  369-block 41
        -:  370:
    #####:  371:            ret->function = s->function;
    #####:  372:            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
    %%%%%:  372-block 42
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  372-block 43
    #####:  373:            next_token(s);
    %%%%%:  373-block 44
call    0 never executed
        -:  374:
    #####:  375:            if (s->type != TOK_OPEN) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  376:                s->type = TOK_ERROR;
    %%%%%:  376-block 46
        -:  377:            } else {
        -:  378:                int i;
    #####:  379:                for(i = 0; i < arity; i++) {
    %%%%%:  379-block 47
    %%%%%:  379-block 55
    %%%%%:  379-block 56
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  380:                    next_token(s);
    %%%%%:  380-block 48
call    0 never executed
    #####:  381:                    ret->parameters[i] = expr(s);
call    0 never executed
    #####:  382:                    CHECK_NULL(ret->parameters[i], te_free(ret));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  382-block 51
call    2 never executed
        -:  383:
    #####:  384:                    if(s->type != TOK_SEP) {
    %%%%%:  384-block 53
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  385:                        break;
    %%%%%:  385-block 54
        -:  386:                    }
        -:  387:                }
    #####:  388:                if(s->type != TOK_CLOSE || i != arity - 1) {
    %%%%%:  388-block 57
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  388-block 58
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  389:                    s->type = TOK_ERROR;
    %%%%%:  389-block 59
        -:  390:                } else {
    #####:  391:                    next_token(s);
    %%%%%:  391-block 60
call    0 never executed
        -:  392:                }
        -:  393:            }
        -:  394:
    #####:  395:            break;
    %%%%%:  395-block 61
        -:  396:
    #####:  397:        case TOK_OPEN:
    #####:  398:            next_token(s);
    %%%%%:  398-block 62
call    0 never executed
    #####:  399:            ret = list(s);
call    0 never executed
    #####:  400:            CHECK_NULL(ret);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  400-block 65
        -:  401:
    #####:  402:            if (s->type != TOK_CLOSE) {
    %%%%%:  402-block 66
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  403:                s->type = TOK_ERROR;
    %%%%%:  403-block 67
        -:  404:            } else {
    #####:  405:                next_token(s);
    %%%%%:  405-block 68
call    0 never executed
        -:  406:            }
    #####:  407:            break;
    %%%%%:  407-block 69
        -:  408:
    #####:  409:        default:
    #####:  410:            ret = new_expr(0, 0);
    %%%%%:  410-block 70
call    0 never executed
    #####:  411:            CHECK_NULL(ret);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  411-block 72
        -:  412:
    #####:  413:            s->type = TOK_ERROR;
    #####:  414:            ret->value = NAN;
    #####:  415:            break;
    %%%%%:  415-block 73
        -:  416:    }
        -:  417:
    #####:  418:    return ret;
    %%%%%:  418-block 74
        -:  419:}
        -:  420:
        -:  421:
function power called 0 returned 0% blocks executed 0%
    #####:  422:static te_expr *power(state *s) {
        -:  423:    /* <power>     =    {("-" | "+")} <base> */
    #####:  424:    int sign = 1;
    #####:  425:    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
    %%%%%:  425-block 2
    %%%%%:  425-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  425-block 7
branch  2 never executed
branch  3 never executed (fallthrough)
    %%%%%:  425-block 8
branch  4 never executed
branch  5 never executed (fallthrough)
    #####:  426:        if (s->function == sub) sign = -sign;
    %%%%%:  426-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  426-block 4
    #####:  427:        next_token(s);
    %%%%%:  427-block 5
call    0 never executed
        -:  428:    }
        -:  429:
        -:  430:    te_expr *ret;
        -:  431:
    #####:  432:    if (sign == 1) {
    %%%%%:  432-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  433:        ret = base(s);
    %%%%%:  433-block 10
call    0 never executed
        -:  434:    } else {
    #####:  435:        te_expr *b = base(s);
    %%%%%:  435-block 11
call    0 never executed
    #####:  436:        CHECK_NULL(b);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  436-block 13
    %%%%%:  436-block 19
        -:  437:
    #####:  438:        ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, b);
    %%%%%:  438-block 14
call    0 never executed
    #####:  439:        CHECK_NULL(ret, te_free(b));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  439-block 16
call    2 never executed
        -:  440:
    #####:  441:        ret->function = negate;
    %%%%%:  441-block 18
        -:  442:    }
        -:  443:
    #####:  444:    return ret;
    %%%%%:  444-block 20
        -:  445:}
        -:  446:
        -:  447:#ifdef TE_POW_FROM_RIGHT
        -:  448:static te_expr *factor(state *s) {
        -:  449:    /* <factor>    =    <power> {"^" <power>} */
        -:  450:    te_expr *ret = power(s);
        -:  451:    CHECK_NULL(ret);
        -:  452:
        -:  453:    int neg = 0;
        -:  454:
        -:  455:    if (ret->type == (TE_FUNCTION1 | TE_FLAG_PURE) && ret->function == negate) {
        -:  456:        te_expr *se = ret->parameters[0];
        -:  457:        free(ret);
        -:  458:        ret = se;
        -:  459:        neg = 1;
        -:  460:    }
        -:  461:
        -:  462:    te_expr *insertion = 0;
        -:  463:
        -:  464:    while (s->type == TOK_INFIX && (s->function == pow)) {
        -:  465:        te_fun2 t = s->function;
        -:  466:        next_token(s);
        -:  467:
        -:  468:        if (insertion) {
        -:  469:            /* Make exponentiation go right-to-left. */
        -:  470:            te_expr *p = power(s);
        -:  471:            CHECK_NULL(p, te_free(ret));
        -:  472:
        -:  473:            te_expr *insert = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, insertion->parameters[1], p);
        -:  474:            CHECK_NULL(insert, te_free(p), te_free(ret));
        -:  475:
        -:  476:            insert->function = t;
        -:  477:            insertion->parameters[1] = insert;
        -:  478:            insertion = insert;
        -:  479:        } else {
        -:  480:            te_expr *p = power(s);
        -:  481:            CHECK_NULL(p, te_free(ret));
        -:  482:
        -:  483:            te_expr *prev = ret;
        -:  484:            ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, p);
        -:  485:            CHECK_NULL(ret, te_free(p), te_free(prev));
        -:  486:
        -:  487:            ret->function = t;
        -:  488:            insertion = ret;
        -:  489:        }
        -:  490:    }
        -:  491:
        -:  492:    if (neg) {
        -:  493:        te_expr *prev = ret;
        -:  494:        ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, ret);
        -:  495:        CHECK_NULL(ret, te_free(prev));
        -:  496:
        -:  497:        ret->function = negate;
        -:  498:    }
        -:  499:
        -:  500:    return ret;
        -:  501:}
        -:  502:#else
function factor called 0 returned 0% blocks executed 0%
    #####:  503:static te_expr *factor(state *s) {
        -:  504:    /* <factor>    =    <power> {"^" <power>} */
    #####:  505:    te_expr *ret = power(s);
    %%%%%:  505-block 2
call    0 never executed
    #####:  506:    CHECK_NULL(ret);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  506-block 4
        -:  507:
    #####:  508:    while (s->type == TOK_INFIX && (s->function == pow)) {
    %%%%%:  508-block 5
    %%%%%:  508-block 18
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  508-block 19
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  509:        te_fun2 t = s->function;
    #####:  510:        next_token(s);
    %%%%%:  510-block 6
call    0 never executed
    #####:  511:        te_expr *p = power(s);
call    0 never executed
    #####:  512:        CHECK_NULL(p, te_free(ret));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  512-block 9
call    2 never executed
    %%%%%:  512-block 17
        -:  513:
    #####:  514:        te_expr *prev = ret;
    #####:  515:        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, p);
    %%%%%:  515-block 11
call    0 never executed
    #####:  516:        CHECK_NULL(ret, te_free(p), te_free(prev));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  516-block 13
call    2 never executed
call    3 never executed
        -:  517:
    #####:  518:        ret->function = t;
    %%%%%:  518-block 16
        -:  519:    }
        -:  520:
    #####:  521:    return ret;
    %%%%%:  521-block 20
        -:  522:}
        -:  523:#endif
        -:  524:
        -:  525:
        -:  526:
function term called 0 returned 0% blocks executed 0%
    #####:  527:static te_expr *term(state *s) {
        -:  528:    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    #####:  529:    te_expr *ret = factor(s);
    %%%%%:  529-block 2
call    0 never executed
    #####:  530:    CHECK_NULL(ret);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  530-block 4
        -:  531:
    #####:  532:    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
    %%%%%:  532-block 5
    %%%%%:  532-block 18
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  532-block 19
branch  2 never executed
branch  3 never executed (fallthrough)
    %%%%%:  532-block 20
branch  4 never executed
branch  5 never executed (fallthrough)
    %%%%%:  532-block 21
branch  6 never executed
branch  7 never executed (fallthrough)
    #####:  533:        te_fun2 t = s->function;
    #####:  534:        next_token(s);
    %%%%%:  534-block 6
call    0 never executed
    #####:  535:        te_expr *f = factor(s);
call    0 never executed
    #####:  536:        CHECK_NULL(f, te_free(ret));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  536-block 9
call    2 never executed
    %%%%%:  536-block 17
        -:  537:
    #####:  538:        te_expr *prev = ret;
    #####:  539:        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, f);
    %%%%%:  539-block 11
call    0 never executed
    #####:  540:        CHECK_NULL(ret, te_free(f), te_free(prev));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  540-block 13
call    2 never executed
call    3 never executed
        -:  541:
    #####:  542:        ret->function = t;
    %%%%%:  542-block 16
        -:  543:    }
        -:  544:
    #####:  545:    return ret;
    %%%%%:  545-block 22
        -:  546:}
        -:  547:
        -:  548:
function expr called 0 returned 0% blocks executed 0%
    #####:  549:static te_expr *expr(state *s) {
        -:  550:    /* <expr>      =    <term> {("+" | "-") <term>} */
    #####:  551:    te_expr *ret = term(s);
    %%%%%:  551-block 2
call    0 never executed
    #####:  552:    CHECK_NULL(ret);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  552-block 4
        -:  553:
    #####:  554:    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
    %%%%%:  554-block 5
    %%%%%:  554-block 18
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  554-block 19
branch  2 never executed
branch  3 never executed (fallthrough)
    %%%%%:  554-block 20
branch  4 never executed
branch  5 never executed (fallthrough)
    #####:  555:        te_fun2 t = s->function;
    #####:  556:        next_token(s);
    %%%%%:  556-block 6
call    0 never executed
    #####:  557:        te_expr *te = term(s);
call    0 never executed
    #####:  558:        CHECK_NULL(te, te_free(ret));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  558-block 9
call    2 never executed
    %%%%%:  558-block 17
        -:  559:
    #####:  560:        te_expr *prev = ret;
    #####:  561:        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, te);
    %%%%%:  561-block 11
call    0 never executed
    #####:  562:        CHECK_NULL(ret, te_free(te), te_free(prev));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  562-block 13
call    2 never executed
call    3 never executed
        -:  563:
    #####:  564:        ret->function = t;
    %%%%%:  564-block 16
        -:  565:    }
        -:  566:
    #####:  567:    return ret;
    %%%%%:  567-block 21
        -:  568:}
        -:  569:
        -:  570:
function list called 0 returned 0% blocks executed 0%
    #####:  571:static te_expr *list(state *s) {
        -:  572:    /* <list>      =    <expr> {"," <expr>} */
    #####:  573:    te_expr *ret = expr(s);
    %%%%%:  573-block 2
call    0 never executed
    #####:  574:    CHECK_NULL(ret);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  574-block 4
        -:  575:
    #####:  576:    while (s->type == TOK_SEP) {
    %%%%%:  576-block 5
    %%%%%:  576-block 18
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  577:        next_token(s);
    %%%%%:  577-block 6
call    0 never executed
    #####:  578:        te_expr *e = expr(s);
call    0 never executed
    #####:  579:        CHECK_NULL(e, te_free(ret));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  579-block 9
call    2 never executed
    %%%%%:  579-block 17
        -:  580:
    #####:  581:        te_expr *prev = ret;
    #####:  582:        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, e);
    %%%%%:  582-block 11
call    0 never executed
    #####:  583:        CHECK_NULL(ret, te_free(e), te_free(prev));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  583-block 13
call    2 never executed
call    3 never executed
        -:  584:
    #####:  585:        ret->function = comma;
    %%%%%:  585-block 16
        -:  586:    }
        -:  587:
    #####:  588:    return ret;
    %%%%%:  588-block 19
        -:  589:}
        -:  590:
        -:  591:
        -:  592:#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
        -:  593:#define M(e) te_eval(n->parameters[e])
        -:  594:
        -:  595:
function te_eval called 0 returned 0% blocks executed 0%
    #####:  596:double te_eval(const te_expr *n) {
    #####:  597:    if (!n) return NAN;
    %%%%%:  597-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  597-block 3
        -:  598:
    #####:  599:    switch(TYPE_MASK(n->type)) {
    %%%%%:  599-block 4
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  600:        case TE_CONSTANT: return n->value;
    %%%%%:  600-block 5
    #####:  601:        case TE_VARIABLE: return *n->bound;
    %%%%%:  601-block 6
        -:  602:
    #####:  603:        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        -:  604:        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
    #####:  605:            switch(ARITY(n->type)) {
    %%%%%:  605-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  605-block 8
    %%%%%:  605-block 9
    %%%%%:  605-block 10
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  606:                case 0: return TE_FUN(void)();
    %%%%%:  606-block 11
call    0 never executed
    #####:  607:                case 1: return TE_FUN(double)(M(0));
    %%%%%:  607-block 12
call    0 never executed
call    1 never executed
    #####:  608:                case 2: return TE_FUN(double, double)(M(0), M(1));
    %%%%%:  608-block 14
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  609:                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
    %%%%%:  609-block 17
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  610:                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
    %%%%%:  610-block 21
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  611:                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
    %%%%%:  611-block 26
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  612:                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
    %%%%%:  612-block 32
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  613:                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
    %%%%%:  613-block 39
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  614:                default: return NAN;
    %%%%%:  614-block 47
        -:  615:            }
        -:  616:
    #####:  617:        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        -:  618:        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
    #####:  619:            switch(ARITY(n->type)) {
    %%%%%:  619-block 48
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  619-block 49
    %%%%%:  619-block 50
    %%%%%:  619-block 51
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  620:                case 0: return TE_FUN(void*)(n->parameters[0]);
    %%%%%:  620-block 52
call    0 never executed
    #####:  621:                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
    %%%%%:  621-block 53
call    0 never executed
call    1 never executed
    #####:  622:                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
    %%%%%:  622-block 55
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  623:                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
    %%%%%:  623-block 58
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  624:                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
    %%%%%:  624-block 62
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  625:                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
    %%%%%:  625-block 67
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  626:                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
    %%%%%:  626-block 73
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  627:                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
    %%%%%:  627-block 80
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  628:                default: return NAN;
    %%%%%:  628-block 88
        -:  629:            }
        -:  630:
    #####:  631:        default: return NAN;
    %%%%%:  631-block 89
        -:  632:    }
        -:  633:
        -:  634:}
        -:  635:
        -:  636:#undef TE_FUN
        -:  637:#undef M
        -:  638:
function optimize called 0 returned 0% blocks executed 0%
    #####:  639:static void optimize(te_expr *n) {
        -:  640:    /* Evaluates as much as possible. */
    #####:  641:    if (n->type == TE_CONSTANT) return;
    %%%%%:  641-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  641-block 3
    #####:  642:    if (n->type == TE_VARIABLE) return;
    %%%%%:  642-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  642-block 5
        -:  643:
        -:  644:    /* Only optimize out functions flagged as pure. */
    #####:  645:    if (IS_PURE(n->type)) {
    %%%%%:  645-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  646:        const int arity = ARITY(n->type);
    %%%%%:  646-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  646-block 8
    %%%%%:  646-block 9
    #####:  647:        int known = 1;
        -:  648:        int i;
    #####:  649:        for (i = 0; i < arity; ++i) {
    %%%%%:  649-block 10
    %%%%%:  649-block 14
    %%%%%:  649-block 15
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  650:            optimize(n->parameters[i]);
    %%%%%:  650-block 11
call    0 never executed
    #####:  651:            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  652:                known = 0;
    %%%%%:  652-block 13
        -:  653:            }
        -:  654:        }
    #####:  655:        if (known) {
    %%%%%:  655-block 16
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  656:            const double value = te_eval(n);
    %%%%%:  656-block 17
call    0 never executed
    #####:  657:            te_free_parameters(n);
call    0 never executed
    #####:  658:            n->type = TE_CONSTANT;
    #####:  659:            n->value = value;
        -:  660:        }
        -:  661:    }
        -:  662:}
        -:  663:
        -:  664:
function te_compile called 0 returned 0% blocks executed 0%
    #####:  665:te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
        -:  666:    state s;
    #####:  667:    s.start = s.next = expression;
    #####:  668:    s.lookup = variables;
    #####:  669:    s.lookup_len = var_count;
        -:  670:
    #####:  671:    next_token(&s);
    %%%%%:  671-block 2
call    0 never executed
    #####:  672:    te_expr *root = list(&s);
call    0 never executed
    #####:  673:    if (root == NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  674:        if (error) *error = -1;
    %%%%%:  674-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  674-block 6
    #####:  675:        return NULL;
    %%%%%:  675-block 7
        -:  676:    }
        -:  677:
    #####:  678:    if (s.type != TOK_END) {
    %%%%%:  678-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  679:        te_free(root);
    %%%%%:  679-block 9
call    0 never executed
    #####:  680:        if (error) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  681:            *error = (s.next - s.start);
    #####:  682:            if (*error == 0) *error = 1;
    %%%%%:  682-block 11
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  682-block 12
        -:  683:        }
    #####:  684:        return 0;
    %%%%%:  684-block 13
        -:  685:    } else {
    #####:  686:        optimize(root);
    %%%%%:  686-block 14
call    0 never executed
    #####:  687:        if (error) *error = 0;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  687-block 16
    #####:  688:        return root;
    %%%%%:  688-block 17
        -:  689:    }
        -:  690:}
        -:  691:
        -:  692:
function te_interp called 0 returned 0% blocks executed 0%
    #####:  693:double te_interp(const char *expression, int *error) {
    #####:  694:    te_expr *n = te_compile(expression, 0, 0, error);
    %%%%%:  694-block 2
call    0 never executed
        -:  695:
        -:  696:    double ret;
    #####:  697:    if (n) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  698:        ret = te_eval(n);
    %%%%%:  698-block 4
call    0 never executed
    #####:  699:        te_free(n);
call    0 never executed
        -:  700:    } else {
    #####:  701:        ret = NAN;
    %%%%%:  701-block 6
        -:  702:    }
    #####:  703:    return ret;
    %%%%%:  703-block 7
        -:  704:}
        -:  705:
function pn called 0 returned 0% blocks executed 0%
    #####:  706:static void pn (const te_expr *n, int depth) {
        -:  707:    int i, arity;
    #####:  708:    printf("%*s", depth, "");
    %%%%%:  708-block 2
call    0 never executed
        -:  709:
    #####:  710:    switch(TYPE_MASK(n->type)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  711:    case TE_CONSTANT: printf("%f\n", n->value); break;
    %%%%%:  711-block 4
call    0 never executed
    #####:  712:    case TE_VARIABLE: printf("bound %p\n", n->bound); break;
    %%%%%:  712-block 5
call    0 never executed
        -:  713:
    #####:  714:    case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        -:  715:    case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        -:  716:    case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        -:  717:    case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
    #####:  718:         arity = ARITY(n->type);
    %%%%%:  718-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  718-block 7
    %%%%%:  718-block 8
    #####:  719:         printf("f%d", arity);
    %%%%%:  719-block 9
call    0 never executed
    #####:  720:         for(i = 0; i < arity; i++) {
    %%%%%:  720-block 13
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  721:             printf(" %p", n->parameters[i]);
    %%%%%:  721-block 11
call    0 never executed
        -:  722:         }
    #####:  723:         printf("\n");
    %%%%%:  723-block 14
call    0 never executed
    #####:  724:         for(i = 0; i < arity; i++) {
    %%%%%:  724-block 18
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  725:             pn(n->parameters[i], depth + 1);
    %%%%%:  725-block 16
call    0 never executed
        -:  726:         }
    #####:  727:         break;
    %%%%%:  727-block 19
        -:  728:    }
    #####:  729:}
        -:  730:
        -:  731:
function te_print called 0 returned 0% blocks executed 0%
    #####:  732:void te_print(const te_expr *n) {
    #####:  733:    pn(n, 0);
    %%%%%:  733-block 2
call    0 never executed
    #####:  734:}
