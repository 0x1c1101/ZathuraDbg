        -:    0:Source:/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/vendor/regex/include/boost/regex/v5/perl_matcher_non_recursive.hpp
        -:    0:Graph:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcno
        -:    0:Data:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: *
        -:    3: * Copyright (c) 2002
        -:    4: * John Maddock
        -:    5: *
        -:    6: * Use, modification and distribution are subject to the 
        -:    7: * Boost Software License, Version 1.0. (See accompanying file 
        -:    8: * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9: *
        -:   10: */
        -:   11:
        -:   12: /*
        -:   13:  *   LOCATION:    see http://www.boost.org for most recent version.
        -:   14:  *   FILE         perl_matcher_common.cpp
        -:   15:  *   VERSION      see <boost/version.hpp>
        -:   16:  *   DESCRIPTION: Definitions of perl_matcher member functions that are 
        -:   17:  *                specific to the non-recursive implementation.
        -:   18:  */
        -:   19:
        -:   20:#ifndef BOOST_REGEX_V5_PERL_MATCHER_NON_RECURSIVE_HPP
        -:   21:#define BOOST_REGEX_V5_PERL_MATCHER_NON_RECURSIVE_HPP
        -:   22:
        -:   23:#include <boost/regex/v5/mem_block_cache.hpp>
        -:   24:
        -:   25:#ifdef BOOST_REGEX_MSVC
        -:   26:#  pragma warning(push)
        -:   27:#  pragma warning(disable: 4706 4459)
        -:   28:#if BOOST_REGEX_MSVC < 1910
        -:   29:#pragma warning(disable:4800)
        -:   30:#endif
        -:   31:#endif
        -:   32:
        -:   33:namespace boost{
        -:   34:namespace BOOST_REGEX_DETAIL_NS{
        -:   35:
        -:   36:template <class T>
    #####:   37:inline void inplace_destroy(T* p)
        -:   38:{
        -:   39:   (void)p;  // warning suppression
    #####:   40:   p->~T();
    #####:   41:}
------------------
_ZN5boost13re_detail_50015inplace_destroyINS0_19saved_single_repeatIPKcEEEEvPT_:
function _ZN5boost13re_detail_50015inplace_destroyINS0_19saved_single_repeatIPKcEEEEvPT_ called 0 returned 0% blocks executed 0%
    #####:   37:inline void inplace_destroy(T* p)
        -:   38:{
        -:   39:   (void)p;  // warning suppression
    #####:   40:   p->~T();
    #####:   41:}
------------------
_ZN5boost13re_detail_50015inplace_destroyINS0_17saved_change_caseEEEvPT_:
function _ZN5boost13re_detail_50015inplace_destroyINS0_17saved_change_caseEEEvPT_ called 0 returned 0% blocks executed 0%
    #####:   37:inline void inplace_destroy(T* p)
        -:   38:{
        -:   39:   (void)p;  // warning suppression
    #####:   40:   p->~T();
    #####:   41:}
------------------
_ZN5boost13re_detail_50015inplace_destroyINS0_15saved_recursionINS_13match_resultsIPKcSaINS_9sub_matchIS5_EEEEEEEEEvPT_:
function _ZN5boost13re_detail_50015inplace_destroyINS0_15saved_recursionINS_13match_resultsIPKcSaINS_9sub_matchIS5_EEEEEEEEEvPT_ called 0 returned 0% blocks executed 0%
    #####:   37:inline void inplace_destroy(T* p)
        -:   38:{
        -:   39:   (void)p;  // warning suppression
    #####:   40:   p->~T();
    %%%%%:   40-block 2
call    0 never executed
    #####:   41:}
------------------
_ZN5boost13re_detail_50015inplace_destroyINS0_17saved_extra_blockEEEvPT_:
function _ZN5boost13re_detail_50015inplace_destroyINS0_17saved_extra_blockEEEvPT_ called 0 returned 0% blocks executed 0%
    #####:   37:inline void inplace_destroy(T* p)
        -:   38:{
        -:   39:   (void)p;  // warning suppression
    #####:   40:   p->~T();
    #####:   41:}
------------------
_ZN5boost13re_detail_50015inplace_destroyINS0_14saved_repeaterIPKcEEEEvPT_:
function _ZN5boost13re_detail_50015inplace_destroyINS0_14saved_repeaterIPKcEEEEvPT_ called 0 returned 0% blocks executed 0%
    #####:   37:inline void inplace_destroy(T* p)
        -:   38:{
        -:   39:   (void)p;  // warning suppression
    #####:   40:   p->~T();
    %%%%%:   40-block 2
call    0 never executed
    #####:   41:}
------------------
_ZN5boost13re_detail_50015inplace_destroyINS0_14saved_positionIPKcEEEEvPT_:
function _ZN5boost13re_detail_50015inplace_destroyINS0_14saved_positionIPKcEEEEvPT_ called 0 returned 0% blocks executed 0%
    #####:   37:inline void inplace_destroy(T* p)
        -:   38:{
        -:   39:   (void)p;  // warning suppression
    #####:   40:   p->~T();
    #####:   41:}
------------------
_ZN5boost13re_detail_50015inplace_destroyINS0_15saved_assertionIPKcEEEEvPT_:
function _ZN5boost13re_detail_50015inplace_destroyINS0_15saved_assertionIPKcEEEEvPT_ called 0 returned 0% blocks executed 0%
    #####:   37:inline void inplace_destroy(T* p)
        -:   38:{
        -:   39:   (void)p;  // warning suppression
    #####:   40:   p->~T();
    #####:   41:}
------------------
_ZN5boost13re_detail_50015inplace_destroyINS0_11saved_stateEEEvPT_:
function _ZN5boost13re_detail_50015inplace_destroyINS0_11saved_stateEEEvPT_ called 0 returned 0% blocks executed 0%
    #####:   37:inline void inplace_destroy(T* p)
        -:   38:{
        -:   39:   (void)p;  // warning suppression
    #####:   40:   p->~T();
    #####:   41:}
------------------
_ZN5boost13re_detail_50015inplace_destroyINS0_19saved_matched_parenIPKcEEEEvPT_:
function _ZN5boost13re_detail_50015inplace_destroyINS0_19saved_matched_parenIPKcEEEEvPT_ called 0 returned 0% blocks executed 0%
    #####:   37:inline void inplace_destroy(T* p)
        -:   38:{
        -:   39:   (void)p;  // warning suppression
    #####:   40:   p->~T();
    #####:   41:}
------------------
        -:   42:
        -:   43:struct saved_state
        -:   44:{
        -:   45:   union{
        -:   46:      unsigned int state_id;
        -:   47:      // this padding ensures correct alignment on 64-bit platforms:
        -:   48:      std::size_t padding1;
        -:   49:      std::ptrdiff_t padding2;
        -:   50:      void* padding3;
        -:   51:   };
function _ZN5boost13re_detail_50011saved_stateC2Ej called 0 returned 0% blocks executed 0%
    #####:   52:   saved_state(unsigned i) : state_id(i) {}
        -:   53:};
        -:   54:
        -:   55:template <class BidiIterator>
        -:   56:struct saved_matched_paren : public saved_state
        -:   57:{
        -:   58:   int index;
        -:   59:   sub_match<BidiIterator> sub;
function _ZN5boost13re_detail_50019saved_matched_parenIPKcEC2EiRKNS_9sub_matchIS3_EE called 0 returned 0% blocks executed 0%
    #####:   60:   saved_matched_paren(int i, const sub_match<BidiIterator>& s) : saved_state(1), index(i), sub(s){}
    %%%%%:   60-block 2
call    0 never executed
call    1 never executed
        -:   61:};
        -:   62:
        -:   63:template <class BidiIterator>
        -:   64:struct saved_position : public saved_state
        -:   65:{
        -:   66:   const re_syntax_base* pstate;
        -:   67:   BidiIterator position;
function _ZN5boost13re_detail_50014saved_positionIPKcEC2EPKNS0_14re_syntax_baseES3_i called 0 returned 0% blocks executed 0%
    #####:   68:   saved_position(const re_syntax_base* ps, BidiIterator pos, int i) : saved_state(i), pstate(ps), position(pos){}
    %%%%%:   68-block 2
call    0 never executed
        -:   69:};
        -:   70:
        -:   71:template <class BidiIterator>
        -:   72:struct saved_assertion : public saved_position<BidiIterator>
        -:   73:{
        -:   74:   bool positive;
function _ZN5boost13re_detail_50015saved_assertionIPKcEC2EbPKNS0_14re_syntax_baseES3_ called 0 returned 0% blocks executed 0%
    #####:   75:   saved_assertion(bool p, const re_syntax_base* ps, BidiIterator pos) 
    #####:   76:      : saved_position<BidiIterator>(ps, pos, saved_type_assertion), positive(p){}
    %%%%%:   76-block 2
call    0 never executed
        -:   77:};
        -:   78:
        -:   79:template <class BidiIterator>
        -:   80:struct saved_repeater : public saved_state
        -:   81:{
        -:   82:   repeater_count<BidiIterator> count;
function _ZN5boost13re_detail_50014saved_repeaterIPKcEC2EiPPNS0_14repeater_countIS3_EES3_i called 0 returned 0% blocks executed 0%
    #####:   83:   saved_repeater(int i, repeater_count<BidiIterator>** s, BidiIterator start, int current_recursion_id)
    #####:   84:      : saved_state(saved_state_repeater_count), count(i, s, start, current_recursion_id){}
    %%%%%:   84-block 2
call    0 never executed
call    1 never executed
        -:   85:};
        -:   86:
        -:   87:struct saved_extra_block : public saved_state
        -:   88:{
        -:   89:   saved_state *base, *end;
function _ZN5boost13re_detail_50017saved_extra_blockC2EPNS0_11saved_stateES3_ called 0 returned 0% blocks executed 0%
    #####:   90:   saved_extra_block(saved_state* b, saved_state* e) 
    #####:   91:      : saved_state(saved_state_extra_block), base(b), end(e) {}
    %%%%%:   91-block 2
call    0 never executed
        -:   92:};
        -:   93:
        -:   94:struct save_state_init
        -:   95:{
        -:   96:   saved_state** stack;
function _ZN5boost13re_detail_50015save_state_initC2EPPNS0_11saved_stateES4_ called 0 returned 0% blocks executed 0%
    #####:   97:   save_state_init(saved_state** base, saved_state** end)
    #####:   98:      : stack(base)
        -:   99:   {
    #####:  100:      *base = static_cast<saved_state*>(get_mem_block());
    %%%%%:  100-block 2
call    0 never executed
    #####:  101:      *end = reinterpret_cast<saved_state*>(reinterpret_cast<char*>(*base)+BOOST_REGEX_BLOCKSIZE);
    #####:  102:      --(*end);
    #####:  103:      (void) new (*end)saved_state(0);
call    0 never executed
call    1 never executed
    #####:  104:      BOOST_REGEX_ASSERT(*end > *base);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  104-block 6
call    2 never executed
    #####:  105:   }
function _ZN5boost13re_detail_50015save_state_initD2Ev called 0 returned 0% blocks executed 0%
    #####:  106:   ~save_state_init()
        -:  107:   {
    #####:  108:      put_mem_block(*stack);
    %%%%%:  108-block 2
call    0 never executed
    #####:  109:      *stack = 0;
    #####:  110:   }
        -:  111:};
        -:  112:
        -:  113:template <class BidiIterator>
        -:  114:struct saved_single_repeat : public saved_state
        -:  115:{
        -:  116:   std::size_t count;
        -:  117:   const re_repeat* rep;
        -:  118:   BidiIterator last_position;
function _ZN5boost13re_detail_50019saved_single_repeatIPKcEC2EmPKNS0_9re_repeatES3_i called 0 returned 0% blocks executed 0%
    #####:  119:   saved_single_repeat(std::size_t c, const re_repeat* r, BidiIterator lp, int arg_id) 
    #####:  120:      : saved_state(arg_id), count(c), rep(r), last_position(lp){}
    %%%%%:  120-block 2
call    0 never executed
        -:  121:};
        -:  122:
        -:  123:template <class Results>
        -:  124:struct saved_recursion : public saved_state
        -:  125:{
function _ZN5boost13re_detail_50015saved_recursionINS_13match_resultsIPKcSaINS_9sub_matchIS4_EEEEEEC2EiPKNS0_14re_syntax_baseEPS8_SD_ called 0 returned 0% blocks executed 0%
    #####:  126:   saved_recursion(int idx, const re_syntax_base* p, Results* pr, Results* pr2) 
    #####:  127:      : saved_state(14), recursion_id(idx), preturn_address(p), internal_results(*pr), prior_results(*pr2) {}
    %%%%%:  127-block 2
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  127-block 5
    $$$$$:  127-block 6
call    5 never executed
        -:  128:   int recursion_id;
        -:  129:   const re_syntax_base* preturn_address;
        -:  130:   Results internal_results, prior_results;
        -:  131:};
        -:  132:
        -:  133:struct saved_change_case : public saved_state
        -:  134:{
        -:  135:   bool icase;
function _ZN5boost13re_detail_50017saved_change_caseC2Eb called 0 returned 0% blocks executed 0%
    #####:  136:   saved_change_case(bool c) : saved_state(18), icase(c) {}
    %%%%%:  136-block 2
call    0 never executed
        -:  137:};
        -:  138:
        -:  139:struct incrementer
        -:  140:{
function _ZN5boost13re_detail_50011incrementerC2EPj called 0 returned 0% blocks executed 0%
    #####:  141:   incrementer(unsigned* pu) : m_pu(pu) { ++*m_pu; }
function _ZN5boost13re_detail_50011incrementerD2Ev called 0 returned 0% blocks executed 0%
    #####:  142:   ~incrementer() { --*m_pu; }
function _ZN5boost13re_detail_50011incrementergtEj called 0 returned 0% blocks executed 0%
    #####:  143:   bool operator > (unsigned i) { return *m_pu > i; }
    %%%%%:  143-block 2
        -:  144:private:
        -:  145:   unsigned* m_pu;
        -:  146:};
        -:  147:
        -:  148:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16match_all_statesEv called 0 returned 0% blocks executed 0%
    #####:  149:bool perl_matcher<BidiIterator, Allocator, traits>::match_all_states()
        -:  150:{
        -:  151:   static matcher_proc_type const s_match_vtable[34] = 
        -:  152:   {
        -:  153:      (&perl_matcher<BidiIterator, Allocator, traits>::match_startmark),
        -:  154:      &perl_matcher<BidiIterator, Allocator, traits>::match_endmark,
        -:  155:      &perl_matcher<BidiIterator, Allocator, traits>::match_literal,
        -:  156:      &perl_matcher<BidiIterator, Allocator, traits>::match_start_line,
        -:  157:      &perl_matcher<BidiIterator, Allocator, traits>::match_end_line,
        -:  158:      &perl_matcher<BidiIterator, Allocator, traits>::match_wild,
        -:  159:      &perl_matcher<BidiIterator, Allocator, traits>::match_match,
        -:  160:      &perl_matcher<BidiIterator, Allocator, traits>::match_word_boundary,
        -:  161:      &perl_matcher<BidiIterator, Allocator, traits>::match_within_word,
        -:  162:      &perl_matcher<BidiIterator, Allocator, traits>::match_word_start,
        -:  163:      &perl_matcher<BidiIterator, Allocator, traits>::match_word_end,
        -:  164:      &perl_matcher<BidiIterator, Allocator, traits>::match_buffer_start,
        -:  165:      &perl_matcher<BidiIterator, Allocator, traits>::match_buffer_end,
        -:  166:      &perl_matcher<BidiIterator, Allocator, traits>::match_backref,
        -:  167:      &perl_matcher<BidiIterator, Allocator, traits>::match_long_set,
        -:  168:      &perl_matcher<BidiIterator, Allocator, traits>::match_set,
        -:  169:      &perl_matcher<BidiIterator, Allocator, traits>::match_jump,
        -:  170:      &perl_matcher<BidiIterator, Allocator, traits>::match_alt,
        -:  171:      &perl_matcher<BidiIterator, Allocator, traits>::match_rep,
        -:  172:      &perl_matcher<BidiIterator, Allocator, traits>::match_combining,
        -:  173:      &perl_matcher<BidiIterator, Allocator, traits>::match_soft_buffer_end,
        -:  174:      &perl_matcher<BidiIterator, Allocator, traits>::match_restart_continue,
        -:  175:      // Although this next line *should* be evaluated at compile time, in practice
        -:  176:      // some compilers (VC++) emit run-time initialisation which breaks thread
        -:  177:      // safety, so use a dispatch function instead:
        -:  178:      //(::boost::is_random_access_iterator<BidiIterator>::value ? &perl_matcher<BidiIterator, Allocator, traits>::match_dot_repeat_fast : &perl_matcher<BidiIterator, Allocator, traits>::match_dot_repeat_slow),
        -:  179:      &perl_matcher<BidiIterator, Allocator, traits>::match_dot_repeat_dispatch,
        -:  180:      &perl_matcher<BidiIterator, Allocator, traits>::match_char_repeat,
        -:  181:      &perl_matcher<BidiIterator, Allocator, traits>::match_set_repeat,
        -:  182:      &perl_matcher<BidiIterator, Allocator, traits>::match_long_set_repeat,
        -:  183:      &perl_matcher<BidiIterator, Allocator, traits>::match_backstep,
        -:  184:      &perl_matcher<BidiIterator, Allocator, traits>::match_assert_backref,
        -:  185:      &perl_matcher<BidiIterator, Allocator, traits>::match_toggle_case,
        -:  186:      &perl_matcher<BidiIterator, Allocator, traits>::match_recursion,
        -:  187:      &perl_matcher<BidiIterator, Allocator, traits>::match_fail,
        -:  188:      &perl_matcher<BidiIterator, Allocator, traits>::match_accept,
        -:  189:      &perl_matcher<BidiIterator, Allocator, traits>::match_commit,
        -:  190:      &perl_matcher<BidiIterator, Allocator, traits>::match_then,
        -:  191:   };
    #####:  192:   incrementer inc(&m_recursions);
    %%%%%:  192-block 2
call    0 never executed
    #####:  193:   if(inc > 80)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  194:      raise_error(traits_inst, regex_constants::error_complexity);
    %%%%%:  194-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  195:   push_recursion_stopper();
    %%%%%:  195-block 6
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  196:   do{
    #####:  197:      while(pstate)
    %%%%%:  197-block 7
    %%%%%:  197-block 35
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  198:      {
    #####:  199:         matcher_proc_type proc = s_match_vtable[pstate->type];
    #####:  200:         ++state_count;
    #####:  201:         if(!(this->*proc)())
    %%%%%:  201-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  201-block 9
    %%%%%:  201-block 10
    %%%%%:  201-block 11
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  201-block 12
branch  5 never executed (fallthrough)
branch  6 never executed
        -:  202:         {
    #####:  203:            if(state_count > max_state_count)
    %%%%%:  203-block 13
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  204:               raise_error(traits_inst, regex_constants::error_complexity);
    %%%%%:  204-block 14
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  205:            if((m_match_flags & match_partial) && (position == last) && (position != search_base))
    %%%%%:  205-block 15
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  205-block 17
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  205-block 18
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  205-block 19
    %%%%%:  205-block 20
    %%%%%:  205-block 21
branch  7 never executed (fallthrough)
branch  8 never executed
    #####:  206:               m_has_partial_match = true;
    %%%%%:  206-block 22
    #####:  207:            bool successful_unwind = unwind(false);
    %%%%%:  207-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  208:            if((m_match_flags & match_partial) && (position == last) && (position != search_base))
    %%%%%:  208-block 24
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  208-block 26
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  208-block 27
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  208-block 28
    %%%%%:  208-block 29
    %%%%%:  208-block 30
branch  7 never executed (fallthrough)
branch  8 never executed
    #####:  209:               m_has_partial_match = true;
    %%%%%:  209-block 31
    #####:  210:            if(!successful_unwind)
    %%%%%:  210-block 32
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  211:               return m_recursive_result;
    %%%%%:  211-block 33
        -:  212:         }
        -:  213:      }
    #####:  214:   }while(unwind(true));
    %%%%%:  214-block 36
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  214-block 37
branch  3 never executed
branch  4 never executed (fallthrough)
    #####:  215:   return m_recursive_result;
    %%%%%:  215-block 38
    #####:  216:}
    %%%%%:  216-block 39
call    0 never executed
    $$$$$:  216-block 43
call    1 never executed
        -:  217:
        -:  218:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE12extend_stackEv called 0 returned 0% blocks executed 0%
    #####:  219:void perl_matcher<BidiIterator, Allocator, traits>::extend_stack()
        -:  220:{
    #####:  221:   if(used_block_count)
    %%%%%:  221-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  222:   {
    #####:  223:      --used_block_count;
        -:  224:      saved_state* stack_base;
        -:  225:      saved_state* backup_state;
    #####:  226:      stack_base = static_cast<saved_state*>(get_mem_block());
    %%%%%:  226-block 3
call    0 never executed
    #####:  227:      backup_state = reinterpret_cast<saved_state*>(reinterpret_cast<char*>(stack_base)+BOOST_REGEX_BLOCKSIZE);
    #####:  228:      saved_extra_block* block = static_cast<saved_extra_block*>(backup_state);
    #####:  229:      --block;
    #####:  230:      (void) new (block) saved_extra_block(m_stack_base, m_backup_state);
call    0 never executed
call    1 never executed
    #####:  231:      m_stack_base = stack_base;
    #####:  232:      m_backup_state = block;
        -:  233:   }
        -:  234:   else
    #####:  235:      raise_error(traits_inst, regex_constants::error_stack);
    %%%%%:  235-block 7
call    0 never executed
    #####:  236:}
        -:  237:
        -:  238:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE18push_matched_parenEiRKS5_ called 0 returned 0% blocks executed 0%
    #####:  239:inline void perl_matcher<BidiIterator, Allocator, traits>::push_matched_paren(int index, const sub_match<BidiIterator>& sub)
        -:  240:{
        -:  241:   //BOOST_REGEX_ASSERT(index);
    #####:  242:   saved_matched_paren<BidiIterator>* pmp = static_cast<saved_matched_paren<BidiIterator>*>(m_backup_state);
    #####:  243:   --pmp;
    #####:  244:   if(pmp < m_stack_base)
    %%%%%:  244-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  245:   {
    #####:  246:      extend_stack();
    %%%%%:  246-block 3
call    0 never executed
    #####:  247:      pmp = static_cast<saved_matched_paren<BidiIterator>*>(m_backup_state);
    #####:  248:      --pmp;
        -:  249:   }
    #####:  250:   (void) new (pmp)saved_matched_paren<BidiIterator>(index, sub);
    %%%%%:  250-block 5
call    0 never executed
call    1 never executed
    #####:  251:   m_backup_state = pmp;
    #####:  252:}
        -:  253:
        -:  254:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16push_case_changeEb called 0 returned 0% blocks executed 0%
    #####:  255:inline void perl_matcher<BidiIterator, Allocator, traits>::push_case_change(bool c)
        -:  256:{
        -:  257:   //BOOST_REGEX_ASSERT(index);
    #####:  258:   saved_change_case* pmp = static_cast<saved_change_case*>(m_backup_state);
    #####:  259:   --pmp;
    #####:  260:   if(pmp < m_stack_base)
    %%%%%:  260-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  261:   {
    #####:  262:      extend_stack();
    %%%%%:  262-block 3
call    0 never executed
    #####:  263:      pmp = static_cast<saved_change_case*>(m_backup_state);
    #####:  264:      --pmp;
        -:  265:   }
    #####:  266:   (void) new (pmp)saved_change_case(c);
    %%%%%:  266-block 5
call    0 never executed
call    1 never executed
    #####:  267:   m_backup_state = pmp;
    #####:  268:}
        -:  269:
        -:  270:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE22push_recursion_stopperEv called 0 returned 0% blocks executed 0%
    #####:  271:inline void perl_matcher<BidiIterator, Allocator, traits>::push_recursion_stopper()
        -:  272:{
    #####:  273:   saved_state* pmp = m_backup_state;
    #####:  274:   --pmp;
    #####:  275:   if(pmp < m_stack_base)
    %%%%%:  275-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  276:   {
    #####:  277:      extend_stack();
    %%%%%:  277-block 3
call    0 never executed
    #####:  278:      pmp = m_backup_state;
    #####:  279:      --pmp;
        -:  280:   }
    #####:  281:   (void) new (pmp)saved_state(saved_type_recurse);
    %%%%%:  281-block 5
call    0 never executed
call    1 never executed
    #####:  282:   m_backup_state = pmp;
    #####:  283:}
        -:  284:
        -:  285:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE14push_assertionEPKNS0_14re_syntax_baseEb called 0 returned 0% blocks executed 0%
    #####:  286:inline void perl_matcher<BidiIterator, Allocator, traits>::push_assertion(const re_syntax_base* ps, bool positive)
        -:  287:{
    #####:  288:   saved_assertion<BidiIterator>* pmp = static_cast<saved_assertion<BidiIterator>*>(m_backup_state);
    #####:  289:   --pmp;
    #####:  290:   if(pmp < m_stack_base)
    %%%%%:  290-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  291:   {
    #####:  292:      extend_stack();
    %%%%%:  292-block 3
call    0 never executed
    #####:  293:      pmp = static_cast<saved_assertion<BidiIterator>*>(m_backup_state);
    #####:  294:      --pmp;
        -:  295:   }
    #####:  296:   (void) new (pmp)saved_assertion<BidiIterator>(positive, ps, position);
    %%%%%:  296-block 5
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$:  296-block 8
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$:  296-block 9
call    6 never executed
    #####:  297:   m_backup_state = pmp;
    #####:  298:}
    %%%%%:  298-block 7
        -:  299:
        -:  300:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE8push_altEPKNS0_14re_syntax_baseE called 0 returned 0% blocks executed 0%
    #####:  301:inline void perl_matcher<BidiIterator, Allocator, traits>::push_alt(const re_syntax_base* ps)
        -:  302:{
    #####:  303:   saved_position<BidiIterator>* pmp = static_cast<saved_position<BidiIterator>*>(m_backup_state);
    #####:  304:   --pmp;
    #####:  305:   if(pmp < m_stack_base)
    %%%%%:  305-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  306:   {
    #####:  307:      extend_stack();
    %%%%%:  307-block 3
call    0 never executed
    #####:  308:      pmp = static_cast<saved_position<BidiIterator>*>(m_backup_state);
    #####:  309:      --pmp;
        -:  310:   }
    #####:  311:   (void) new (pmp)saved_position<BidiIterator>(ps, position, saved_state_alt);
    %%%%%:  311-block 5
call    0 never executed
call    1 never executed
    #####:  312:   m_backup_state = pmp;
    #####:  313:}
        -:  314:
        -:  315:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE22push_non_greedy_repeatEPKNS0_14re_syntax_baseE called 0 returned 0% blocks executed 0%
    #####:  316:inline void perl_matcher<BidiIterator, Allocator, traits>::push_non_greedy_repeat(const re_syntax_base* ps)
        -:  317:{
    #####:  318:   saved_position<BidiIterator>* pmp = static_cast<saved_position<BidiIterator>*>(m_backup_state);
    #####:  319:   --pmp;
    #####:  320:   if(pmp < m_stack_base)
    %%%%%:  320-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  321:   {
    #####:  322:      extend_stack();
    %%%%%:  322-block 3
call    0 never executed
    #####:  323:      pmp = static_cast<saved_position<BidiIterator>*>(m_backup_state);
    #####:  324:      --pmp;
        -:  325:   }
    #####:  326:   (void) new (pmp)saved_position<BidiIterator>(ps, position, saved_state_non_greedy_long_repeat);
    %%%%%:  326-block 5
call    0 never executed
call    1 never executed
    #####:  327:   m_backup_state = pmp;
    #####:  328:}
        -:  329:
        -:  330:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE19push_repeater_countEiPPNS0_14repeater_countIS3_EE called 0 returned 0% blocks executed 0%
    #####:  331:inline void perl_matcher<BidiIterator, Allocator, traits>::push_repeater_count(int i, repeater_count<BidiIterator>** s)
        -:  332:{
    #####:  333:   saved_repeater<BidiIterator>* pmp = static_cast<saved_repeater<BidiIterator>*>(m_backup_state);
    #####:  334:   --pmp;
    #####:  335:   if(pmp < m_stack_base)
    %%%%%:  335-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  336:   {
    #####:  337:      extend_stack();
    %%%%%:  337-block 3
call    0 never executed
    #####:  338:      pmp = static_cast<saved_repeater<BidiIterator>*>(m_backup_state);
    #####:  339:      --pmp;
        -:  340:   }
    #####:  341:   (void) new (pmp)saved_repeater<BidiIterator>(i, s, position, this->recursion_stack.empty() ? (INT_MIN + 3) : this->recursion_stack.back().idx);
    %%%%%:  341-block 5
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  341-block 8
    %%%%%:  341-block 9
call    4 never executed
    %%%%%:  341-block 11
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    $$$$$:  341-block 13
branch  8 never executed (fallthrough)
branch  9 never executed
    $$$$$:  341-block 14
call   10 never executed
    #####:  342:   m_backup_state = pmp;
    #####:  343:}
    %%%%%:  343-block 12
        -:  344:
        -:  345:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE18push_single_repeatEmPKNS0_9re_repeatES3_i called 0 returned 0% blocks executed 0%
    #####:  346:inline void perl_matcher<BidiIterator, Allocator, traits>::push_single_repeat(std::size_t c, const re_repeat* r, BidiIterator last_position, int state_id)
        -:  347:{
    #####:  348:   saved_single_repeat<BidiIterator>* pmp = static_cast<saved_single_repeat<BidiIterator>*>(m_backup_state);
    #####:  349:   --pmp;
    #####:  350:   if(pmp < m_stack_base)
    %%%%%:  350-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  351:   {
    #####:  352:      extend_stack();
    %%%%%:  352-block 3
call    0 never executed
    #####:  353:      pmp = static_cast<saved_single_repeat<BidiIterator>*>(m_backup_state);
    #####:  354:      --pmp;
        -:  355:   }
    #####:  356:   (void) new (pmp)saved_single_repeat<BidiIterator>(c, r, last_position, state_id);
    %%%%%:  356-block 5
call    0 never executed
call    1 never executed
    #####:  357:   m_backup_state = pmp;
    #####:  358:}
        -:  359:
        -:  360:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE14push_recursionEiPKNS0_14re_syntax_baseEPNS_13match_resultsIS3_S6_EESH_ called 0 returned 0% blocks executed 0%
    #####:  361:inline void perl_matcher<BidiIterator, Allocator, traits>::push_recursion(int idx, const re_syntax_base* p, results_type* presults, results_type* presults2)
        -:  362:{
    #####:  363:   saved_recursion<results_type>* pmp = static_cast<saved_recursion<results_type>*>(m_backup_state);
    #####:  364:   --pmp;
    #####:  365:   if(pmp < m_stack_base)
    %%%%%:  365-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  366:   {
    #####:  367:      extend_stack();
    %%%%%:  367-block 3
call    0 never executed
    #####:  368:      pmp = static_cast<saved_recursion<results_type>*>(m_backup_state);
    #####:  369:      --pmp;
        -:  370:   }
    #####:  371:   (void) new (pmp)saved_recursion<results_type>(idx, p, presults, presults2);
    %%%%%:  371-block 5
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$:  371-block 8
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$:  371-block 9
call    6 never executed
    #####:  372:   m_backup_state = pmp;
    #####:  373:}
    %%%%%:  373-block 7
        -:  374:
        -:  375:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE17match_toggle_caseEv called 0 returned 0% blocks executed 0%
    #####:  376:bool perl_matcher<BidiIterator, Allocator, traits>::match_toggle_case()
        -:  377:{
        -:  378:   // change our case sensitivity:
    #####:  379:   push_case_change(this->icase);
    %%%%%:  379-block 2
call    0 never executed
    #####:  380:   this->icase = static_cast<const re_case*>(pstate)->icase;
    #####:  381:   pstate = pstate->next.p;
    #####:  382:   return true;
        -:  383:}
        -:  384:
        -:  385:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE15match_startmarkEv called 0 returned 0% blocks executed 0%
    #####:  386:bool perl_matcher<BidiIterator, Allocator, traits>::match_startmark()
        -:  387:{
    #####:  388:   int index = static_cast<const re_brace*>(pstate)->index;
    #####:  389:   icase = static_cast<const re_brace*>(pstate)->icase;
    #####:  390:   switch(index)
    %%%%%:  390-block 2
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  391:   {
    #####:  392:   case 0:
    #####:  393:      pstate = pstate->next.p;
    #####:  394:      break;
    %%%%%:  394-block 3
    #####:  395:   case -1:
        -:  396:   case -2:
        -:  397:      {
        -:  398:         // forward lookahead assert:
    #####:  399:         const re_syntax_base* next_pstate = static_cast<const re_jump*>(pstate->next.p)->alt.p->next.p;
    #####:  400:         pstate = pstate->next.p->next.p;
    #####:  401:         push_assertion(next_pstate, index == -1);
    %%%%%:  401-block 4
call    0 never executed
    #####:  402:         break;
        -:  403:      }
    #####:  404:   case -3:
        -:  405:      {
        -:  406:         // independent sub-expression, currently this is always recursive:
    #####:  407:         bool old_independent = m_independent;
    #####:  408:         m_independent = true;
    #####:  409:         const re_syntax_base* next_pstate = static_cast<const re_jump*>(pstate->next.p)->alt.p->next.p;
    #####:  410:         pstate = pstate->next.p->next.p;
    #####:  411:         bool r = false;
        -:  412:#if !defined(BOOST_NO_EXCEPTIONS)
        -:  413:      try{
        -:  414:#endif
    #####:  415:         r = match_all_states();
    %%%%%:  415-block 6
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  416:         if(!r && !m_independent)
    %%%%%:  416-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  416-block 8
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  417:         {
        -:  418:            // Must be unwinding from a COMMIT/SKIP/PRUNE and the independent 
        -:  419:            // sub failed, need to unwind everything else:
    #####:  420:            while (m_backup_state->state_id)
    %%%%%:  420-block 9
    %%%%%:  420-block 11
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  421:               unwind(false);
    %%%%%:  421-block 10
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  422:            return false;
    %%%%%:  422-block 12
        -:  423:         }
        -:  424:#if !defined(BOOST_NO_EXCEPTIONS)
        -:  425:      }
    =====:  426:      catch(...)
    $$$$$:  426-block 44
    $$$$$:  426-block 45
call    0 never executed
    $$$$$:  426-block 50
call    1 never executed
        -:  427:      {
    =====:  428:         pstate = next_pstate;
        -:  429:         // unwind all pushed states, apart from anything else this
        -:  430:         // ensures that all the states are correctly destructed
        -:  431:         // not just the memory freed.
    =====:  432:         while(unwind(true)) {}
    $$$$$:  432-block 47
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  432-block 48
branch  3 never executed
branch  4 never executed (fallthrough)
    =====:  433:         throw;
    $$$$$:  433-block 49
call    0 never executed
        -:  434:      }
        -:  435:#endif
    #####:  436:      pstate = next_pstate;
    #####:  437:      m_independent = old_independent;
        -:  438:#ifdef BOOST_REGEX_MATCH_EXTRA
        -:  439:         if(r && (m_match_flags & match_extra))
        -:  440:         {
        -:  441:            //
        -:  442:            // our captures have been stored in *m_presult
        -:  443:            // we need to unpack them, and insert them
        -:  444:            // back in the right order when we unwind the stack:
        -:  445:            //
        -:  446:            match_results<BidiIterator, Allocator> temp_match(*m_presult);
        -:  447:            unsigned i;
        -:  448:            for(i = 0; i < temp_match.size(); ++i)
        -:  449:               (*m_presult)[i].get_captures().clear();
        -:  450:            // match everything else:
        -:  451:#if !defined(BOOST_NO_EXCEPTIONS)
        -:  452:            try{
        -:  453:#endif
        -:  454:               r = match_all_states();
        -:  455:#if !defined(BOOST_NO_EXCEPTIONS)
        -:  456:            }
        -:  457:            catch(...)
        -:  458:            {
        -:  459:               pstate = next_pstate;
        -:  460:               // unwind all pushed states, apart from anything else this
        -:  461:               // ensures that all the states are correctly destructed
        -:  462:               // not just the memory freed.
        -:  463:               while(unwind(true)) {}
        -:  464:               throw;
        -:  465:            }
        -:  466:#endif
        -:  467:         // now place the stored captures back:
        -:  468:            for(i = 0; i < temp_match.size(); ++i)
        -:  469:            {
        -:  470:               typedef typename sub_match<BidiIterator>::capture_sequence_type seq;
        -:  471:               seq& s1 = (*m_presult)[i].get_captures();
        -:  472:               const seq& s2 = temp_match[i].captures();
        -:  473:               s1.insert(
        -:  474:                  s1.end(), 
        -:  475:                  s2.begin(), 
        -:  476:                  s2.end());
        -:  477:            }
        -:  478:         }
        -:  479:#endif
    #####:  480:         return r;
    %%%%%:  480-block 13
        -:  481:      }
    #####:  482:   case -4:
        -:  483:      {
        -:  484:      // conditional expression:
    #####:  485:      const re_alt* alt = static_cast<const re_alt*>(pstate->next.p);
    #####:  486:      BOOST_REGEX_ASSERT(alt->type == syntax_element_alt);
    %%%%%:  486-block 14
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  486-block 15
call    2 never executed
    #####:  487:      pstate = alt->next.p;
    #####:  488:      if(pstate->type == syntax_element_assert_backref)
    %%%%%:  488-block 16
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  489:      {
    #####:  490:         if(!match_assert_backref())
    %%%%%:  490-block 17
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  491:            pstate = alt->alt.p;
    %%%%%:  491-block 19
    #####:  492:         break;
    %%%%%:  492-block 20
        -:  493:      }
        -:  494:      else
        -:  495:      {
        -:  496:         // zero width assertion, have to match this recursively:
    #####:  497:         BOOST_REGEX_ASSERT(pstate->type == syntax_element_startmark);
    %%%%%:  497-block 21
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  497-block 22
call    2 never executed
    #####:  498:         bool negated = static_cast<const re_brace*>(pstate)->index == -2;
    #####:  499:         BidiIterator saved_position = position;
    #####:  500:         const re_syntax_base* next_pstate = static_cast<const re_jump*>(pstate->next.p)->alt.p->next.p;
    #####:  501:         pstate = pstate->next.p->next.p;
        -:  502:#if !defined(BOOST_NO_EXCEPTIONS)
        -:  503:         try{
        -:  504:#endif
    #####:  505:            bool r = match_all_states();
    %%%%%:  505-block 23
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  506:            position = saved_position;
    #####:  507:            if(negated)
    %%%%%:  507-block 24
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  508:               r = !r;
    %%%%%:  508-block 25
    #####:  509:            if(r)
    %%%%%:  509-block 26
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  510:               pstate = next_pstate;
    %%%%%:  510-block 27
        -:  511:            else
    #####:  512:               pstate = alt->alt.p;
    %%%%%:  512-block 28
        -:  513:#if !defined(BOOST_NO_EXCEPTIONS)
        -:  514:         }
    =====:  515:         catch(...)
    $$$$$:  515-block 52
    $$$$$:  515-block 53
call    0 never executed
    $$$$$:  515-block 58
call    1 never executed
        -:  516:         {
    =====:  517:            pstate = next_pstate;
        -:  518:            // unwind all pushed states, apart from anything else this
        -:  519:            // ensures that all the states are correctly destructed
        -:  520:            // not just the memory freed.
    =====:  521:            while(unwind(true)){}
    $$$$$:  521-block 55
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  521-block 56
branch  3 never executed
branch  4 never executed (fallthrough)
    =====:  522:            throw;
    $$$$$:  522-block 57
call    0 never executed
        -:  523:         }
        -:  524:#endif
    #####:  525:         break;
    %%%%%:  525-block 29
        -:  526:      }
        -:  527:      }
    #####:  528:   case -5:
        -:  529:      {
    #####:  530:         push_matched_paren(0, (*m_presult)[0]);
    %%%%%:  530-block 30
call    0 never executed
call    1 never executed
    #####:  531:         m_presult->set_first(position, 0, true);
call    0 never executed
    #####:  532:         pstate = pstate->next.p;
    #####:  533:         break;
        -:  534:      }
    #####:  535:   default:
        -:  536:   {
    #####:  537:      BOOST_REGEX_ASSERT(index > 0);
    %%%%%:  537-block 34
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  537-block 35
call    2 never executed
    #####:  538:      if((m_match_flags & match_nosubs) == 0)
    %%%%%:  538-block 36
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  539:      {
    #####:  540:         push_matched_paren(index, (*m_presult)[index]);
    %%%%%:  540-block 38
call    0 never executed
call    1 never executed
    #####:  541:         m_presult->set_first(position, index);
call    0 never executed
        -:  542:      }
    #####:  543:      pstate = pstate->next.p;
    #####:  544:      break;
    %%%%%:  544-block 41
        -:  545:   }
        -:  546:   }
    #####:  547:   return true;
    %%%%%:  547-block 42
        -:  548:}
        -:  549:
        -:  550:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_altEv called 0 returned 0% blocks executed 0%
    #####:  551:bool perl_matcher<BidiIterator, Allocator, traits>::match_alt()
        -:  552:{
        -:  553:   bool take_first, take_second;
    #####:  554:   const re_alt* jmp = static_cast<const re_alt*>(pstate);
        -:  555:
        -:  556:   // find out which of these two alternatives we need to take:
    #####:  557:   if(position == last)
    %%%%%:  557-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  558:   {
    #####:  559:      take_first = jmp->can_be_null & mask_take;
    #####:  560:      take_second = jmp->can_be_null & mask_skip;
    %%%%%:  560-block 3
        -:  561:   }
        -:  562:   else
        -:  563:   {
    #####:  564:      take_first = can_start(*position, jmp->_map, (unsigned char)mask_take);
    %%%%%:  564-block 4
call    0 never executed
    #####:  565:      take_second = can_start(*position, jmp->_map, (unsigned char)mask_skip);
call    0 never executed
        -:  566:  }
        -:  567:
    #####:  568:   if(take_first)
    %%%%%:  568-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  569:   {
        -:  570:      // we can take the first alternative,
        -:  571:      // see if we need to push next alternative:
    #####:  572:      if(take_second)
    %%%%%:  572-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  573:      {
    #####:  574:         push_alt(jmp->alt.p);
    %%%%%:  574-block 8
call    0 never executed
        -:  575:      }
    #####:  576:      pstate = pstate->next.p;
    #####:  577:      return true;
    %%%%%:  577-block 9
        -:  578:   }
    #####:  579:   if(take_second)
    %%%%%:  579-block 10
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  580:   {
    #####:  581:      pstate = jmp->alt.p;
    #####:  582:      return true;
    %%%%%:  582-block 11
        -:  583:   }
    #####:  584:   return false;  // neither option is possible
    %%%%%:  584-block 12
        -:  585:}
        -:  586:
        -:  587:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_repEv called 0 returned 0% blocks executed 0%
    #####:  588:bool perl_matcher<BidiIterator, Allocator, traits>::match_rep()
        -:  589:{
        -:  590:#ifdef BOOST_REGEX_MSVC
        -:  591:#pragma warning(push)
        -:  592:#pragma warning(disable:4127 4244)
        -:  593:#endif
        -:  594:#ifdef BOOST_BORLANDC
        -:  595:#pragma option push -w-8008 -w-8066 -w-8004
        -:  596:#endif
    #####:  597:   const re_repeat* rep = static_cast<const re_repeat*>(pstate);
        -:  598:
        -:  599:   // find out which of these two alternatives we need to take:
        -:  600:   bool take_first, take_second;
    #####:  601:   if(position == last)
    %%%%%:  601-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  602:   {
    #####:  603:      take_first = rep->can_be_null & mask_take;
    #####:  604:      take_second = rep->can_be_null & mask_skip;
    %%%%%:  604-block 3
        -:  605:   }
        -:  606:   else
        -:  607:   {
    #####:  608:      take_first = can_start(*position, rep->_map, (unsigned char)mask_take);
    %%%%%:  608-block 4
call    0 never executed
    #####:  609:      take_second = can_start(*position, rep->_map, (unsigned char)mask_skip);
call    0 never executed
        -:  610:   }
        -:  611:
    #####:  612:   if((m_backup_state->state_id != saved_state_repeater_count) 
    #####:  613:      || (static_cast<saved_repeater<BidiIterator>*>(m_backup_state)->count.get_id() != rep->state_id)
    %%%%%:  613-block 7
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  614:      || (next_count->get_id() != rep->state_id))
    %%%%%:  614-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  614-block 9
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  614-block 11
    %%%%%:  614-block 12
    %%%%%:  614-block 13
branch  5 never executed (fallthrough)
branch  6 never executed
        -:  615:   {
        -:  616:      // we're moving to a different repeat from the last
        -:  617:      // one, so set up a counter object:
    #####:  618:      push_repeater_count(rep->state_id, &next_count);
    %%%%%:  618-block 14
call    0 never executed
        -:  619:   }
        -:  620:   //
        -:  621:   // If we've had at least one repeat already, and the last one 
        -:  622:   // matched the NULL string then set the repeat count to
        -:  623:   // maximum:
        -:  624:   //
    #####:  625:   next_count->check_null_repeat(position, rep->max);
    %%%%%:  625-block 15
call    0 never executed
        -:  626:
    #####:  627:   if(next_count->get_count() < rep->min)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  628:   {
        -:  629:      // we must take the repeat:
    #####:  630:      if(take_first)
    %%%%%:  630-block 18
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  631:      {
        -:  632:         // increase the counter:
    #####:  633:         ++(*next_count);
    %%%%%:  633-block 19
call    0 never executed
    #####:  634:         pstate = rep->next.p;
    #####:  635:         return true;
        -:  636:      }
    #####:  637:      return false;
    %%%%%:  637-block 21
        -:  638:   }
        -:  639:
    #####:  640:   bool greedy = (rep->greedy) && (!(m_match_flags & regex_constants::match_any) || m_independent);   
    %%%%%:  640-block 22
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  640-block 23
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  640-block 25
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  640-block 26
    %%%%%:  640-block 27
    #####:  641:   if(greedy)
    %%%%%:  641-block 28
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  642:   {
        -:  643:      // try and take the repeat if we can:
    #####:  644:      if((next_count->get_count() < rep->max) && take_first)
    %%%%%:  644-block 29
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  644-block 31
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  644-block 32
    %%%%%:  644-block 33
    %%%%%:  644-block 34
branch  5 never executed (fallthrough)
branch  6 never executed
        -:  645:      {
    #####:  646:         if(take_second)
    %%%%%:  646-block 35
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  647:         {
        -:  648:            // store position in case we fail:
    #####:  649:            push_alt(rep->alt.p);
    %%%%%:  649-block 36
call    0 never executed
        -:  650:         }
        -:  651:         // increase the counter:
    #####:  652:         ++(*next_count);
    %%%%%:  652-block 37
call    0 never executed
    #####:  653:         pstate = rep->next.p;
    #####:  654:         return true;
        -:  655:      }
    #####:  656:      else if(take_second)
    %%%%%:  656-block 39
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  657:      {
    #####:  658:         pstate = rep->alt.p;
    #####:  659:         return true;
    %%%%%:  659-block 40
        -:  660:      }
    #####:  661:      return false; // can't take anything, fail...
    %%%%%:  661-block 41
        -:  662:   }
        -:  663:   else // non-greedy
        -:  664:   {
        -:  665:      // try and skip the repeat if we can:
    #####:  666:      if(take_second)
    %%%%%:  666-block 42
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  667:      {
    #####:  668:         if((next_count->get_count() < rep->max) && take_first)
    %%%%%:  668-block 43
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  668-block 45
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  668-block 46
    %%%%%:  668-block 47
    %%%%%:  668-block 48
branch  5 never executed (fallthrough)
branch  6 never executed
        -:  669:         {
        -:  670:            // store position in case we fail:
    #####:  671:            push_non_greedy_repeat(rep->next.p);
    %%%%%:  671-block 49
call    0 never executed
        -:  672:         }
    #####:  673:         pstate = rep->alt.p;
    #####:  674:         return true;
    %%%%%:  674-block 50
        -:  675:      }
    #####:  676:      if((next_count->get_count() < rep->max) && take_first)
    %%%%%:  676-block 51
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  676-block 53
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  676-block 54
    %%%%%:  676-block 55
    %%%%%:  676-block 56
branch  5 never executed (fallthrough)
branch  6 never executed
        -:  677:      {
        -:  678:         // increase the counter:
    #####:  679:         ++(*next_count);
    %%%%%:  679-block 57
call    0 never executed
    #####:  680:         pstate = rep->next.p;
    #####:  681:         return true;
        -:  682:      }
        -:  683:   }
    #####:  684:   return false;
    %%%%%:  684-block 59
        -:  685:#ifdef BOOST_BORLANDC
        -:  686:#pragma option pop
        -:  687:#endif
        -:  688:#ifdef BOOST_REGEX_MSVC
        -:  689:#pragma warning(pop)
        -:  690:#endif
        -:  691:}
        -:  692:
        -:  693:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE21match_dot_repeat_slowEv called 0 returned 0% blocks executed 0%
    #####:  694:bool perl_matcher<BidiIterator, Allocator, traits>::match_dot_repeat_slow()
        -:  695:{
    #####:  696:   std::size_t count = 0;
    #####:  697:   const re_repeat* rep = static_cast<const re_repeat*>(pstate);
    #####:  698:   re_syntax_base* psingle = rep->next.p;
        -:  699:   // match compulsory repeats first:
    #####:  700:   while(count < rep->min)
    %%%%%:  700-block 2
    %%%%%:  700-block 7
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  701:   {
    #####:  702:      pstate = psingle;
    #####:  703:      if(!match_wild())
    %%%%%:  703-block 3
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  704:         return false;
    %%%%%:  704-block 5
    #####:  705:      ++count;
    %%%%%:  705-block 6
        -:  706:   }
    #####:  707:   bool greedy = (rep->greedy) && (!(m_match_flags & regex_constants::match_any) || m_independent);   
    %%%%%:  707-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  707-block 9
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  707-block 11
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  707-block 12
    %%%%%:  707-block 13
    #####:  708:   if(greedy)
    %%%%%:  708-block 14
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  709:   {
        -:  710:      // repeat for as long as we can:
    #####:  711:      while(count < rep->max)
    %%%%%:  711-block 15
    %%%%%:  711-block 20
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  712:      {
    #####:  713:         pstate = psingle;
    #####:  714:         if(!match_wild())
    %%%%%:  714-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  715:            break;
    %%%%%:  715-block 18
    #####:  716:         ++count;
    %%%%%:  716-block 19
        -:  717:      }
        -:  718:      // remember where we got to if this is a leading repeat:
    #####:  719:      if((rep->leading) && (count < rep->max))
    %%%%%:  719-block 21
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  719-block 22
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  720:         restart = position;
    %%%%%:  720-block 23
        -:  721:      // push backtrack info if available:
    #####:  722:      if(count - rep->min)
    %%%%%:  722-block 24
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  723:         push_single_repeat(count, rep, position, saved_state_greedy_single_repeat);
    %%%%%:  723-block 25
call    0 never executed
        -:  724:      // jump to next state:
    #####:  725:      pstate = rep->alt.p;
    #####:  726:      return true;
    %%%%%:  726-block 26
        -:  727:   }
        -:  728:   else
        -:  729:   {
        -:  730:      // non-greedy, push state and return true if we can skip:
    #####:  731:      if(count < rep->max)
    %%%%%:  731-block 27
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  732:         push_single_repeat(count, rep, position, saved_state_rep_slow_dot);
    %%%%%:  732-block 28
call    0 never executed
    #####:  733:      pstate = rep->alt.p;
    #####:  734:      return (position == last) ? (rep->can_be_null & mask_skip) : can_start(*position, rep->_map, mask_skip);
    %%%%%:  734-block 29
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  734-block 30
    %%%%%:  734-block 31
call    2 never executed
    %%%%%:  734-block 33
        -:  735:   }
        -:  736:}
        -:  737:
        -:  738:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE21match_dot_repeat_fastEv called 0 returned 0% blocks executed 0%
    #####:  739:bool perl_matcher<BidiIterator, Allocator, traits>::match_dot_repeat_fast()
        -:  740:{
    #####:  741:   if(m_match_flags & match_not_dot_null)
    %%%%%:  741-block 2
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  742:      return match_dot_repeat_slow();
    %%%%%:  742-block 4
call    0 never executed
    #####:  743:   if((static_cast<const re_dot*>(pstate->next.p)->mask & match_any_mask) == 0)
    %%%%%:  743-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  744:      return match_dot_repeat_slow();
    %%%%%:  744-block 7
call    0 never executed
        -:  745:
    #####:  746:   const re_repeat* rep = static_cast<const re_repeat*>(pstate);
    #####:  747:   bool greedy = (rep->greedy) && (!(m_match_flags & regex_constants::match_any) || m_independent);   
    %%%%%:  747-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  747-block 10
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  747-block 12
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  747-block 13
    %%%%%:  747-block 14
    #####:  748:   std::size_t count = static_cast<std::size_t>((std::min)(static_cast<std::size_t>(std::distance(position, last)), greedy ? rep->max : rep->min));
    %%%%%:  748-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  748-block 16
    %%%%%:  748-block 17
    %%%%%:  748-block 18
    %%%%%:  748-block 24
call    2 never executed
    #####:  749:   if(rep->min > count)
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  750:   {
    #####:  751:      position = last;
    #####:  752:      return false;  // not enough text left to match
    %%%%%:  752-block 26
        -:  753:   }
    #####:  754:   std::advance(position, count);
    %%%%%:  754-block 27
        -:  755:
    #####:  756:   if(greedy)
    %%%%%:  756-block 31
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  757:   {
    #####:  758:      if((rep->leading) && (count < rep->max))
    %%%%%:  758-block 32
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  758-block 33
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  759:         restart = position;
    %%%%%:  759-block 34
        -:  760:      // push backtrack info if available:
    #####:  761:      if(count - rep->min)
    %%%%%:  761-block 35
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  762:         push_single_repeat(count, rep, position, saved_state_greedy_single_repeat);
    %%%%%:  762-block 36
call    0 never executed
        -:  763:      // jump to next state:
    #####:  764:      pstate = rep->alt.p;
    #####:  765:      return true;
    %%%%%:  765-block 37
        -:  766:   }
        -:  767:   else
        -:  768:   {
        -:  769:      // non-greedy, push state and return true if we can skip:
    #####:  770:      if(count < rep->max)
    %%%%%:  770-block 38
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  771:         push_single_repeat(count, rep, position, saved_state_rep_fast_dot);
    %%%%%:  771-block 39
call    0 never executed
    #####:  772:      pstate = rep->alt.p;
    #####:  773:      return (position == last) ? (rep->can_be_null & mask_skip) : can_start(*position, rep->_map, mask_skip);
    %%%%%:  773-block 40
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  773-block 41
    %%%%%:  773-block 42
call    2 never executed
    %%%%%:  773-block 44
        -:  774:   }
        -:  775:}
        -:  776:
        -:  777:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE17match_char_repeatEv called 0 returned 0% blocks executed 0%
    #####:  778:bool perl_matcher<BidiIterator, Allocator, traits>::match_char_repeat()
        -:  779:{
        -:  780:#ifdef BOOST_REGEX_MSVC
        -:  781:#pragma warning(push)
        -:  782:#pragma warning(disable:4127)
        -:  783:#endif
        -:  784:#ifdef BOOST_BORLANDC
        -:  785:#pragma option push -w-8008 -w-8066 -w-8004
        -:  786:#endif
    #####:  787:   const re_repeat* rep = static_cast<const re_repeat*>(pstate);
    #####:  788:   BOOST_REGEX_ASSERT(1 == static_cast<const re_literal*>(rep->next.p)->length);
    %%%%%:  788-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  788-block 3
call    2 never executed
    #####:  789:   const char_type what = *reinterpret_cast<const char_type*>(static_cast<const re_literal*>(rep->next.p) + 1);
    #####:  790:   std::size_t count = 0;
        -:  791:   //
        -:  792:   // start by working out how much we can skip:
        -:  793:   //
    #####:  794:   bool greedy = (rep->greedy) && (!(m_match_flags & regex_constants::match_any) || m_independent);   
    %%%%%:  794-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  794-block 5
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  794-block 7
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  794-block 8
    %%%%%:  794-block 9
    #####:  795:   std::size_t desired = greedy ? rep->max : rep->min;
    %%%%%:  795-block 10
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  795-block 11
    %%%%%:  795-block 12
    %%%%%:  795-block 13
        -:  796:   if(::boost::is_random_access_iterator<BidiIterator>::value)
        -:  797:   {
    #####:  798:      BidiIterator end = position;
        -:  799:      // Move end forward by "desired", preferably without using distance or advance if we can
        -:  800:      // as these can be slow for some iterator types.
    #####:  801:      std::size_t len = (desired == (std::numeric_limits<std::size_t>::max)()) ? 0u : std::distance(position, last);
    %%%%%:  801-block 14
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  801-block 16
    %%%%%:  801-block 22
    %%%%%:  801-block 23
    #####:  802:      if(desired >= len)
    %%%%%:  802-block 24
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  803:         end = last;
    %%%%%:  803-block 25
        -:  804:      else
        -:  805:         std::advance(end, desired);
    #####:  806:      BidiIterator origin(position);
    #####:  807:      while((position != end) && (traits_inst.translate(*position, icase) == what))
    %%%%%:  807-block 31
    %%%%%:  807-block 33
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  807-block 34
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  807-block 35
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  807-block 36
    %%%%%:  807-block 37
    %%%%%:  807-block 38
branch  7 never executed
branch  8 never executed (fallthrough)
        -:  808:      {
    #####:  809:         ++position;
    %%%%%:  809-block 32
        -:  810:      }
    #####:  811:      count = (unsigned)std::distance(origin, position);
    %%%%%:  811-block 39
    %%%%%:  811-block 45
        -:  812:   }
        -:  813:   else
        -:  814:   {
        -:  815:      while((count < desired) && (position != last) && (traits_inst.translate(*position, icase) == what))
        -:  816:      {
        -:  817:         ++position;
        -:  818:         ++count;
        -:  819:      }
        -:  820:   }
        -:  821:
    #####:  822:   if(count < rep->min)
    %%%%%:  822-block 46
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  823:      return false;
    %%%%%:  823-block 47
        -:  824:
    #####:  825:   if(greedy)
    %%%%%:  825-block 48
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  826:   {
    #####:  827:      if((rep->leading) && (count < rep->max))
    %%%%%:  827-block 49
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  827-block 50
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  828:         restart = position;
    %%%%%:  828-block 51
        -:  829:      // push backtrack info if available:
    #####:  830:      if(count - rep->min)
    %%%%%:  830-block 52
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  831:         push_single_repeat(count, rep, position, saved_state_greedy_single_repeat);
    %%%%%:  831-block 53
call    0 never executed
        -:  832:      // jump to next state:
    #####:  833:      pstate = rep->alt.p;
    #####:  834:      return true;
    %%%%%:  834-block 54
        -:  835:   }
        -:  836:   else
        -:  837:   {
        -:  838:      // non-greedy, push state and return true if we can skip:
    #####:  839:      if(count < rep->max)
    %%%%%:  839-block 55
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  840:         push_single_repeat(count, rep, position, saved_state_rep_char);
    %%%%%:  840-block 56
call    0 never executed
    #####:  841:      pstate = rep->alt.p;
    #####:  842:      return (position == last) ? (rep->can_be_null & mask_skip) : can_start(*position, rep->_map, mask_skip);
    %%%%%:  842-block 57
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  842-block 58
    %%%%%:  842-block 59
call    2 never executed
    %%%%%:  842-block 61
        -:  843:   }
        -:  844:#ifdef BOOST_BORLANDC
        -:  845:#pragma option pop
        -:  846:#endif
        -:  847:#ifdef BOOST_REGEX_MSVC
        -:  848:#pragma warning(pop)
        -:  849:#endif
        -:  850:}
        -:  851:
        -:  852:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16match_set_repeatEv called 0 returned 0% blocks executed 0%
    #####:  853:bool perl_matcher<BidiIterator, Allocator, traits>::match_set_repeat()
        -:  854:{
        -:  855:#ifdef BOOST_REGEX_MSVC
        -:  856:#pragma warning(push)
        -:  857:#pragma warning(disable:4127)
        -:  858:#endif
        -:  859:#ifdef BOOST_BORLANDC
        -:  860:#pragma option push -w-8008 -w-8066 -w-8004
        -:  861:#endif
    #####:  862:   const re_repeat* rep = static_cast<const re_repeat*>(pstate);
    #####:  863:   const unsigned char* map = static_cast<const re_set*>(rep->next.p)->_map;
    #####:  864:   std::size_t count = 0;
        -:  865:   //
        -:  866:   // start by working out how much we can skip:
        -:  867:   //
    #####:  868:   bool greedy = (rep->greedy) && (!(m_match_flags & regex_constants::match_any) || m_independent);   
    %%%%%:  868-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  868-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  868-block 5
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  868-block 6
    %%%%%:  868-block 7
    #####:  869:   std::size_t desired = greedy ? rep->max : rep->min;
    %%%%%:  869-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  869-block 9
    %%%%%:  869-block 10
    %%%%%:  869-block 11
        -:  870:   if(::boost::is_random_access_iterator<BidiIterator>::value)
        -:  871:   {
    #####:  872:      BidiIterator end = position;
        -:  873:      // Move end forward by "desired", preferably without using distance or advance if we can
        -:  874:      // as these can be slow for some iterator types.
    #####:  875:      std::size_t len = (desired == (std::numeric_limits<std::size_t>::max)()) ? 0u : std::distance(position, last);
    %%%%%:  875-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  875-block 14
    %%%%%:  875-block 20
    %%%%%:  875-block 21
    #####:  876:      if(desired >= len)
    %%%%%:  876-block 22
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  877:         end = last;
    %%%%%:  877-block 23
        -:  878:      else
        -:  879:         std::advance(end, desired);
    #####:  880:      BidiIterator origin(position);
    #####:  881:      while((position != end) && map[static_cast<unsigned char>(traits_inst.translate(*position, icase))])
    %%%%%:  881-block 29
    %%%%%:  881-block 31
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  881-block 32
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  881-block 33
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  881-block 34
    %%%%%:  881-block 35
    %%%%%:  881-block 36
branch  7 never executed
branch  8 never executed (fallthrough)
        -:  882:      {
    #####:  883:         ++position;
    %%%%%:  883-block 30
        -:  884:      }
    #####:  885:      count = (unsigned)std::distance(origin, position);
    %%%%%:  885-block 37
    %%%%%:  885-block 43
        -:  886:   }
        -:  887:   else
        -:  888:   {
        -:  889:      while((count < desired) && (position != last) && map[static_cast<unsigned char>(traits_inst.translate(*position, icase))])
        -:  890:      {
        -:  891:         ++position;
        -:  892:         ++count;
        -:  893:      }
        -:  894:   }
        -:  895:
    #####:  896:   if(count < rep->min)
    %%%%%:  896-block 44
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  897:      return false;
    %%%%%:  897-block 45
        -:  898:
    #####:  899:   if(greedy)
    %%%%%:  899-block 46
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  900:   {
    #####:  901:      if((rep->leading) && (count < rep->max))
    %%%%%:  901-block 47
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  901-block 48
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  902:         restart = position;
    %%%%%:  902-block 49
        -:  903:      // push backtrack info if available:
    #####:  904:      if(count - rep->min)
    %%%%%:  904-block 50
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  905:         push_single_repeat(count, rep, position, saved_state_greedy_single_repeat);
    %%%%%:  905-block 51
call    0 never executed
        -:  906:      // jump to next state:
    #####:  907:      pstate = rep->alt.p;
    #####:  908:      return true;
    %%%%%:  908-block 52
        -:  909:   }
        -:  910:   else
        -:  911:   {
        -:  912:      // non-greedy, push state and return true if we can skip:
    #####:  913:      if(count < rep->max)
    %%%%%:  913-block 53
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  914:         push_single_repeat(count, rep, position, saved_state_rep_short_set);
    %%%%%:  914-block 54
call    0 never executed
    #####:  915:      pstate = rep->alt.p;
    #####:  916:      return (position == last) ? (rep->can_be_null & mask_skip) : can_start(*position, rep->_map, mask_skip);
    %%%%%:  916-block 55
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  916-block 56
    %%%%%:  916-block 57
call    2 never executed
    %%%%%:  916-block 59
        -:  917:   }
        -:  918:#ifdef BOOST_BORLANDC
        -:  919:#pragma option pop
        -:  920:#endif
        -:  921:#ifdef BOOST_REGEX_MSVC
        -:  922:#pragma warning(pop)
        -:  923:#endif
        -:  924:}
        -:  925:
        -:  926:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE21match_long_set_repeatEv called 0 returned 0% blocks executed 0%
    #####:  927:bool perl_matcher<BidiIterator, Allocator, traits>::match_long_set_repeat()
        -:  928:{
        -:  929:#ifdef BOOST_REGEX_MSVC
        -:  930:#pragma warning(push)
        -:  931:#pragma warning(disable:4127)
        -:  932:#endif
        -:  933:#ifdef BOOST_BORLANDC
        -:  934:#pragma option push -w-8008 -w-8066 -w-8004
        -:  935:#endif
        -:  936:   typedef typename traits::char_class_type m_type;
    #####:  937:   const re_repeat* rep = static_cast<const re_repeat*>(pstate);
    #####:  938:   const re_set_long<m_type>* set = static_cast<const re_set_long<m_type>*>(pstate->next.p);
    #####:  939:   std::size_t count = 0;
        -:  940:   //
        -:  941:   // start by working out how much we can skip:
        -:  942:   //
    #####:  943:   bool greedy = (rep->greedy) && (!(m_match_flags & regex_constants::match_any) || m_independent);   
    %%%%%:  943-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  943-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  943-block 5
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  943-block 6
    %%%%%:  943-block 7
    #####:  944:   std::size_t desired = greedy ? rep->max : rep->min;
    %%%%%:  944-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  944-block 9
    %%%%%:  944-block 10
    %%%%%:  944-block 11
        -:  945:   if(::boost::is_random_access_iterator<BidiIterator>::value)
        -:  946:   {
    #####:  947:      BidiIterator end = position;
        -:  948:      // Move end forward by "desired", preferably without using distance or advance if we can
        -:  949:      // as these can be slow for some iterator types.
    #####:  950:      std::size_t len = (desired == (std::numeric_limits<std::size_t>::max)()) ? 0u : std::distance(position, last);
    %%%%%:  950-block 12
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  950-block 14
    %%%%%:  950-block 20
    %%%%%:  950-block 21
    #####:  951:      if(desired >= len)
    %%%%%:  951-block 22
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  952:         end = last;
    %%%%%:  952-block 23
        -:  953:      else
        -:  954:         std::advance(end, desired);
    #####:  955:      BidiIterator origin(position);
    #####:  956:      while((position != end) && (position != re_is_set_member(position, last, set, re.get_data(), icase)))
    %%%%%:  956-block 29
    %%%%%:  956-block 31
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  956-block 32
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  956-block 33
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  956-block 34
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%:  956-block 35
    %%%%%:  956-block 36
    %%%%%:  956-block 37
branch 10 never executed
branch 11 never executed (fallthrough)
        -:  957:      {
    #####:  958:         ++position;
    %%%%%:  958-block 30
        -:  959:      }
    #####:  960:      count = (unsigned)std::distance(origin, position);
    %%%%%:  960-block 38
    %%%%%:  960-block 44
        -:  961:   }
        -:  962:   else
        -:  963:   {
        -:  964:      while((count < desired) && (position != last) && (position != re_is_set_member(position, last, set, re.get_data(), icase)))
        -:  965:      {
        -:  966:         ++position;
        -:  967:         ++count;
        -:  968:      }
        -:  969:   }
        -:  970:
    #####:  971:   if(count < rep->min)
    %%%%%:  971-block 45
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  972:      return false;
    %%%%%:  972-block 46
        -:  973:
    #####:  974:   if(greedy)
    %%%%%:  974-block 47
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  975:   {
    #####:  976:      if((rep->leading) && (count < rep->max))
    %%%%%:  976-block 48
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  976-block 49
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  977:         restart = position;
    %%%%%:  977-block 50
        -:  978:      // push backtrack info if available:
    #####:  979:      if(count - rep->min)
    %%%%%:  979-block 51
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  980:         push_single_repeat(count, rep, position, saved_state_greedy_single_repeat);
    %%%%%:  980-block 52
call    0 never executed
        -:  981:      // jump to next state:
    #####:  982:      pstate = rep->alt.p;
    #####:  983:      return true;
    %%%%%:  983-block 53
        -:  984:   }
        -:  985:   else
        -:  986:   {
        -:  987:      // non-greedy, push state and return true if we can skip:
    #####:  988:      if(count < rep->max)
    %%%%%:  988-block 54
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  989:         push_single_repeat(count, rep, position, saved_state_rep_long_set);
    %%%%%:  989-block 55
call    0 never executed
    #####:  990:      pstate = rep->alt.p;
    #####:  991:      return (position == last) ? (rep->can_be_null & mask_skip) : can_start(*position, rep->_map, mask_skip);
    %%%%%:  991-block 56
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  991-block 57
    %%%%%:  991-block 58
call    2 never executed
    %%%%%:  991-block 60
        -:  992:   }
        -:  993:#ifdef BOOST_BORLANDC
        -:  994:#pragma option pop
        -:  995:#endif
        -:  996:#ifdef BOOST_REGEX_MSVC
        -:  997:#pragma warning(pop)
        -:  998:#endif
        -:  999:}
        -: 1000:
        -: 1001:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE15match_recursionEv called 0 returned 0% blocks executed 0%
    #####: 1002:bool perl_matcher<BidiIterator, Allocator, traits>::match_recursion()
        -: 1003:{
    #####: 1004:   BOOST_REGEX_ASSERT(pstate->type == syntax_element_recurse);
    %%%%%: 1004-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1004-block 3
call    2 never executed
        -: 1005:   //
        -: 1006:   // See if we've seen this recursion before at this location, if we have then
        -: 1007:   // we need to prevent infinite recursion:
        -: 1008:   //
    #####: 1009:   for(typename std::vector<recursion_info<results_type> >::reverse_iterator i = recursion_stack.rbegin(); i != recursion_stack.rend(); ++i)
    %%%%%: 1009-block 4
call    0 never executed
    %%%%%: 1009-block 11
call    1 never executed
    %%%%%: 1009-block 12
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
        -: 1010:   {
    #####: 1011:      if(i->idx == static_cast<const re_brace*>(static_cast<const re_jump*>(pstate)->alt.p)->index)
    %%%%%: 1011-block 5
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1011-block 6
branch  3 never executed (fallthrough)
branch  4 never executed
        -: 1012:      {
    #####: 1013:         if(i->location_of_start == position)
    %%%%%: 1013-block 7
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1013-block 8
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1014:            return false;
    %%%%%: 1014-block 9
    #####: 1015:         break;
    %%%%%: 1015-block 10
        -: 1016:      }
        -: 1017:   }
        -: 1018:   //
        -: 1019:   // Backup call stack:
        -: 1020:   //
    #####: 1021:   push_recursion_pop();
    %%%%%: 1021-block 16
call    0 never executed
        -: 1022:   //
        -: 1023:   // Set new call stack:
        -: 1024:   //
    #####: 1025:   if(recursion_stack.capacity() == 0)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1026:   {
    #####: 1027:      recursion_stack.reserve(50);
    %%%%%: 1027-block 19
call    0 never executed
        -: 1028:   }
    #####: 1029:   recursion_stack.push_back(recursion_info<results_type>());
    %%%%%: 1029-block 20
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1029-block 21
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1029-block 22
call    6 never executed
    $$$$$: 1029-block 32
call    7 never executed
    #####: 1030:   recursion_stack.back().preturn_address = pstate->next.p;
call    0 never executed
    #####: 1031:   recursion_stack.back().results = *m_presult;
call    0 never executed
call    1 never executed
    #####: 1032:   pstate = static_cast<const re_jump*>(pstate)->alt.p;
    #####: 1033:   recursion_stack.back().idx = static_cast<const re_brace*>(pstate)->index;
call    0 never executed
    #####: 1034:   recursion_stack.back().location_of_start = position;
call    0 never executed
        -: 1035:   //if(static_cast<const re_recurse*>(pstate)->state_id > 0)
        -: 1036:   {
    #####: 1037:      push_repeater_count(-(2 + static_cast<const re_brace*>(pstate)->index), &next_count);
call    0 never executed
        -: 1038:   }
        -: 1039:
    #####: 1040:   return true;
        -: 1041:}
        -: 1042:
        -: 1043:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE13match_endmarkEv called 0 returned 0% blocks executed 0%
    #####: 1044:bool perl_matcher<BidiIterator, Allocator, traits>::match_endmark()
        -: 1045:{
    #####: 1046:   int index = static_cast<const re_brace*>(pstate)->index;
    #####: 1047:   icase = static_cast<const re_brace*>(pstate)->icase;
    #####: 1048:   if(index > 0)
    %%%%%: 1048-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1049:   {
    #####: 1050:      if((m_match_flags & match_nosubs) == 0)
    %%%%%: 1050-block 3
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1051:      {
    #####: 1052:         m_presult->set_second(position, index);
    %%%%%: 1052-block 5
call    0 never executed
        -: 1053:      }
    #####: 1054:      if(!recursion_stack.empty())
    %%%%%: 1054-block 6
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1055:      {
    #####: 1056:         if(index == recursion_stack.back().idx)
    %%%%%: 1056-block 8
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1057:         {
    #####: 1058:            pstate = recursion_stack.back().preturn_address;
    %%%%%: 1058-block 10
call    0 never executed
    #####: 1059:            *m_presult = recursion_stack.back().results;
call    0 never executed
call    1 never executed
    #####: 1060:            push_recursion(recursion_stack.back().idx, recursion_stack.back().preturn_address, m_presult, &recursion_stack.back().results);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1061:            recursion_stack.pop_back();
call    0 never executed
    #####: 1062:            push_repeater_count(-(2 + index), &next_count);
call    0 never executed
        -: 1063:         }
        -: 1064:      }
        -: 1065:   }
    #####: 1066:   else if((index < 0) && (index != -4))
    %%%%%: 1066-block 19
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1066-block 20
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1067:   {
        -: 1068:      // matched forward lookahead:
    #####: 1069:      pstate = 0;
    #####: 1070:      return true;
    %%%%%: 1070-block 21
        -: 1071:   }
    #####: 1072:   pstate = pstate->next.p;
    #####: 1073:   return true;
    %%%%%: 1073-block 22
        -: 1074:}
        -: 1075:
        -: 1076:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE11match_matchEv called 0 returned 0% blocks executed 0%
    #####: 1077:bool perl_matcher<BidiIterator, Allocator, traits>::match_match()
        -: 1078:{
    #####: 1079:   if(!recursion_stack.empty())
    %%%%%: 1079-block 2
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1080:   {
    #####: 1081:      BOOST_REGEX_ASSERT(0 == recursion_stack.back().idx);
    %%%%%: 1081-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1081-block 6
call    3 never executed
    #####: 1082:      pstate = recursion_stack.back().preturn_address;
    %%%%%: 1082-block 7
call    0 never executed
    #####: 1083:      push_recursion(recursion_stack.back().idx, recursion_stack.back().preturn_address, m_presult, &recursion_stack.back().results);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1084:      *m_presult = recursion_stack.back().results;
call    0 never executed
call    1 never executed
    #####: 1085:      recursion_stack.pop_back();
call    0 never executed
    #####: 1086:      return true;
        -: 1087:   }
    #####: 1088:   if((m_match_flags & match_not_null) && (position == (*m_presult)[0].first))
    %%%%%: 1088-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1088-block 18
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1088-block 20
    %%%%%: 1088-block 21
    %%%%%: 1088-block 22
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 1089:      return false;
    %%%%%: 1089-block 23
    #####: 1090:   if((m_match_flags & match_all) && (position != last))
    %%%%%: 1090-block 24
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1090-block 26
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1090-block 27
    %%%%%: 1090-block 28
    %%%%%: 1090-block 29
branch  5 never executed (fallthrough)
branch  6 never executed
    #####: 1091:      return false;
    %%%%%: 1091-block 30
    #####: 1092:   if((m_match_flags & regex_constants::match_not_initial_null) && (position == search_base))
    %%%%%: 1092-block 31
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1092-block 33
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1092-block 34
    %%%%%: 1092-block 35
    %%%%%: 1092-block 36
branch  5 never executed (fallthrough)
branch  6 never executed
    #####: 1093:      return false;
    %%%%%: 1093-block 37
    #####: 1094:   m_presult->set_second(position);
    %%%%%: 1094-block 38
call    0 never executed
    #####: 1095:   pstate = 0;
    #####: 1096:   m_has_found_match = true;
    #####: 1097:   if((m_match_flags & match_posix) == match_posix)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1098:   {
    #####: 1099:      m_result.maybe_assign(*m_presult);
    %%%%%: 1099-block 41
call    0 never executed
    #####: 1100:      if((m_match_flags & match_any) == 0)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1101:         return false;
    %%%%%: 1101-block 44
        -: 1102:   }
        -: 1103:#ifdef BOOST_REGEX_MATCH_EXTRA
        -: 1104:   if(match_extra & m_match_flags)
        -: 1105:   {
        -: 1106:      for(unsigned i = 0; i < m_presult->size(); ++i)
        -: 1107:         if((*m_presult)[i].matched)
        -: 1108:            ((*m_presult)[i]).get_captures().push_back((*m_presult)[i]);
        -: 1109:   }
        -: 1110:#endif
    #####: 1111:   return true;
    %%%%%: 1111-block 45
        -: 1112:}
        -: 1113:
        -: 1114:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE12match_commitEv called 0 returned 0% blocks executed 0%
    #####: 1115:bool perl_matcher<BidiIterator, Allocator, traits>::match_commit()
        -: 1116:{
        -: 1117:   // Ideally we would just junk all the states that are on the stack,
        -: 1118:   // however we might not unwind correctly in that case, so for now,
        -: 1119:   // just mark that we don't backtrack into whatever is left (or rather
        -: 1120:   // we'll unwind it unconditionally without pausing to try other matches).
        -: 1121:
    #####: 1122:   switch(static_cast<const re_commit*>(pstate)->action)
    %%%%%: 1122-block 2
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1123:   {
    #####: 1124:   case commit_commit:
    #####: 1125:      restart = last;
    #####: 1126:      break;
    %%%%%: 1126-block 3
    #####: 1127:   case commit_skip:
    #####: 1128:      if(base != position)
    %%%%%: 1128-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1129:      {
    #####: 1130:         restart = position;
        -: 1131:         // Have to decrement restart since it will get incremented again later:
    #####: 1132:         --restart;
    %%%%%: 1132-block 5
        -: 1133:      }
    #####: 1134:      break;
    %%%%%: 1134-block 6
    #####: 1135:   case commit_prune:
    #####: 1136:      break;
    %%%%%: 1136-block 7
        -: 1137:   }
        -: 1138:
    #####: 1139:   saved_state* pmp = m_backup_state;
    #####: 1140:   --pmp;
    #####: 1141:   if(pmp < m_stack_base)
    %%%%%: 1141-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1142:   {
    #####: 1143:      extend_stack();
    %%%%%: 1143-block 9
call    0 never executed
    #####: 1144:      pmp = m_backup_state;
    #####: 1145:      --pmp;
        -: 1146:   }
    #####: 1147:   (void) new (pmp)saved_state(16);
    %%%%%: 1147-block 11
call    0 never executed
call    1 never executed
    #####: 1148:   m_backup_state = pmp;
    #####: 1149:   pstate = pstate->next.p;
    #####: 1150:   return true;
        -: 1151:}
        -: 1152:
        -: 1153:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE10match_thenEv called 0 returned 0% blocks executed 0%
    #####: 1154:bool perl_matcher<BidiIterator, Allocator, traits>::match_then()
        -: 1155:{
        -: 1156:   // Just leave a mark that we need to skip to next alternative:
    #####: 1157:   saved_state* pmp = m_backup_state;
    #####: 1158:   --pmp;
    #####: 1159:   if(pmp < m_stack_base)
    %%%%%: 1159-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1160:   {
    #####: 1161:      extend_stack();
    %%%%%: 1161-block 3
call    0 never executed
    #####: 1162:      pmp = m_backup_state;
    #####: 1163:      --pmp;
        -: 1164:   }
    #####: 1165:   (void) new (pmp)saved_state(17);
    %%%%%: 1165-block 5
call    0 never executed
call    1 never executed
    #####: 1166:   m_backup_state = pmp;
    #####: 1167:   pstate = pstate->next.p;
    #####: 1168:   return true;
        -: 1169:}
        -: 1170:
        -: 1171:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16skip_until_parenEib called 0 returned 0% blocks executed 0%
    #####: 1172:bool perl_matcher<BidiIterator, Allocator, traits>::skip_until_paren(int index, bool have_match)
        -: 1173:{
    #####: 1174:   while(pstate)
    %%%%%: 1174-block 2
    %%%%%: 1174-block 21
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1175:   {
    #####: 1176:      if(pstate->type == syntax_element_endmark)
    %%%%%: 1176-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1177:      {
    #####: 1178:         if(static_cast<const re_brace*>(pstate)->index == index)
    %%%%%: 1178-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1179:         {
    #####: 1180:            if(have_match)
    %%%%%: 1180-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1181:               return this->match_endmark();
    %%%%%: 1181-block 6
call    0 never executed
    #####: 1182:            pstate = pstate->next.p;
    #####: 1183:            return true;
    %%%%%: 1183-block 8
        -: 1184:         }
        -: 1185:         else
        -: 1186:         {
        -: 1187:            // Unenclosed closing ), occurs when (*ACCEPT) is inside some other 
        -: 1188:            // parenthesis which may or may not have other side effects associated with it.
    #####: 1189:            const re_syntax_base* sp = pstate;
    #####: 1190:            match_endmark();
    %%%%%: 1190-block 9
call    0 never executed
    #####: 1191:            if(!pstate)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1192:            {
    #####: 1193:               unwind(true);
    %%%%%: 1193-block 11
call    0 never executed
        -: 1194:               // unwind may leave pstate NULL if we've unwound a forward lookahead, in which
        -: 1195:               // case just move to the next state and keep looking...
    #####: 1196:               if (!pstate)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1197:                  pstate = sp->next.p;
    %%%%%: 1197-block 13
        -: 1198:            }
        -: 1199:         }
    #####: 1200:         continue;
    #####: 1201:      }
    %%%%%: 1201-block 14
    #####: 1202:      else if(pstate->type == syntax_element_match)
    %%%%%: 1202-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1203:         return true;
    %%%%%: 1203-block 16
    #####: 1204:      else if(pstate->type == syntax_element_startmark)
    %%%%%: 1204-block 17
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1205:      {
    #####: 1206:         int idx = static_cast<const re_brace*>(pstate)->index;
    #####: 1207:         pstate = pstate->next.p;
    #####: 1208:         skip_until_paren(idx, false);
    %%%%%: 1208-block 18
call    0 never executed
    #####: 1209:         continue;
    #####: 1210:      }
    #####: 1211:      pstate = pstate->next.p;
    %%%%%: 1211-block 20
        -: 1212:   }
    #####: 1213:   return true;
    %%%%%: 1213-block 22
        -: 1214:}
        -: 1215:
        -: 1216:/****************************************************************************
        -: 1217:
        -: 1218:Unwind and associated procedures follow, these perform what normal stack
        -: 1219:unwinding does in the recursive implementation.
        -: 1220:
        -: 1221:****************************************************************************/
        -: 1222:
        -: 1223:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE6unwindEb called 0 returned 0% blocks executed 0%
    #####: 1224:bool perl_matcher<BidiIterator, Allocator, traits>::unwind(bool have_match)
        -: 1225:{
        -: 1226:   static unwind_proc_type const s_unwind_table[19] = 
        -: 1227:   {
        -: 1228:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_end,
        -: 1229:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_paren,
        -: 1230:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_recursion_stopper,
        -: 1231:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_assertion,
        -: 1232:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_alt,
        -: 1233:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_repeater_counter,
        -: 1234:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_extra_block,
        -: 1235:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_greedy_single_repeat,
        -: 1236:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_slow_dot_repeat,
        -: 1237:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_fast_dot_repeat,
        -: 1238:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_char_repeat,
        -: 1239:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_short_set_repeat,
        -: 1240:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_long_set_repeat,
        -: 1241:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_non_greedy_repeat,
        -: 1242:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_recursion,
        -: 1243:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_recursion_pop,
        -: 1244:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_commit,
        -: 1245:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_then,
        -: 1246:      &perl_matcher<BidiIterator, Allocator, traits>::unwind_case,
        -: 1247:   };
        -: 1248:
    #####: 1249:   m_recursive_result = have_match;
    #####: 1250:   m_unwound_lookahead = false;
    #####: 1251:   m_unwound_alt = false;
    %%%%%: 1251-block 2
        -: 1252:   unwind_proc_type unwinder;
        -: 1253:   bool cont;
        -: 1254:   //
        -: 1255:   // keep unwinding our stack until we have something to do:
        -: 1256:   //
    #####: 1257:   do
        -: 1258:   {
    #####: 1259:      unwinder = s_unwind_table[m_backup_state->state_id];
    #####: 1260:      cont = (this->*unwinder)(m_recursive_result);
    %%%%%: 1260-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1260-block 4
    %%%%%: 1260-block 5
    %%%%%: 1260-block 6
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 1260-block 7
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 1261:   }while(cont);
        -: 1262:   //
        -: 1263:   // return true if we have more states to try:
        -: 1264:   //
    #####: 1265:   return pstate ? true : false;
    %%%%%: 1265-block 8
    %%%%%: 1265-block 9
        -: 1266:}
        -: 1267:
        -: 1268:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE10unwind_endEb called 0 returned 0% blocks executed 0%
    #####: 1269:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_end(bool)
        -: 1270:{
    #####: 1271:   pstate = 0;   // nothing left to search
    #####: 1272:   return false; // end of stack nothing more to search
    %%%%%: 1272-block 2
        -: 1273:}
        -: 1274:
        -: 1275:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE11unwind_caseEb called 0 returned 0% blocks executed 0%
    #####: 1276:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_case(bool)
        -: 1277:{
    #####: 1278:   saved_change_case* pmp = static_cast<saved_change_case*>(m_backup_state);
    #####: 1279:   icase = pmp->icase;
    #####: 1280:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(pmp++);
    %%%%%: 1280-block 2
call    0 never executed
    #####: 1281:   m_backup_state = pmp;
    #####: 1282:   return true;
        -: 1283:}
        -: 1284:
        -: 1285:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE12unwind_parenEb called 0 returned 0% blocks executed 0%
    #####: 1286:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_paren(bool have_match)
        -: 1287:{
    #####: 1288:   saved_matched_paren<BidiIterator>* pmp = static_cast<saved_matched_paren<BidiIterator>*>(m_backup_state);
        -: 1289:   // restore previous values if no match was found:
    #####: 1290:   if(!have_match)
    %%%%%: 1290-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1291:   {
    #####: 1292:      m_presult->set_first(pmp->sub.first, pmp->index, pmp->index == 0);
    %%%%%: 1292-block 3
call    0 never executed
    #####: 1293:      m_presult->set_second(pmp->sub.second, pmp->index, pmp->sub.matched, pmp->index == 0);
call    0 never executed
        -: 1294:   }
        -: 1295:#ifdef BOOST_REGEX_MATCH_EXTRA
        -: 1296:   //
        -: 1297:   // we have a match, push the capture information onto the stack:
        -: 1298:   //
        -: 1299:   else if(pmp->sub.matched && (match_extra & m_match_flags))
        -: 1300:      ((*m_presult)[pmp->index]).get_captures().push_back(pmp->sub);
        -: 1301:#endif
        -: 1302:   // unwind stack:
    #####: 1303:   m_backup_state = pmp+1;
    #####: 1304:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(pmp);
    %%%%%: 1304-block 5
call    0 never executed
    #####: 1305:   return true; // keep looking
        -: 1306:}
        -: 1307:
        -: 1308:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE24unwind_recursion_stopperEb called 0 returned 0% blocks executed 0%
    #####: 1309:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_recursion_stopper(bool)
        -: 1310:{
    #####: 1311:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(m_backup_state++);
    %%%%%: 1311-block 2
call    0 never executed
    #####: 1312:   pstate = 0;   // nothing left to search
    #####: 1313:   return false; // end of stack nothing more to search
        -: 1314:}
        -: 1315:
        -: 1316:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16unwind_assertionEb called 0 returned 0% blocks executed 0%
    #####: 1317:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_assertion(bool r)
        -: 1318:{
    #####: 1319:   saved_assertion<BidiIterator>* pmp = static_cast<saved_assertion<BidiIterator>*>(m_backup_state);
    #####: 1320:   pstate = pmp->pstate;
    #####: 1321:   position = pmp->position;
    #####: 1322:   bool result = (r == pmp->positive);
    #####: 1323:   m_recursive_result = pmp->positive ? r : !r;
    %%%%%: 1323-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1323-block 4
    #####: 1324:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(pmp++);
    %%%%%: 1324-block 5
call    0 never executed
    #####: 1325:   m_backup_state = pmp;
    #####: 1326:   m_unwound_lookahead = true;
    #####: 1327:   return !result; // return false if the assertion was matched to stop search.
    #####: 1328:}
    %%%%%: 1328-block 3
        -: 1329:
        -: 1330:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE10unwind_altEb called 0 returned 0% blocks executed 0%
    #####: 1331:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_alt(bool r)
        -: 1332:{
    #####: 1333:   saved_position<BidiIterator>* pmp = static_cast<saved_position<BidiIterator>*>(m_backup_state);
    #####: 1334:   if(!r)
    %%%%%: 1334-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1335:   {
    #####: 1336:      pstate = pmp->pstate;
    #####: 1337:      position = pmp->position;
    %%%%%: 1337-block 3
        -: 1338:   }
    #####: 1339:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(pmp++);
    %%%%%: 1339-block 4
call    0 never executed
    #####: 1340:   m_backup_state = pmp;
    #####: 1341:   m_unwound_alt = !r;
    #####: 1342:   return r; 
        -: 1343:}
        -: 1344:
        -: 1345:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE23unwind_repeater_counterEb called 0 returned 0% blocks executed 0%
    #####: 1346:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_repeater_counter(bool)
        -: 1347:{
    #####: 1348:   saved_repeater<BidiIterator>* pmp = static_cast<saved_repeater<BidiIterator>*>(m_backup_state);
    #####: 1349:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(pmp++);
    %%%%%: 1349-block 2
call    0 never executed
    #####: 1350:   m_backup_state = pmp;
    #####: 1351:   return true; // keep looking
        -: 1352:}
        -: 1353:
        -: 1354:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE18unwind_extra_blockEb called 0 returned 0% blocks executed 0%
    #####: 1355:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_extra_block(bool)
        -: 1356:{
    #####: 1357:   ++used_block_count;
    #####: 1358:   saved_extra_block* pmp = static_cast<saved_extra_block*>(m_backup_state);
    #####: 1359:   void* condemmed = m_stack_base;
    #####: 1360:   m_stack_base = pmp->base;
    #####: 1361:   m_backup_state = pmp->end;
    #####: 1362:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(pmp);
    %%%%%: 1362-block 2
call    0 never executed
    #####: 1363:   put_mem_block(condemmed);
call    0 never executed
    #####: 1364:   return true; // keep looking
        -: 1365:}
        -: 1366:
        -: 1367:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE21destroy_single_repeatEv called 0 returned 0% blocks executed 0%
    #####: 1368:inline void perl_matcher<BidiIterator, Allocator, traits>::destroy_single_repeat()
        -: 1369:{
    #####: 1370:   saved_single_repeat<BidiIterator>* p = static_cast<saved_single_repeat<BidiIterator>*>(m_backup_state);
    #####: 1371:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(p++);
    %%%%%: 1371-block 2
call    0 never executed
    #####: 1372:   m_backup_state = p;
    #####: 1373:}
        -: 1374:
        -: 1375:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE27unwind_greedy_single_repeatEb called 0 returned 0% blocks executed 0%
    #####: 1376:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_greedy_single_repeat(bool r)
        -: 1377:{
    #####: 1378:   saved_single_repeat<BidiIterator>* pmp = static_cast<saved_single_repeat<BidiIterator>*>(m_backup_state);
        -: 1379:
        -: 1380:   // if we have a match, just discard this state:
    #####: 1381:   if(r) 
    %%%%%: 1381-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1382:   {
    #####: 1383:      destroy_single_repeat();
    %%%%%: 1383-block 3
call    0 never executed
    #####: 1384:      return true;
        -: 1385:   }
        -: 1386:
    #####: 1387:   const re_repeat* rep = pmp->rep;
    #####: 1388:   std::size_t count = pmp->count;
    #####: 1389:   BOOST_REGEX_ASSERT(rep->next.p != 0);
    %%%%%: 1389-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1389-block 6
call    2 never executed
    #####: 1390:   BOOST_REGEX_ASSERT(rep->alt.p != 0);
    %%%%%: 1390-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1390-block 8
call    2 never executed
        -: 1391:
    #####: 1392:   count -= rep->min;
        -: 1393:   
    #####: 1394:   if((m_match_flags & match_partial) && (position == last))
    %%%%%: 1394-block 9
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1394-block 11
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1394-block 12
    %%%%%: 1394-block 13
    %%%%%: 1394-block 14
branch  5 never executed (fallthrough)
branch  6 never executed
    #####: 1395:      m_has_partial_match = true;
    %%%%%: 1395-block 15
        -: 1396:
    #####: 1397:   BOOST_REGEX_ASSERT(count);
    %%%%%: 1397-block 16
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1397-block 17
call    2 never executed
    #####: 1398:   position = pmp->last_position;
    %%%%%: 1398-block 18
        -: 1399:
        -: 1400:   // backtrack till we can skip out:
        -: 1401:   do
        -: 1402:   {
    #####: 1403:      --position;
    #####: 1404:      --count;
    #####: 1405:      ++state_count;
    #####: 1406:   }while(count && !can_start(*position, rep->_map, mask_skip));
    %%%%%: 1406-block 19
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1406-block 20
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1406-block 22
    %%%%%: 1406-block 23
    %%%%%: 1406-block 24
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 1407:
        -: 1408:   // if we've hit base, destroy this state:
    #####: 1409:   if(count == 0)
    %%%%%: 1409-block 25
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1410:   {
    #####: 1411:         destroy_single_repeat();
    %%%%%: 1411-block 26
call    0 never executed
    #####: 1412:         if(!can_start(*position, rep->_map, mask_skip))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1413:            return true;
    %%%%%: 1413-block 29
        -: 1414:   }
        -: 1415:   else
        -: 1416:   {
    #####: 1417:      pmp->count = count + rep->min;
    #####: 1418:      pmp->last_position = position;
    %%%%%: 1418-block 30
        -: 1419:   }
    #####: 1420:   pstate = rep->alt.p;
    #####: 1421:   return false;
    %%%%%: 1421-block 31
        -: 1422:}
        -: 1423:
        -: 1424:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE22unwind_slow_dot_repeatEb called 0 returned 0% blocks executed 0%
    #####: 1425:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_slow_dot_repeat(bool r)
        -: 1426:{
    #####: 1427:   saved_single_repeat<BidiIterator>* pmp = static_cast<saved_single_repeat<BidiIterator>*>(m_backup_state);
        -: 1428:
        -: 1429:   // if we have a match, just discard this state:
    #####: 1430:   if(r) 
    %%%%%: 1430-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1431:   {
    #####: 1432:      destroy_single_repeat();
    %%%%%: 1432-block 3
call    0 never executed
    #####: 1433:      return true;
        -: 1434:   }
        -: 1435:
    #####: 1436:   const re_repeat* rep = pmp->rep;
    #####: 1437:   std::size_t count = pmp->count;
    #####: 1438:   BOOST_REGEX_ASSERT(rep->type == syntax_element_dot_rep);
    %%%%%: 1438-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1438-block 6
call    2 never executed
    #####: 1439:   BOOST_REGEX_ASSERT(rep->next.p != 0);
    %%%%%: 1439-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1439-block 8
call    2 never executed
    #####: 1440:   BOOST_REGEX_ASSERT(rep->alt.p != 0);
    %%%%%: 1440-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1440-block 10
call    2 never executed
    #####: 1441:   BOOST_REGEX_ASSERT(rep->next.p->type == syntax_element_wild);
    %%%%%: 1441-block 11
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1441-block 12
call    2 never executed
        -: 1442:
    #####: 1443:   BOOST_REGEX_ASSERT(count < rep->max);
    %%%%%: 1443-block 13
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1443-block 14
call    2 never executed
    #####: 1444:   pstate = rep->next.p;
    #####: 1445:   position = pmp->last_position;
        -: 1446:
    #####: 1447:   if(position != last)
    %%%%%: 1447-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1448:   {
        -: 1449:      // wind forward until we can skip out of the repeat:
        -: 1450:      do
        -: 1451:      {
    #####: 1452:         if(!match_wild())
    %%%%%: 1452-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1453:         {
        -: 1454:            // failed repeat match, discard this state and look for another:
    #####: 1455:            destroy_single_repeat();
    %%%%%: 1455-block 18
call    0 never executed
    #####: 1456:            return true;
        -: 1457:         }
    #####: 1458:         ++count;
    #####: 1459:         ++state_count;
    #####: 1460:         pstate = rep->next.p;
    #####: 1461:      }while((count < rep->max) && (position != last) && !can_start(*position, rep->_map, mask_skip));
    %%%%%: 1461-block 20
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1461-block 21
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1461-block 22
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 1461-block 24
    %%%%%: 1461-block 25
    %%%%%: 1461-block 26
branch  7 never executed
branch  8 never executed (fallthrough)
        -: 1462:   }   
    #####: 1463:   if(position == last)
    %%%%%: 1463-block 27
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1464:   {
        -: 1465:      // can't repeat any more, remove the pushed state: 
    #####: 1466:      destroy_single_repeat();
    %%%%%: 1466-block 28
call    0 never executed
    #####: 1467:      if((m_match_flags & match_partial) && (position == last) && (position != search_base))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1467-block 31
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1467-block 32
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 1467-block 33
    %%%%%: 1467-block 34
    %%%%%: 1467-block 35
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 1468:         m_has_partial_match = true;
    %%%%%: 1468-block 36
    #####: 1469:      if(0 == (rep->can_be_null & mask_skip))
    %%%%%: 1469-block 37
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1470:         return true;
    %%%%%: 1470-block 38
        -: 1471:   }
    #####: 1472:   else if(count == rep->max)
    %%%%%: 1472-block 39
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1473:   {
        -: 1474:      // can't repeat any more, remove the pushed state: 
    #####: 1475:      destroy_single_repeat();
    %%%%%: 1475-block 40
call    0 never executed
    #####: 1476:      if(!can_start(*position, rep->_map, mask_skip))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1477:         return true;
    %%%%%: 1477-block 43
        -: 1478:   }
        -: 1479:   else
        -: 1480:   {
    #####: 1481:      pmp->count = count;
    #####: 1482:      pmp->last_position = position;
    %%%%%: 1482-block 44
        -: 1483:   }
    #####: 1484:   pstate = rep->alt.p;
    #####: 1485:   return false;
    %%%%%: 1485-block 45
        -: 1486:}
        -: 1487:
        -: 1488:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE22unwind_fast_dot_repeatEb called 0 returned 0% blocks executed 0%
    #####: 1489:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_fast_dot_repeat(bool r)
        -: 1490:{
    #####: 1491:   saved_single_repeat<BidiIterator>* pmp = static_cast<saved_single_repeat<BidiIterator>*>(m_backup_state);
        -: 1492:
        -: 1493:   // if we have a match, just discard this state:
    #####: 1494:   if(r) 
    %%%%%: 1494-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1495:   {
    #####: 1496:      destroy_single_repeat();
    %%%%%: 1496-block 3
call    0 never executed
    #####: 1497:      return true;
        -: 1498:   }
        -: 1499:
    #####: 1500:   const re_repeat* rep = pmp->rep;
    #####: 1501:   std::size_t count = pmp->count;
        -: 1502:
    #####: 1503:   BOOST_REGEX_ASSERT(count < rep->max);
    %%%%%: 1503-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1503-block 6
call    2 never executed
    #####: 1504:   position = pmp->last_position;
    #####: 1505:   if(position != last)
    %%%%%: 1505-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1506:   {
        -: 1507:
        -: 1508:      // wind forward until we can skip out of the repeat:
        -: 1509:      do
        -: 1510:      {
    #####: 1511:         ++position;
    #####: 1512:         ++count;
    #####: 1513:         ++state_count;
    #####: 1514:      }while((count < rep->max) && (position != last) && !can_start(*position, rep->_map, mask_skip));
    %%%%%: 1514-block 8
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1514-block 9
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1514-block 10
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 1514-block 12
    %%%%%: 1514-block 13
    %%%%%: 1514-block 14
branch  7 never executed
branch  8 never executed (fallthrough)
        -: 1515:   }
        -: 1516:
        -: 1517:   // remember where we got to if this is a leading repeat:
    #####: 1518:   if((rep->leading) && (count < rep->max))
    %%%%%: 1518-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1518-block 16
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1519:      restart = position;
    %%%%%: 1519-block 17
    #####: 1520:   if(position == last)
    %%%%%: 1520-block 18
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1521:   {
        -: 1522:      // can't repeat any more, remove the pushed state: 
    #####: 1523:      destroy_single_repeat();
    %%%%%: 1523-block 19
call    0 never executed
    #####: 1524:      if((m_match_flags & match_partial) && (position == last) && (position != search_base))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1524-block 22
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1524-block 23
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 1524-block 24
    %%%%%: 1524-block 25
    %%%%%: 1524-block 26
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 1525:         m_has_partial_match = true;
    %%%%%: 1525-block 27
    #####: 1526:      if(0 == (rep->can_be_null & mask_skip))
    %%%%%: 1526-block 28
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1527:         return true;
    %%%%%: 1527-block 29
        -: 1528:   }
    #####: 1529:   else if(count == rep->max)
    %%%%%: 1529-block 30
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1530:   {
        -: 1531:      // can't repeat any more, remove the pushed state: 
    #####: 1532:      destroy_single_repeat();
    %%%%%: 1532-block 31
call    0 never executed
    #####: 1533:      if(!can_start(*position, rep->_map, mask_skip))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1534:         return true;
    %%%%%: 1534-block 34
        -: 1535:   }
        -: 1536:   else
        -: 1537:   {
    #####: 1538:      pmp->count = count;
    #####: 1539:      pmp->last_position = position;
    %%%%%: 1539-block 35
        -: 1540:   }
    #####: 1541:   pstate = rep->alt.p;
    #####: 1542:   return false;
    %%%%%: 1542-block 36
        -: 1543:}
        -: 1544:
        -: 1545:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE18unwind_char_repeatEb called 0 returned 0% blocks executed 0%
    #####: 1546:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_char_repeat(bool r)
        -: 1547:{
    #####: 1548:   saved_single_repeat<BidiIterator>* pmp = static_cast<saved_single_repeat<BidiIterator>*>(m_backup_state);
        -: 1549:
        -: 1550:   // if we have a match, just discard this state:
    #####: 1551:   if(r) 
    %%%%%: 1551-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1552:   {
    #####: 1553:      destroy_single_repeat();
    %%%%%: 1553-block 3
call    0 never executed
    #####: 1554:      return true;
        -: 1555:   }
        -: 1556:
    #####: 1557:   const re_repeat* rep = pmp->rep;
    #####: 1558:   std::size_t count = pmp->count;
    #####: 1559:   pstate = rep->next.p;
    #####: 1560:   const char_type what = *reinterpret_cast<const char_type*>(static_cast<const re_literal*>(pstate) + 1);
    #####: 1561:   position = pmp->last_position;
        -: 1562:
    #####: 1563:   BOOST_REGEX_ASSERT(rep->type == syntax_element_char_rep);
    %%%%%: 1563-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1563-block 6
call    2 never executed
    #####: 1564:   BOOST_REGEX_ASSERT(rep->next.p != 0);
    %%%%%: 1564-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1564-block 8
call    2 never executed
    #####: 1565:   BOOST_REGEX_ASSERT(rep->alt.p != 0);
    %%%%%: 1565-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1565-block 10
call    2 never executed
    #####: 1566:   BOOST_REGEX_ASSERT(rep->next.p->type == syntax_element_literal);
    %%%%%: 1566-block 11
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1566-block 12
call    2 never executed
    #####: 1567:   BOOST_REGEX_ASSERT(count < rep->max);
    %%%%%: 1567-block 13
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1567-block 14
call    2 never executed
        -: 1568:
    #####: 1569:   if(position != last)
    %%%%%: 1569-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1570:   {
        -: 1571:      // wind forward until we can skip out of the repeat:
        -: 1572:      do
        -: 1573:      {
    #####: 1574:         if(traits_inst.translate(*position, icase) != what)
    %%%%%: 1574-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1575:         {
        -: 1576:            // failed repeat match, discard this state and look for another:
    #####: 1577:            destroy_single_repeat();
    %%%%%: 1577-block 18
call    0 never executed
    #####: 1578:            return true;
        -: 1579:         }
    #####: 1580:         ++count;
    #####: 1581:         ++ position;
    #####: 1582:         ++state_count;
    #####: 1583:         pstate = rep->next.p;
    #####: 1584:      }while((count < rep->max) && (position != last) && !can_start(*position, rep->_map, mask_skip));
    %%%%%: 1584-block 20
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1584-block 21
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1584-block 22
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 1584-block 24
    %%%%%: 1584-block 25
    %%%%%: 1584-block 26
branch  7 never executed
branch  8 never executed (fallthrough)
        -: 1585:   }   
        -: 1586:   // remember where we got to if this is a leading repeat:
    #####: 1587:   if((rep->leading) && (count < rep->max))
    %%%%%: 1587-block 27
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1587-block 28
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1588:      restart = position;
    %%%%%: 1588-block 29
    #####: 1589:   if(position == last)
    %%%%%: 1589-block 30
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1590:   {
        -: 1591:      // can't repeat any more, remove the pushed state: 
    #####: 1592:      destroy_single_repeat();
    %%%%%: 1592-block 31
call    0 never executed
    #####: 1593:      if((m_match_flags & match_partial) && (position == last) && (position != search_base))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1593-block 34
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1593-block 35
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 1593-block 36
    %%%%%: 1593-block 37
    %%%%%: 1593-block 38
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 1594:         m_has_partial_match = true;
    %%%%%: 1594-block 39
    #####: 1595:      if(0 == (rep->can_be_null & mask_skip))
    %%%%%: 1595-block 40
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1596:         return true;
    %%%%%: 1596-block 41
        -: 1597:   }
    #####: 1598:   else if(count == rep->max)
    %%%%%: 1598-block 42
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1599:   {
        -: 1600:      // can't repeat any more, remove the pushed state: 
    #####: 1601:      destroy_single_repeat();
    %%%%%: 1601-block 43
call    0 never executed
    #####: 1602:      if(!can_start(*position, rep->_map, mask_skip))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1603:         return true;
    %%%%%: 1603-block 46
        -: 1604:   }
        -: 1605:   else
        -: 1606:   {
    #####: 1607:      pmp->count = count;
    #####: 1608:      pmp->last_position = position;
    %%%%%: 1608-block 47
        -: 1609:   }
    #####: 1610:   pstate = rep->alt.p;
    #####: 1611:   return false;
    %%%%%: 1611-block 48
        -: 1612:}
        -: 1613:
        -: 1614:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE23unwind_short_set_repeatEb called 0 returned 0% blocks executed 0%
    #####: 1615:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_short_set_repeat(bool r)
        -: 1616:{
    #####: 1617:   saved_single_repeat<BidiIterator>* pmp = static_cast<saved_single_repeat<BidiIterator>*>(m_backup_state);
        -: 1618:
        -: 1619:   // if we have a match, just discard this state:
    #####: 1620:   if(r) 
    %%%%%: 1620-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1621:   {
    #####: 1622:      destroy_single_repeat();
    %%%%%: 1622-block 3
call    0 never executed
    #####: 1623:      return true;
        -: 1624:   }
        -: 1625:
    #####: 1626:   const re_repeat* rep = pmp->rep;
    #####: 1627:   std::size_t count = pmp->count;
    #####: 1628:   pstate = rep->next.p;
    #####: 1629:   const unsigned char* map = static_cast<const re_set*>(rep->next.p)->_map;
    #####: 1630:   position = pmp->last_position;
        -: 1631:
    #####: 1632:   BOOST_REGEX_ASSERT(rep->type == syntax_element_short_set_rep);
    %%%%%: 1632-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1632-block 6
call    2 never executed
    #####: 1633:   BOOST_REGEX_ASSERT(rep->next.p != 0);
    %%%%%: 1633-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1633-block 8
call    2 never executed
    #####: 1634:   BOOST_REGEX_ASSERT(rep->alt.p != 0);
    %%%%%: 1634-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1634-block 10
call    2 never executed
    #####: 1635:   BOOST_REGEX_ASSERT(rep->next.p->type == syntax_element_set);
    %%%%%: 1635-block 11
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1635-block 12
call    2 never executed
    #####: 1636:   BOOST_REGEX_ASSERT(count < rep->max);
    %%%%%: 1636-block 13
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1636-block 14
call    2 never executed
        -: 1637:   
    #####: 1638:   if(position != last)
    %%%%%: 1638-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1639:   {
        -: 1640:      // wind forward until we can skip out of the repeat:
        -: 1641:      do
        -: 1642:      {
    #####: 1643:         if(!map[static_cast<unsigned char>(traits_inst.translate(*position, icase))])
    %%%%%: 1643-block 16
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1644:         {
        -: 1645:            // failed repeat match, discard this state and look for another:
    #####: 1646:            destroy_single_repeat();
    %%%%%: 1646-block 18
call    0 never executed
    #####: 1647:            return true;
        -: 1648:         }
    #####: 1649:         ++count;
    #####: 1650:         ++ position;
    #####: 1651:         ++state_count;
    #####: 1652:         pstate = rep->next.p;
    #####: 1653:      }while((count < rep->max) && (position != last) && !can_start(*position, rep->_map, mask_skip));
    %%%%%: 1653-block 20
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1653-block 21
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1653-block 22
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 1653-block 24
    %%%%%: 1653-block 25
    %%%%%: 1653-block 26
branch  7 never executed
branch  8 never executed (fallthrough)
        -: 1654:   }   
        -: 1655:   // remember where we got to if this is a leading repeat:
    #####: 1656:   if((rep->leading) && (count < rep->max))
    %%%%%: 1656-block 27
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1656-block 28
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1657:      restart = position;
    %%%%%: 1657-block 29
    #####: 1658:   if(position == last)
    %%%%%: 1658-block 30
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1659:   {
        -: 1660:      // can't repeat any more, remove the pushed state: 
    #####: 1661:      destroy_single_repeat();
    %%%%%: 1661-block 31
call    0 never executed
    #####: 1662:      if((m_match_flags & match_partial) && (position == last) && (position != search_base))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1662-block 34
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1662-block 35
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 1662-block 36
    %%%%%: 1662-block 37
    %%%%%: 1662-block 38
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 1663:         m_has_partial_match = true;
    %%%%%: 1663-block 39
    #####: 1664:      if(0 == (rep->can_be_null & mask_skip))
    %%%%%: 1664-block 40
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1665:         return true;
    %%%%%: 1665-block 41
        -: 1666:   }
    #####: 1667:   else if(count == rep->max)
    %%%%%: 1667-block 42
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1668:   {
        -: 1669:      // can't repeat any more, remove the pushed state: 
    #####: 1670:      destroy_single_repeat();
    %%%%%: 1670-block 43
call    0 never executed
    #####: 1671:      if(!can_start(*position, rep->_map, mask_skip))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1672:         return true;
    %%%%%: 1672-block 46
        -: 1673:   }
        -: 1674:   else
        -: 1675:   {
    #####: 1676:      pmp->count = count;
    #####: 1677:      pmp->last_position = position;
    %%%%%: 1677-block 47
        -: 1678:   }
    #####: 1679:   pstate = rep->alt.p;
    #####: 1680:   return false;
    %%%%%: 1680-block 48
        -: 1681:}
        -: 1682:
        -: 1683:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE22unwind_long_set_repeatEb called 0 returned 0% blocks executed 0%
    #####: 1684:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_long_set_repeat(bool r)
        -: 1685:{
        -: 1686:   typedef typename traits::char_class_type m_type;
    #####: 1687:   saved_single_repeat<BidiIterator>* pmp = static_cast<saved_single_repeat<BidiIterator>*>(m_backup_state);
        -: 1688:
        -: 1689:   // if we have a match, just discard this state:
    #####: 1690:   if(r)
    %%%%%: 1690-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1691:   {
    #####: 1692:      destroy_single_repeat();
    %%%%%: 1692-block 3
call    0 never executed
    #####: 1693:      return true;
        -: 1694:   }
        -: 1695:
    #####: 1696:   const re_repeat* rep = pmp->rep;
    #####: 1697:   std::size_t count = pmp->count;
    #####: 1698:   pstate = rep->next.p;
    #####: 1699:   const re_set_long<m_type>* set = static_cast<const re_set_long<m_type>*>(pstate);
    #####: 1700:   position = pmp->last_position;
        -: 1701:
    #####: 1702:   BOOST_REGEX_ASSERT(rep->type == syntax_element_long_set_rep);
    %%%%%: 1702-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1702-block 6
call    2 never executed
    #####: 1703:   BOOST_REGEX_ASSERT(rep->next.p != 0);
    %%%%%: 1703-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1703-block 8
call    2 never executed
    #####: 1704:   BOOST_REGEX_ASSERT(rep->alt.p != 0);
    %%%%%: 1704-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1704-block 10
call    2 never executed
    #####: 1705:   BOOST_REGEX_ASSERT(rep->next.p->type == syntax_element_long_set);
    %%%%%: 1705-block 11
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1705-block 12
call    2 never executed
    #####: 1706:   BOOST_REGEX_ASSERT(count < rep->max);
    %%%%%: 1706-block 13
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1706-block 14
call    2 never executed
        -: 1707:
    #####: 1708:   if(position != last)
    %%%%%: 1708-block 15
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1709:   {
        -: 1710:      // wind forward until we can skip out of the repeat:
        -: 1711:      do
        -: 1712:      {
    #####: 1713:         if(position == re_is_set_member(position, last, set, re.get_data(), icase))
    %%%%%: 1713-block 16
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1714:         {
        -: 1715:            // failed repeat match, discard this state and look for another:
    #####: 1716:            destroy_single_repeat();
    %%%%%: 1716-block 19
call    0 never executed
    #####: 1717:            return true;
        -: 1718:         }
    #####: 1719:         ++position;
    #####: 1720:         ++count;
    #####: 1721:         ++state_count;
    #####: 1722:         pstate = rep->next.p;
    #####: 1723:      }while((count < rep->max) && (position != last) && !can_start(*position, rep->_map, mask_skip));
    %%%%%: 1723-block 21
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1723-block 22
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1723-block 23
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 1723-block 25
    %%%%%: 1723-block 26
    %%%%%: 1723-block 27
branch  7 never executed
branch  8 never executed (fallthrough)
        -: 1724:   }   
        -: 1725:   // remember where we got to if this is a leading repeat:
    #####: 1726:   if((rep->leading) && (count < rep->max))
    %%%%%: 1726-block 28
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1726-block 29
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1727:      restart = position;
    %%%%%: 1727-block 30
    #####: 1728:   if(position == last)
    %%%%%: 1728-block 31
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1729:   {
        -: 1730:      // can't repeat any more, remove the pushed state:
    #####: 1731:      destroy_single_repeat();
    %%%%%: 1731-block 32
call    0 never executed
    #####: 1732:      if((m_match_flags & match_partial) && (position == last) && (position != search_base))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1732-block 35
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1732-block 36
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 1732-block 37
    %%%%%: 1732-block 38
    %%%%%: 1732-block 39
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 1733:         m_has_partial_match = true;
    %%%%%: 1733-block 40
    #####: 1734:      if(0 == (rep->can_be_null & mask_skip))
    %%%%%: 1734-block 41
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1735:         return true;
    %%%%%: 1735-block 42
        -: 1736:   }
    #####: 1737:   else if(count == rep->max)
    %%%%%: 1737-block 43
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1738:   {
        -: 1739:      // can't repeat any more, remove the pushed state: 
    #####: 1740:      destroy_single_repeat();
    %%%%%: 1740-block 44
call    0 never executed
    #####: 1741:      if(!can_start(*position, rep->_map, mask_skip))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1742:         return true;
    %%%%%: 1742-block 47
        -: 1743:   }
        -: 1744:   else
        -: 1745:   {
    #####: 1746:      pmp->count = count;
    #####: 1747:      pmp->last_position = position;
    %%%%%: 1747-block 48
        -: 1748:   }
    #####: 1749:   pstate = rep->alt.p;
    #####: 1750:   return false;
    %%%%%: 1750-block 49
        -: 1751:}
        -: 1752:
        -: 1753:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE24unwind_non_greedy_repeatEb called 0 returned 0% blocks executed 0%
    #####: 1754:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_non_greedy_repeat(bool r)
        -: 1755:{
    #####: 1756:   saved_position<BidiIterator>* pmp = static_cast<saved_position<BidiIterator>*>(m_backup_state);
    #####: 1757:   if(!r)
    %%%%%: 1757-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1758:   {
    #####: 1759:      position = pmp->position;
    #####: 1760:      pstate = pmp->pstate;
    #####: 1761:      ++(*next_count);
    %%%%%: 1761-block 3
call    0 never executed
        -: 1762:   }
    #####: 1763:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(pmp++);
    %%%%%: 1763-block 4
call    0 never executed
    #####: 1764:   m_backup_state = pmp;
    #####: 1765:   return r;
        -: 1766:}
        -: 1767:
        -: 1768:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE16unwind_recursionEb called 0 returned 0% blocks executed 0%
    #####: 1769:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_recursion(bool r)
        -: 1770:{
        -: 1771:   // We are backtracking back inside a recursion, need to push the info
        -: 1772:   // back onto the recursion stack, and do so unconditionally, otherwise
        -: 1773:   // we can get mismatched pushes and pops...
    #####: 1774:   saved_recursion<results_type>* pmp = static_cast<saved_recursion<results_type>*>(m_backup_state);
    #####: 1775:   if (!r)
    %%%%%: 1775-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1776:   {
    #####: 1777:      recursion_stack.push_back(recursion_info<results_type>());
    %%%%%: 1777-block 3
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1777-block 4
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1777-block 5
call    6 never executed
    $$$$$: 1777-block 15
call    7 never executed
    #####: 1778:      recursion_stack.back().idx = pmp->recursion_id;
call    0 never executed
    #####: 1779:      recursion_stack.back().preturn_address = pmp->preturn_address;
call    0 never executed
    #####: 1780:      recursion_stack.back().results = pmp->prior_results;
call    0 never executed
call    1 never executed
    #####: 1781:      recursion_stack.back().location_of_start = position;
call    0 never executed
    #####: 1782:      *m_presult = pmp->internal_results;
call    0 never executed
        -: 1783:   }
    #####: 1784:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(pmp++);
    %%%%%: 1784-block 12
call    0 never executed
    #####: 1785:   m_backup_state = pmp;
    #####: 1786:   return true;
    %%%%%: 1786-block 14
        -: 1787:}
        -: 1788:
        -: 1789:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE20unwind_recursion_popEb called 0 returned 0% blocks executed 0%
    #####: 1790:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_recursion_pop(bool r)
        -: 1791:{
        -: 1792:   // Backtracking out of a recursion, we must pop state off the recursion
        -: 1793:   // stack unconditionally to ensure matched pushes and pops:
    #####: 1794:   saved_state* pmp = static_cast<saved_state*>(m_backup_state);
    #####: 1795:   if (!r && !recursion_stack.empty())
    %%%%%: 1795-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1795-block 3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1795-block 5
    %%%%%: 1795-block 6
    %%%%%: 1795-block 7
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1796:   {
    #####: 1797:      *m_presult = recursion_stack.back().results;
    %%%%%: 1797-block 8
call    0 never executed
call    1 never executed
    #####: 1798:      position = recursion_stack.back().location_of_start;
call    0 never executed
    #####: 1799:      recursion_stack.pop_back();
call    0 never executed
        -: 1800:   }
    #####: 1801:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(pmp++);
    %%%%%: 1801-block 12
call    0 never executed
    #####: 1802:   m_backup_state = pmp;
    #####: 1803:   return true;
        -: 1804:}
        -: 1805:
        -: 1806:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE18push_recursion_popEv called 0 returned 0% blocks executed 0%
    #####: 1807:void perl_matcher<BidiIterator, Allocator, traits>::push_recursion_pop()
        -: 1808:{
    #####: 1809:   saved_state* pmp = static_cast<saved_state*>(m_backup_state);
    #####: 1810:   --pmp;
    #####: 1811:   if(pmp < m_stack_base)
    %%%%%: 1811-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1812:   {
    #####: 1813:      extend_stack();
    %%%%%: 1813-block 3
call    0 never executed
    #####: 1814:      pmp = static_cast<saved_state*>(m_backup_state);
    #####: 1815:      --pmp;
        -: 1816:   }
    #####: 1817:   (void) new (pmp)saved_state(15);
    %%%%%: 1817-block 5
call    0 never executed
call    1 never executed
    #####: 1818:   m_backup_state = pmp;
    #####: 1819:}
        -: 1820:
        -: 1821:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE13unwind_commitEb called 0 returned 0% blocks executed 0%
    #####: 1822:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_commit(bool b)
        -: 1823:{
    #####: 1824:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(m_backup_state++);
    %%%%%: 1824-block 2
call    0 never executed
    #####: 1825:   while(unwind(b) && !m_unwound_lookahead){}
    %%%%%: 1825-block 4
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1825-block 6
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1825-block 7
    %%%%%: 1825-block 8
    %%%%%: 1825-block 9
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 1826:   if(m_unwound_lookahead && pstate)
    %%%%%: 1826-block 10
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1826-block 11
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1827:   {
        -: 1828:      //
        -: 1829:      // If we stop because we just unwound an assertion, put the
        -: 1830:      // commit state back on the stack again:
        -: 1831:      //
    #####: 1832:      m_unwound_lookahead = false;
    #####: 1833:      saved_state* pmp = m_backup_state;
    #####: 1834:      --pmp;
    #####: 1835:      if(pmp < m_stack_base)
    %%%%%: 1835-block 12
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1836:      {
    #####: 1837:         extend_stack();
    %%%%%: 1837-block 13
call    0 never executed
    #####: 1838:         pmp = m_backup_state;
    #####: 1839:         --pmp;
        -: 1840:      }
    #####: 1841:      (void) new (pmp)saved_state(16);
    %%%%%: 1841-block 15
call    0 never executed
call    1 never executed
    #####: 1842:      m_backup_state = pmp;
        -: 1843:   }
        -: 1844:   // This prevents us from stopping when we exit from an independent sub-expression:
    #####: 1845:   m_independent = false;
    #####: 1846:   return false;
    %%%%%: 1846-block 18
        -: 1847:}
        -: 1848:
        -: 1849:template <class BidiIterator, class Allocator, class traits>
function _ZN5boost13re_detail_50012perl_matcherIPKcSaINS_9sub_matchIS3_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE11unwind_thenEb called 0 returned 0% blocks executed 0%
    #####: 1850:bool perl_matcher<BidiIterator, Allocator, traits>::unwind_then(bool b)
        -: 1851:{
        -: 1852:   // Unwind everything till we hit an alternative:
    #####: 1853:   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(m_backup_state++);
    %%%%%: 1853-block 2
call    0 never executed
    #####: 1854:   bool result = false;
    #####: 1855:   result = unwind(b);
call    0 never executed
    #####: 1856:   while(result && !m_unwound_alt)
    %%%%%: 1856-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1856-block 8
branch  2 never executed
branch  3 never executed (fallthrough)
        -: 1857:   {
    #####: 1858:      result = unwind(b);
    %%%%%: 1858-block 5
call    0 never executed
        -: 1859:   }
        -: 1860:   // We're now pointing at the next alternative, need one more backtrack 
        -: 1861:   // since *all* the other alternatives must fail once we've reached a THEN clause:
    #####: 1862:   if(result && m_unwound_alt)
    %%%%%: 1862-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1862-block 10
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1863:      unwind(b);
    %%%%%: 1863-block 11
call    0 never executed
    #####: 1864:   return false;
    %%%%%: 1864-block 12
        -: 1865:}
        -: 1866:
        -: 1867:} // namespace BOOST_REGEX_DETAIL_NS
        -: 1868:} // namespace boost
        -: 1869:
        -: 1870:#ifdef BOOST_REGEX_MSVC
        -: 1871:#  pragma warning(pop)
        -: 1872:#endif
        -: 1873:
        -: 1874:#endif
