        -:    0:Source:/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/vendor/regex/include/boost/regex/v5/object_cache.hpp
        -:    0:Graph:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcno
        -:    0:Data:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: *
        -:    3: * Copyright (c) 2004
        -:    4: * John Maddock
        -:    5: *
        -:    6: * Use, modification and distribution are subject to the 
        -:    7: * Boost Software License, Version 1.0. (See accompanying file 
        -:    8: * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9: *
        -:   10: */
        -:   11:
        -:   12: /*
        -:   13:  *   LOCATION:    see http://www.boost.org for most recent version.
        -:   14:  *   FILE         object_cache.hpp
        -:   15:  *   VERSION      see <boost/version.hpp>
        -:   16:  *   DESCRIPTION: Implements a generic object cache.
        -:   17:  */
        -:   18:
        -:   19:#ifndef BOOST_REGEX_OBJECT_CACHE_HPP
        -:   20:#define BOOST_REGEX_OBJECT_CACHE_HPP
        -:   21:
        -:   22:#include <boost/regex/config.hpp>
        -:   23:#include <memory>
        -:   24:#include <map>
        -:   25:#include <list>
        -:   26:#include <stdexcept>
        -:   27:#include <string>
        -:   28:#ifdef BOOST_HAS_THREADS
        -:   29:#include <mutex>
        -:   30:#endif
        -:   31:
        -:   32:namespace boost{
        -:   33:
        -:   34:template <class Key, class Object>
        -:   35:class object_cache
        -:   36:{
        -:   37:public:
        -:   38:   typedef std::pair< ::std::shared_ptr<Object const>, Key const*> value_type;
        -:   39:   typedef std::list<value_type> list_type;
        -:   40:   typedef typename list_type::iterator list_iterator;
        -:   41:   typedef std::map<Key, list_iterator> map_type;
        -:   42:   typedef typename map_type::iterator map_iterator;
        -:   43:   typedef typename list_type::size_type size_type;
        -:   44:   static std::shared_ptr<Object const> get(const Key& k, size_type l_max_cache_size);
        -:   45:
        -:   46:private:
        -:   47:   static std::shared_ptr<Object const> do_get(const Key& k, size_type l_max_cache_size);
        -:   48:
        -:   49:   struct data
        -:   50:   {
        -:   51:      list_type   cont;
        -:   52:      map_type    index;
        -:   53:   };
        -:   54:
        -:   55:   // Needed by compilers not implementing the resolution to DR45. For reference,
        -:   56:   // see http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#45.
        -:   57:   friend struct data;
        -:   58:};
        -:   59:
        -:   60:#ifdef BOOST_REGEX_MSVC
        -:   61:#pragma warning(push)
        -:   62:#pragma warning(disable: 4702)
        -:   63:#endif
        -:   64:template <class Key, class Object>
function _ZN5boost12object_cacheINS_13re_detail_50021cpp_regex_traits_baseIcEENS1_31cpp_regex_traits_implementationIcEEE3getERKS3_m called 1 returned 100% blocks executed 100%
        1:   65:std::shared_ptr<Object const> object_cache<Key, Object>::get(const Key& k, size_type l_max_cache_size)
        -:   66:{
        -:   67:#ifdef BOOST_HAS_THREADS
        -:   68:   static std::mutex mut;
        -:   69:   std::lock_guard<std::mutex> l(mut);
        -:   70:   return do_get(k, l_max_cache_size);
        -:   71:#else
        1:   72:   return do_get(k, l_max_cache_size);
        1:   72-block 2
call    0 returned 1
        -:   73:#endif
        -:   74:}
        -:   75:#ifdef BOOST_REGEX_MSVC
        -:   76:#pragma warning(pop)
        -:   77:#endif
        -:   78:
        -:   79:template <class Key, class Object>
function _ZN5boost12object_cacheINS_13re_detail_50021cpp_regex_traits_baseIcEENS1_31cpp_regex_traits_implementationIcEEE6do_getERKS3_m called 1 returned 100% blocks executed 30%
        1:   80:std::shared_ptr<Object const> object_cache<Key, Object>::do_get(const Key& k, size_type l_max_cache_size)
        -:   81:{
        -:   82:   typedef typename object_cache<Key, Object>::data object_data;
        -:   83:   typedef typename map_type::size_type map_size_type;
        1:   84:   static object_data s_data;
        1:   84-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   84-block 3
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:   84-block 5
call    5 returned 1
call    6 returned 1
call    7 returned 1
        -:   85:
        -:   86:   //
        -:   87:   // see if the object is already in the cache:
        -:   88:   //
        1:   89:   map_iterator mpos = s_data.index.find(k);
        1:   89-block 8
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   90:   if(mpos != s_data.index.end())
        1:   90-block 9
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   91:   {
        -:   92:      //
        -:   93:      // Eureka! 
        -:   94:      // We have a cached item, bump it up the list and return it:
        -:   95:      //
    #####:   96:      if(--(s_data.cont.end()) != mpos->second)
    %%%%%:   96-block 12
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
        -:   97:      {
        -:   98:         // splice out the item we want to move:
    #####:   99:         list_type temp;
    %%%%%:   99-block 17
call    0 never executed
    #####:  100:         temp.splice(temp.end(), s_data.cont, mpos->second);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  101:         // and now place it at the end of the list:
    #####:  102:         s_data.cont.splice(s_data.cont.end(), temp, temp.begin());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  103:         BOOST_REGEX_ASSERT(*(s_data.cont.back().second) == k);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  103-block 31
call    4 never executed
        -:  104:         // update index with new position:
    #####:  105:         mpos->second = --(s_data.cont.end());
    %%%%%:  105-block 32
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  106:         BOOST_REGEX_ASSERT(&(mpos->first) == mpos->second->second);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  106-block 39
call    5 never executed
    #####:  107:         BOOST_REGEX_ASSERT(&(mpos->first) == s_data.cont.back().second);
    %%%%%:  107-block 40
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  107-block 43
call    4 never executed
    #####:  108:      }
    %%%%%:  108-block 44
call    0 never executed
    #####:  109:      return s_data.cont.back().first;
    %%%%%:  109-block 46
call    0 never executed
call    1 never executed
        -:  110:   }
        -:  111:   //
        -:  112:   // if we get here then the item is not in the cache,
        -:  113:   // so create it:
        -:  114:   //
        1:  115:   std::shared_ptr<Object const> result(new Object(k));
        1:  115-block 48
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  115-block 49
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  115-block 50
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
    $$$$$:  115-block 126
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  115-block 127
call   11 never executed
        -:  116:   //
        -:  117:   // Add it to the list, and index it:
        -:  118:   //
        1:  119:   s_data.cont.push_back(value_type(result, static_cast<Key const*>(0)));
        1:  119-block 51
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  119-block 53
call    4 returned 1
    $$$$$:  119-block 129
call    5 never executed
    $$$$$:  119-block 131
    $$$$$:  119-block 132
        1:  120:   s_data.index.insert(std::make_pair(k, --(s_data.cont.end())));
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  120-block 58
call    6 returned 1
    $$$$$:  120-block 133
call    7 never executed
    $$$$$:  120-block 135
    $$$$$:  120-block 136
        1:  121:   s_data.cont.back().second = &(s_data.index.find(k)->first);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  121-block 60
call    3 returned 1
call    4 returned 1
    $$$$$:  121-block 137
        1:  122:   map_size_type s = s_data.index.size();
call    0 returned 1
       1*:  123:   BOOST_REGEX_ASSERT(s_data.index[k]->first.get() == result.get());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  123-block 64
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:  123-block 68
call    8 never executed
       1*:  124:   BOOST_REGEX_ASSERT(&(s_data.index.find(k)->first) == s_data.cont.back().second);
        1:  124-block 69
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  124-block 70
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  124-block 73
call    7 never executed
    $$$$$:  124-block 138
       1*:  125:   BOOST_REGEX_ASSERT(s_data.index.find(k)->first == k);
        1:  125-block 74
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  125-block 75
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  125-block 78
call    7 never executed
    $$$$$:  125-block 139
        1:  126:   if(s > l_max_cache_size)
        1:  126-block 79
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  127:   {
        -:  128:      //
        -:  129:      // We have too many items in the list, so we need to start
        -:  130:      // popping them off the back of the list, but only if they're
        -:  131:      // being held uniquely by us:
        -:  132:      //
    #####:  133:      list_iterator pos = s_data.cont.begin();
    %%%%%:  133-block 80
call    0 never executed
    #####:  134:      list_iterator last = s_data.cont.end();
call    0 never executed
    #####:  135:      while((pos != last) && (s > l_max_cache_size))
    %%%%%:  135-block 99
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  135-block 101
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  135-block 102
    %%%%%:  135-block 103
    %%%%%:  135-block 104
branch  5 never executed
branch  6 never executed (fallthrough)
        -:  136:      {
    #####:  137:         if(pos->first.use_count() == 1)
    %%%%%:  137-block 83
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  138:         {
    #####:  139:            list_iterator condemmed(pos);
    #####:  140:            ++pos;
    %%%%%:  140-block 86
call    0 never executed
        -:  141:            // now remove the items from our containers, 
        -:  142:            // then order has to be as follows:
    #####:  143:            BOOST_REGEX_ASSERT(s_data.index.find(*(condemmed->second)) != s_data.index.end());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  143-block 90
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  143-block 92
call    8 never executed
    $$$$$:  143-block 140
    $$$$$:  143-block 141
    #####:  144:            s_data.index.erase(*(condemmed->second));
    %%%%%:  144-block 93
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  145:            s_data.cont.erase(condemmed); 
    %%%%%:  145-block 95
call    0 never executed
call    1 never executed
    #####:  146:            --s;
        -:  147:         }
        -:  148:         else
    #####:  149:            ++pos;
    %%%%%:  149-block 98
call    0 never executed
        -:  150:      }
    #####:  151:      BOOST_REGEX_ASSERT(s_data.index[k]->first.get() == result.get());
    %%%%%:  151-block 105
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  151-block 106
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  151-block 110
call    8 never executed
    #####:  152:      BOOST_REGEX_ASSERT(&(s_data.index.find(k)->first) == s_data.cont.back().second);
    %%%%%:  152-block 111
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  152-block 112
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  152-block 115
call    7 never executed
    $$$$$:  152-block 143
    #####:  153:      BOOST_REGEX_ASSERT(s_data.index.find(k)->first == k);
    %%%%%:  153-block 116
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  153-block 117
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  153-block 120
call    7 never executed
    %%%%%:  153-block 121
    $$$$$:  153-block 144
        -:  154:   }
        1:  155:   return result;
        1:  155-block 122
call    0 returned 1
        1:  156:}
call    0 returned 1
    $$$$$:  156-block 146
call    1 never executed
        -:  157:
        -:  158:}
        -:  159:
        -:  160:#endif
