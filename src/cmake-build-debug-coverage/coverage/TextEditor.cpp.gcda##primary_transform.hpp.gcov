        -:    0:Source:/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/vendor/regex/include/boost/regex/v5/primary_transform.hpp
        -:    0:Graph:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcno
        -:    0:Data:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/ImGuiColorTextEdit/TextEditor.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: *
        -:    3: * Copyright (c) 1998-2002
        -:    4: * John Maddock
        -:    5: *
        -:    6: * Use, modification and distribution are subject to the 
        -:    7: * Boost Software License, Version 1.0. (See accompanying file 
        -:    8: * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9: *
        -:   10: */
        -:   11: 
        -:   12: /*
        -:   13:  *   LOCATION:    see http://www.boost.org for most recent version.
        -:   14:  *   FILE:        primary_transform.hpp
        -:   15:  *   VERSION:     see <boost/version.hpp>
        -:   16:  *   DESCRIPTION: Heuristically determines the sort string format in use
        -:   17:  *                by the current locale.
        -:   18:  */
        -:   19:
        -:   20:#ifndef BOOST_REGEX_PRIMARY_TRANSFORM
        -:   21:#define BOOST_REGEX_PRIMARY_TRANSFORM
        -:   22:
        -:   23:namespace boost{
        -:   24:   namespace BOOST_REGEX_DETAIL_NS{
        -:   25:
        -:   26:
        -:   27:enum{
        -:   28:   sort_C,
        -:   29:   sort_fixed,
        -:   30:   sort_delim,
        -:   31:   sort_unknown
        -:   32:};
        -:   33:
        -:   34:template <class S, class charT>
function _ZN5boost13re_detail_50011count_charsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEEjRKT_T0_ called 0 returned 0% blocks executed 0%
    #####:   35:unsigned count_chars(const S& s, charT c)
        -:   36:{
        -:   37:   //
        -:   38:   // Count how many occurrences of character c occur
        -:   39:   // in string s: if c is a delimeter between collation
        -:   40:   // fields, then this should be the same value for all
        -:   41:   // sort keys:
        -:   42:   //
    #####:   43:   unsigned int count = 0;
    #####:   44:   for(unsigned pos = 0; pos < s.size(); ++pos)
    %%%%%:   44-block 2
    %%%%%:   44-block 6
    %%%%%:   44-block 7
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:   45:   {
    #####:   46:      if(s[pos] == c) ++count;
    %%%%%:   46-block 3
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:   46-block 5
        -:   47:   }
    #####:   48:   return count;
    %%%%%:   48-block 9
        -:   49:}
        -:   50:
        -:   51:
        -:   52:template <class traits, class charT>
function _ZN5boost13re_detail_50016find_sort_syntaxINS0_31cpp_regex_traits_implementationIcEEcEEjPKT_PT0_ called 1 returned 100% blocks executed 43%
        1:   53:unsigned find_sort_syntax(const traits* pt, charT* delim)
        -:   54:{
        -:   55:   //
        -:   56:   // compare 'a' with 'A' to see how similar they are,
        -:   57:   // should really use a-accute but we can't portably do that,
        -:   58:   //
        -:   59:   typedef typename traits::string_type string_type;
        -:   60:   typedef typename traits::char_type char_type;
        -:   61:
        -:   62:   // Suppress incorrect warning for MSVC
        -:   63:   (void)pt;
        -:   64:
        1:   65:   char_type a[2] = {'a', '\0', };
        1:   66:   string_type sa(pt->transform(a, a+1));
        1:   66-block 2
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   67:   if(sa == a)
        1:   67-block 3
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   67-block 4
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -:   68:   {
    #####:   69:      *delim = 0;
    #####:   70:      return sort_C;
    %%%%%:   70-block 5
        -:   71:   }
        1:   72:   char_type A[2] = { 'A', '\0', };
        1:   73:   string_type sA(pt->transform(A, A+1));
        1:   73-block 6
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   74:   char_type c[2] = { ';', '\0', };
        1:   75:   string_type sc(pt->transform(c, c+1));
        1:   75-block 7
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   76:
        1:   77:   int pos = 0;
       1*:   78:   while((pos <= static_cast<int>(sa.size())) && (pos <= static_cast<int>(sA.size())) && (sa[pos] == sA[pos])) ++pos;
        1:   78-block 8
    %%%%%:   78-block 9
        1:   78-block 10
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   78-block 12
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   78-block 14
call    6 returned 1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   78-block 17
        1:   78-block 18
        1:   78-block 19
branch 10 taken 0
branch 11 taken 1 (fallthrough)
        1:   79:   --pos;
        1:   80:   if(pos < 0)
        1:   80-block 20
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   81:   {
        1:   82:      *delim = 0;
        1:   83:      return sort_unknown;
        1:   83-block 21
        -:   84:   }
        -:   85:   //
        -:   86:   // at this point sa[pos] is either the end of a fixed width field
        -:   87:   // or the character that acts as a delimiter:
        -:   88:   //
    #####:   89:   charT maybe_delim = sa[pos];
    %%%%%:   89-block 22
call    0 never executed
    #####:   90:   if((pos != 0) && (count_chars(sa, maybe_delim) == count_chars(sA, maybe_delim)) && (count_chars(sa, maybe_delim) == count_chars(sc, maybe_delim)))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   90-block 24
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:   90-block 27
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%:   90-block 30
    %%%%%:   90-block 31
    %%%%%:   90-block 32
branch 10 never executed (fallthrough)
branch 11 never executed
        -:   91:   {
    #####:   92:      *delim = maybe_delim;
    #####:   93:      return sort_delim;
    %%%%%:   93-block 33
        -:   94:   }
        -:   95:   //
        -:   96:   // OK doen't look like a delimiter, try for fixed width field:
        -:   97:   //
    #####:   98:   if((sa.size() == sA.size()) && (sa.size() == sc.size()))
    %%%%%:   98-block 34
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:   98-block 37
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:   98-block 40
    %%%%%:   98-block 41
    %%%%%:   98-block 42
branch  8 never executed (fallthrough)
branch  9 never executed
        -:   99:   {
        -:  100:      // note assumes that the fixed width field is less than
        -:  101:      // (numeric_limits<charT>::max)(), should be true for all types
        -:  102:      // I can't imagine 127 character fields...
    #####:  103:      *delim = static_cast<charT>(++pos);
    #####:  104:      return sort_fixed;
    %%%%%:  104-block 43
        -:  105:   }
        -:  106:   //
        -:  107:   // don't know what it is:
        -:  108:   //
    #####:  109:   *delim = 0;
    #####:  110:   return sort_unknown;
    %%%%%:  110-block 44
        1:  111:}
        1:  111-block 45
call    0 returned 1
call    1 returned 1
        1:  111-block 47
call    2 returned 1
    $$$$$:  111-block 50
call    3 never executed
    $$$$$:  111-block 52
call    4 never executed
        -:  112:
        -:  113:
        -:  114:   } // namespace BOOST_REGEX_DETAIL_NS
        -:  115:} // namespace boost
        -:  116:
        -:  117:#endif
        -:  118:
        -:  119:
        -:  120:
