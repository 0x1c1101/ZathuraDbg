        -:    0:Source:/home/rc/ZathuraDbg/vendor/imgui/misc/cpp/imgui_stdlib.cpp
        -:    0:Graph:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/imgui/misc/cpp/imgui_stdlib.cpp.gcno
        -:    0:Data:/home/rc/ZathuraDbg/src/cmake-build-debug-coverage/CMakeFiles/Zathura.dir/home/rc/ZathuraDbg/vendor/imgui/misc/cpp/imgui_stdlib.cpp.gcda
        -:    0:Runs:1
        -:    1:// dear imgui: wrappers for C++ standard library (STL) types (std::string, etc.)
        -:    2:// This is also an example of how you may wrap your own similar types.
        -:    3:
        -:    4:// Changelog:
        -:    5:// - v0.10: Initial version. Added InputText() / InputTextMultiline() calls with std::string
        -:    6:
        -:    7:// See more C++ related extension (fmt, RAII, syntaxis sugar) on Wiki:
        -:    8://   https://github.com/ocornut/imgui/wiki/Useful-Extensions#cness
        -:    9:
        -:   10:#include "imgui.h"
        -:   11:#include "imgui_stdlib.h"
        -:   12:
        -:   13:// Clang warnings with -Weverything
        -:   14:#if defined(__clang__)
        -:   15:#pragma clang diagnostic push
        -:   16:#pragma clang diagnostic ignored "-Wsign-conversion"    // warning: implicit conversion changes signedness
        -:   17:#endif
        -:   18:
        -:   19:struct InputTextCallback_UserData
        -:   20:{
        -:   21:    std::string*            Str;
        -:   22:    ImGuiInputTextCallback  ChainCallback;
        -:   23:    void*                   ChainCallbackUserData;
        -:   24:};
        -:   25:
function _ZL17InputTextCallbackP26ImGuiInputTextCallbackData called 0 returned 0% blocks executed 0%
    #####:   26:static int InputTextCallback(ImGuiInputTextCallbackData* data)
        -:   27:{
    #####:   28:    InputTextCallback_UserData* user_data = (InputTextCallback_UserData*)data->UserData;
    #####:   29:    if (data->EventFlag == ImGuiInputTextFlags_CallbackResize)
    %%%%%:   29-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   30:    {
        -:   31:        // Resize string callback
        -:   32:        // If for some reason we refuse the new length (BufTextLen) and/or capacity (BufSize) we need to set them back to what we want.
    #####:   33:        std::string* str = user_data->Str;
    #####:   34:        IM_ASSERT(data->Buf == str->c_str());
    %%%%%:   34-block 3
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:   34-block 5
call    3 never executed
    #####:   35:        str->resize(data->BufTextLen);
    %%%%%:   35-block 6
call    0 never executed
    #####:   36:        data->Buf = (char*)str->c_str();
call    0 never executed
        -:   37:    }
    #####:   38:    else if (user_data->ChainCallback)
    %%%%%:   38-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   39:    {
        -:   40:        // Forward to user callback, if any
    #####:   41:        data->UserData = user_data->ChainCallbackUserData;
    #####:   42:        return user_data->ChainCallback(data);
    %%%%%:   42-block 10
call    0 never executed
        -:   43:    }
    #####:   44:    return 0;
    %%%%%:   44-block 12
        -:   45:}
        -:   46:
function _ZN5ImGui9InputTextEPKcPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiPFiP26ImGuiInputTextCallbackDataEPv called 0 returned 0% blocks executed 0%
    #####:   47:bool ImGui::InputText(const char* label, std::string* str, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)
        -:   48:{
    #####:   49:    IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);
    %%%%%:   49-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   49-block 3
call    2 never executed
    #####:   50:    flags |= ImGuiInputTextFlags_CallbackResize;
        -:   51:
        -:   52:    InputTextCallback_UserData cb_user_data;
    #####:   53:    cb_user_data.Str = str;
    #####:   54:    cb_user_data.ChainCallback = callback;
    #####:   55:    cb_user_data.ChainCallbackUserData = user_data;
    #####:   56:    return InputText(label, (char*)str->c_str(), str->capacity() + 1, flags, InputTextCallback, &cb_user_data);
    %%%%%:   56-block 4
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:   56-block 7
    %%%%%:   56-block 9
        -:   57:}
        -:   58:
function _ZN5ImGui18InputTextMultilineEPKcPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK6ImVec2iPFiP26ImGuiInputTextCallbackDataEPv called 0 returned 0% blocks executed 0%
    #####:   59:bool ImGui::InputTextMultiline(const char* label, std::string* str, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)
        -:   60:{
    #####:   61:    IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);
    %%%%%:   61-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   61-block 3
call    2 never executed
    #####:   62:    flags |= ImGuiInputTextFlags_CallbackResize;
        -:   63:
        -:   64:    InputTextCallback_UserData cb_user_data;
    #####:   65:    cb_user_data.Str = str;
    #####:   66:    cb_user_data.ChainCallback = callback;
    #####:   67:    cb_user_data.ChainCallbackUserData = user_data;
    #####:   68:    return InputTextMultiline(label, (char*)str->c_str(), str->capacity() + 1, size, flags, InputTextCallback, &cb_user_data);
    %%%%%:   68-block 4
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:   68-block 7
    %%%%%:   68-block 9
        -:   69:}
        -:   70:
function _ZN5ImGui17InputTextWithHintEPKcS1_PNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiPFiP26ImGuiInputTextCallbackDataEPv called 0 returned 0% blocks executed 0%
    #####:   71:bool ImGui::InputTextWithHint(const char* label, const char* hint, std::string* str, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)
        -:   72:{
    #####:   73:    IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);
    %%%%%:   73-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   73-block 3
call    2 never executed
    #####:   74:    flags |= ImGuiInputTextFlags_CallbackResize;
        -:   75:
        -:   76:    InputTextCallback_UserData cb_user_data;
    #####:   77:    cb_user_data.Str = str;
    #####:   78:    cb_user_data.ChainCallback = callback;
    #####:   79:    cb_user_data.ChainCallbackUserData = user_data;
    #####:   80:    return InputTextWithHint(label, hint, (char*)str->c_str(), str->capacity() + 1, flags, InputTextCallback, &cb_user_data);
    %%%%%:   80-block 4
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:   80-block 7
    %%%%%:   80-block 9
        -:   81:}
        -:   82:
        -:   83:#if defined(__clang__)
        -:   84:#pragma clang diagnostic pop
        -:   85:#endif
